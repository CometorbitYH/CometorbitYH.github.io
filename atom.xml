<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MY</title>
  
  <subtitle>IT IS MY LIFE</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cometorbityh.github.io/"/>
  <updated>2019-12-11T16:35:08.462Z</updated>
  <id>https://cometorbityh.github.io/</id>
  
  <author>
    <name>杨涵</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis 整整整</title>
    <link href="https://cometorbityh.github.io/2019/12/11/Mybatis-%E6%95%B4%E6%95%B4%E6%95%B4/"/>
    <id>https://cometorbityh.github.io/2019/12/11/Mybatis-整整整/</id>
    <published>2019-12-11T02:52:16.000Z</published>
    <updated>2019-12-11T16:35:08.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1：简介"><a href="#1：简介" class="headerlink" title="1：简介"></a>1：简介</h1><h2 id="1-1、什么是MyBatis？"><a href="#1-1、什么是MyBatis？" class="headerlink" title="1.1、什么是MyBatis？"></a>1.1、什么是MyBatis？</h2><ul><li>MyBatis是一款优秀的持久层框架。 iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs） </li><li>支持 定制SQL、存储过程以及高级映射</li><li>避免了几乎所有的JDBC代码和手动设置参数以及获取结果集</li><li>可以使用简单的XML或注解来配置和映射原生类型、接口和java的POJO（Plain Old Java Objects，普通老式Java对象）为数据库中的记录。</li><li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265" target="_blank" rel="noopener">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis" target="_blank" rel="noopener">iBatis</a>（ internet  abatis）, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。 </li></ul><h2 id="1-2、如何获得Mybatis？"><a href="#1-2、如何获得Mybatis？" class="headerlink" title="1.2、如何获得Mybatis？"></a>1.2、如何获得Mybatis？</h2><ul><li><p>Maven仓库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>中文官方文档： <a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/getting-started.html</a> </p></li><li><p>GitHub： <a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3</a> </p></li></ul><h2 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h2><p><strong>数据持久化</strong></p><ul><li><p>持久化就是将程序的数据在 <strong>持久状态</strong> 和 <strong>瞬时状态</strong> 转化的过程</p><ul><li><p>持久状态：数据保存在数据库（jdbc），或IO文件中，可以持久化的保存 </p></li><li><p>瞬时状态：数据保存在内存中，而内存的特点是“断电即失” </p></li><li><p>生活中的持久化：冷藏食品，可以使食物持续长时间不变质</p><blockquote><p>总结：【数据库、IO文件持久化】【内存 断电即失】【生活案例：冷藏】</p></blockquote></li></ul></li></ul><p><strong>为什么需要持久化？</strong></p><ul><li><p>由于内存 断电即失 的特性，数据常常会丢失（而且内存实在太昂贵了）。但是有一些重要的数据，不能够丢失，这时要用到持久化</p><blockquote><p>总结：【内存太贵】【重要对象 不能丢失】</p></blockquote></li></ul><p><strong>持久层</strong></p><p>Dao层，Service层，Controller层…</p><ul><li>持久层 是 完成持久化工作的代码块</li><li>层界限十分明显。（分工合理）</li></ul><h2 id="1-4、为什么需要MyBatis"><a href="#1-4、为什么需要MyBatis" class="headerlink" title="1.4、为什么需要MyBatis?"></a>1.4、为什么需要MyBatis?</h2><ul><li><p>帮助程序员将数据存入数据库中（主要原因）</p></li><li><p>传统的JDBC代码太过复杂，简化JDBC为框架，实现半自动化，方便快捷</p></li><li><p>不要MyBatis也可以，但是使用MyBatis更容易上手。</p></li><li><p><strong>技术没有高低之分，只有使用者有高低之分。</strong></p></li><li><p>优点：</p><ul><li><p>简单易学</p><blockquote><p>本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</p></blockquote></li><li><p>灵活</p><blockquote><p>mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</p></blockquote></li><li><p>解除sql与程序代码的耦合</p><blockquote><p>通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</p></blockquote></li><li><p>提供映射标签，支持对象与数据库的orm字段关系映射</p></li><li><p>提供对象关系映射标签，支持对象关系组建维护</p></li><li><p>提供xml标签，支持编写动态sql</p></li></ul></li></ul><h1 id="2：第一个MyBatis程序"><a href="#2：第一个MyBatis程序" class="headerlink" title="2：第一个MyBatis程序"></a>2：第一个MyBatis程序</h1><blockquote><p> 思路：创建数据库和表 – &gt; 搭建环境 – &gt; 测试</p></blockquote><p>项目结构：</p><img style="zoom: 67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211204609.png" class="lozad"><h2 id="2-1、创建数据库"><a href="#2-1、创建数据库" class="headerlink" title="2.1、创建数据库"></a>2.1、创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="string">`mybatis_test`</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="string">`mybatis_test`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`user`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211121546.png" class="lozad"></p><h2 id="2-2、搭建环境"><a href="#2-2、搭建环境" class="headerlink" title="2.2、搭建环境"></a>2.2、搭建环境</h2><ul><li><p>新建Maven项目（普通的，原生的就行）</p></li><li><p>删除src目录（这样这个项目就是父工程了，可以加module），</p></li><li><p>导入依赖：在pom.xml引入需要的jar包</p></li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211125525.png" class="lozad"></p><h2 id="2-3-、创建子模块"><a href="#2-3-、创建子模块" class="headerlink" title="2.3 、创建子模块"></a>2.3 、创建子模块</h2><h3 id="（1）编写MyBatis核心配置文件"><a href="#（1）编写MyBatis核心配置文件" class="headerlink" title="（1）编写MyBatis核心配置文件"></a>（1）编写MyBatis核心配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- configuration 核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--environments环境   默认环境为 development --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- JDBC的事务管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_test?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（2）编写MyBatis工具类"><a href="#（2）编写MyBatis工具类" class="headerlink" title="（2）编写MyBatis工具类"></a>（2）编写MyBatis工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。</span></span><br><span class="line">    <span class="comment">// SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="comment">// 你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）创建User类（pojo）"><a href="#（3）创建User类（pojo）" class="headerlink" title="（3）创建User类（pojo）"></a>（3）创建User类（pojo）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造 无参构造</span></span><br><span class="line">    <span class="comment">//getter() setter() toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（4）创建Dao接口"><a href="#（4）创建Dao接口" class="headerlink" title="（4）创建Dao接口"></a>（4）创建Dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（5）创建Mapper文件（原为Dao接口的实现类）"><a href="#（5）创建Mapper文件（原为Dao接口的实现类）" class="headerlink" title="（5）创建Mapper文件（原为Dao接口的实现类）"></a>（5）创建Mapper文件（原为Dao接口的实现类）</h3><p>在以前，我们需要创建一个接口实现类，主要做：实现接口 – 重写方法  – 执行SQL语句（该方法舍弃，过于繁琐）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重写方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行SQL语句</span></span><br><span class="line">        String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">        <span class="comment">//结果集 ResultSet</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在现在，我们需要创建一个接口的Mapper文件，主要做：绑定接口 – 重写方法  – 执行SQL语句</p><p>对比发现，步骤没有变，但是使用Mapper文件的优势就是j简化代码，分离代码</p><h3 id="（6）测试"><a href="#（6）测试" class="headerlink" title="（6）测试"></a>（6）测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.yang.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取SqlSession对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 执行Sql语句</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 方式1：使用getMapper获得接口对象，并执行方法（推荐）</span></span><br><span class="line">            <span class="comment">// 面向接口编程</span></span><br><span class="line">            UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">            <span class="comment">// 调用接口子类的方法</span></span><br><span class="line">            List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 方式2：直接调用接口方法(不推荐)</span></span><br><span class="line">            <span class="comment">/*List&lt;User&gt; userList1 = sqlSession.selectList("com.yang.dao.UserDao.getUserList");</span></span><br><span class="line"><span class="comment">            for(User user : userList1)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(user);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭sqlSession</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>开始测试~  报错！</strong></p><p>org.apache.ibatis.binding.BindingException: Type interface com.yang.dao.UserDao is not known to the MapperRegistry.</p><p>翻译下：在Mapper注册中心里，类型接口UserDao是未知的</p><p>也就是说，Mapper文件还要注册到Mapper注册中心中，而Mapper注册中心在哪？就在MyBatis的核心配置文件中。</p></blockquote><h3 id="（7）将Mapper文件注册到Mybatis核心配置文件中"><a href="#（7）将Mapper文件注册到Mybatis核心配置文件中" class="headerlink" title="（7）将Mapper文件注册到Mybatis核心配置文件中"></a>（7）将Mapper文件注册到Mybatis核心配置文件中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 每一个Mapper.xml都需要在Mybatis核心配置文件中注册 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/yang/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次测试！</p><blockquote><p><strong>再次报错！</strong>找不到配置文件？不是配置了吗</p><p>java.io.IOException: Could not find resource com/yang/dao/UserMapper.xml</p><p>这个问题的原因：是资源过滤的问题</p><p> <strong>IDEA的Maven是不会编译src的java目录的xml文件，所以在Mybatis的配置文件中找不到xml文件！</strong> </p></blockquote><p>所以我们需要在子模块的pom.xml中加入如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build配置resource，来防止资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211141027.png" class="lozad"></p><h3 id="（8）总结"><a href="#（8）总结" class="headerlink" title="（8）总结"></a>（8）总结</h3><p>经过这一个小demo的测试，我们得出各个文件中要写的配置：</p><blockquote><p>核心配置文件：配置环境，注册Mapper文件</p><p>Mapper文件：绑定接口，”重写方法“，执行SQL语句</p></blockquote><p>在做的过程中，我们会遇到的问题，以下问题，只需要逐步检查，基本就可以顺利运行了！</p><blockquote><ul><li>配置文件没有注册</li><li>接口绑定错误</li><li>方法名不对</li><li>返回类型不对</li><li>Maven导出资源问题</li></ul></blockquote><h1 id="3：测试类解析：3个重要API"><a href="#3：测试类解析：3个重要API" class="headerlink" title="3：测试类解析：3个重要API"></a>3：测试类解析：3个重要API</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211143437.png" class="lozad"></p><p> 作用域和生命周期类是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong> </p><h4 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h4><ul><li>一旦创建了SqlSessionFactory，就不再需要它了</li><li>因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域 （局部变量）</li><li></li></ul><h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><p>关键词：【数据库连接池】【单例】【作用域：全局】</p><ul><li><p>可以理解为：数据库连接池</p></li><li><p>SqlSessionFactory一旦创建就会在应用的运行期间一直存在（数据库连接池一直在）， 没有任何理由丢弃它或重新创建另一个实例。 </p></li><li><p>SqlSessionFactory 的最佳作用域是应用作用域。 </p></li><li><p>最简单的就是使用<strong>单例模式</strong>或者静态单例模式 ：保证只有一个</p></li></ul><h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><ul><li><p>每个线程都应该有它自己的 SqlSession 实例。 （可以理解为 连接到连接池的一个请求）</p></li><li><p>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</p></li><li><p>每次收到的 HTTP 请求，就可以打开一个 SqlSession，返回一个响应，就关闭它。 这个关闭操作是很重要的，你应该把这个关闭操作放到 finally 块中以确保每次都能执行关闭。 （请求用完要关闭）</p></li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211204432.png" class="lozad"></p><h1 id="4：配置文件解析"><a href="#4：配置文件解析" class="headerlink" title="4：配置文件解析"></a>4：配置文件解析</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211163441.png" class="lozad"></p><h2 id="4-1、environments-环境配置"><a href="#4-1、environments-环境配置" class="headerlink" title="4.1、environments 环境配置"></a>4.1、environments 环境配置</h2><blockquote><p>默认环境配置（⭐）：</p><ul><li>默认使用的环境 ID（比如：default=”development”）。</li><li>每个 environment 元素定义的环境 ID（比如：id=”development”）。</li><li>事务管理器的配置（比如：type=”JDBC”）。</li><li>数据源的配置（比如：type=”POOLED”）。</li></ul></blockquote><h2 id="4-2、properties-属性"><a href="#4-2、properties-属性" class="headerlink" title="4.2、properties 属性"></a>4.2、properties 属性</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        也可以内部配置属性</span></span><br><span class="line"><span class="comment">        如果内部定义的属性和外部文件的属性相同，优先使用外部文件的属性值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="username" value="root"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="password" value="123456"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   environments环境配置</span></span><br><span class="line"><span class="comment">   可配置多个环境，但只能选一个</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            事务管理器 默认为JDBC</span></span><br><span class="line"><span class="comment">            在MyBatis中，有两种类型的事务管理器，也就是 type=”[JDBC|MANAGED]”</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            数据源 用来连接数据库 默认为POOLED</span></span><br><span class="line"><span class="comment">            有三种内建的数据源类型，也就是 type=”[UNPOOLED|POOLED|JNDI]”</span></span><br><span class="line"><span class="comment">                UNPOOLED：不使用池</span></span><br><span class="line"><span class="comment">                POOLED：使用池（池：用完可以回收）</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3、typeAliases-类型别名"><a href="#4-3、typeAliases-类型别名" class="headerlink" title="4.3、typeAliases 类型别名"></a>4.3、typeAliases 类型别名</h2><p>作用： 减少类完全限定名的冗余 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 给实体类起别名--&gt;</span><br><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;!--给单个类起别名--&gt;</span><br><span class="line">    &lt;typeAlias type=<span class="string">"com.yang.pojo.User"</span> alias=<span class="string">"user"</span>/&gt;</span><br><span class="line">    &lt;!--给一个包下的所有类起别名，默认别名为该类的类名的首字母小写</span><br><span class="line">        但是，当要给这个包下的某个类单独起别名时，也可以在类上加上注解 <span class="meta">@Alias</span>(<span class="string">"hello"</span>)</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;<span class="keyword">package</span> name=<span class="string">"com.yang.pojo"</span>/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="meta">@Alias</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认别名， 常见的 Java 类型内建的相应的类型别名 </p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211173258.png" class="lozad"></p><h2 id="4-4、settings-设置"><a href="#4-4、settings-设置" class="headerlink" title="4.4、settings 设置"></a>4.4、settings 设置</h2><p> 需要了解的设置</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211175039.png" class="lozad"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">--</span> 完整案例 <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"PARTIAL"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingUnknownColumnBehavior"</span> <span class="attr">value</span>=<span class="string">"WARNING"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultFetchSize"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"safeRowBoundsEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"OTHER"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">"equals,clone,hashCode,toString"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-5、mappers-映射器"><a href="#4-5、mappers-映射器" class="headerlink" title="4.5、mappers 映射器"></a>4.5、mappers 映射器</h2><p>MapperRegistry：注册绑定Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用相对路径的资源引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/yang/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.yang.dao.UserMapper"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将包中的映射器接口实现完全注册为映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.yang.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><p>使用class 和 package 注册映射文件时，</p><ul><li>接口和其Mapper配置文件必须同名！</li><li>接口和其Mapper配置文件必须在同一个包下！</li></ul></blockquote><h2 id="4-6、其他配置"><a href="#4-6、其他配置" class="headerlink" title="4.6、其他配置"></a>4.6、其他配置</h2><p>typeHandler 类型处理器</p><p>objectFactory 对象工厂</p><p>plugins 插件</p><ul><li>mybatis-plus</li><li>mybatis-generator-core</li><li>通用mapper</li></ul><h1 id="5：Mapper文件解析"><a href="#5：Mapper文件解析" class="headerlink" title="5：Mapper文件解析"></a>5：Mapper文件解析</h1><blockquote><p>namespace：名称空间  接口名 （绑定接口）</p><p>id ：唯一标识符，就是对应的namespace的方法名 （重写方法）</p><p>parameterType：参数类型</p><p>resultType：sql语句执行的返回值</p></blockquote><blockquote><p>步骤：编写接口和方法  —&gt; 编写对应的Mapper文件的sql语句  — &gt; 测试</p><p><strong>注意：增删改操作都需要提交事务，查询不用</strong></p></blockquote><h2 id="5-1、CRUD测试"><a href="#5-1、CRUD测试" class="headerlink" title="5.1、CRUD测试"></a>5.1、CRUD测试</h2><h3 id="（1）接口"><a href="#（1）接口" class="headerlink" title="（1）接口"></a>（1）接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据ID查找用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个用户</span></span><br><span class="line">    <span class="function">Integer <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改用户</span></span><br><span class="line">    <span class="function">Integer <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除一个用户</span></span><br><span class="line">    <span class="function">Integer <span class="title">delUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###（2）Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace == 绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yang.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultType</span>=<span class="string">"com.yang.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.yang.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 对象中的属性，可以直接取出来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.yang.pojo.User"</span>&gt;</span></span><br><span class="line">        insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.yang.pojo.User"</span>&gt;</span></span><br><span class="line">        update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（3）测试"><a href="#（3）测试" class="headerlink" title="（3）测试"></a>（3）测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.yang.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取SqlSession对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 执行Sql语句</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 面向接口编程</span></span><br><span class="line">            UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">            <span class="comment">// 调用接口子类的方法</span></span><br><span class="line">            List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line">            <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭sqlSession</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">// 执行sql语句</span></span><br><span class="line">        UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);  <span class="comment">// User&#123;id=1, name='阿大', pwd='123456'&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：增删改需要提交事务</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        Integer result = mapper.addUser(<span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">"阿四"</span>, <span class="string">"123456"</span>));</span><br><span class="line">        <span class="keyword">if</span> (result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"插入成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUSer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        Integer res = mapper.updateUser(<span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"张三"</span>, <span class="string">"123456"</span>));</span><br><span class="line">        <span class="keyword">if</span> (res&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"修改成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        Integer res = mapper.delUser(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (res&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"删除成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（4）结果"><a href="#（4）结果" class="headerlink" title="（4）结果"></a>（4）结果</h3><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211153752.png" class="lozad"><h2 id="5-2、模糊查询-like"><a href="#5-2、模糊查询-like" class="headerlink" title="5.2、模糊查询 like"></a>5.2、模糊查询 like</h2><h3 id="（1）在Java代码中传递通配符"><a href="#（1）在Java代码中传递通配符" class="headerlink" title="（1）在Java代码中传递通配符"></a>（1）在Java代码中传递通配符</h3><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据模糊查询查找用户</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLike</span><span class="params">(String value)</span></span>;</span><br></pre></td></tr></table></figure><p>Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByLike"</span> <span class="attr">resultType</span>=<span class="string">"com.yang.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from user where name like #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLike</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserByLike(<span class="string">"%阿%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211162936.png" class="lozad"></p><h3 id="（2）在SQL语句中拼接通配符（不推荐）"><a href="#（2）在SQL语句中拼接通配符（不推荐）" class="headerlink" title="（2）在SQL语句中拼接通配符（不推荐）"></a>（2）在SQL语句中拼接通配符（不推荐）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---- 修改Mapper文件 ----</span><br><span class="line">&lt;select id=<span class="string">"getUserByLike"</span> resultType=<span class="string">"com.yang.pojo.User"</span>&gt;</span><br><span class="line">        select * from user where name like "%"#&#123;value&#125;"%"</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">  </span><br><span class="line">---- 修改测试类 ----</span><br><span class="line">List&lt;User&gt; userList = mapper.getUserByLike(<span class="string">"阿"</span>);</span><br></pre></td></tr></table></figure><p>但是这样会导致SQL注入，不安全，因此不推荐使用！</p><h2 id="5-3、万能Map"><a href="#5-3、万能Map" class="headerlink" title="5.3、万能Map"></a>5.3、万能Map</h2><p>上述例子里，我们直接使用了实体类来作为参数类型，这样只要参数名和实体类的属性名一致就可以传进去。</p><p>需求：修改id为4的用户的名字。</p><blockquote><p>上述需求很简单，只要一个update标签里传入User类型就可以。</p><p>但是当我们的实体类的属性达到一定数量（100个）时，如果我们还是使用实体类型作为参数的话，那么就要在SQL中写100个属性，这样子明显很繁琐。</p><p>因此我们可以尝试使用Map</p><blockquote><p>当字段名或实体类属性过多时，可以考虑使用 Map 作为 Mapper 的参数类型</p></blockquote></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211160503.png" class="lozad"></p><p>总结：</p><blockquote><ul><li>Map传递参数时，直接在SQL中取出key即可</li><li>对象传递参数时，直接在SQL中取出对象的属性即可</li><li>只有一个基本数据类型的参数的情况下，可以直接在sql中取到！</li><li><strong>多个参数时，不用实体类，使用Map或者注解！</strong></li></ul></blockquote><h2 id="5-4、resultMap"><a href="#5-4、resultMap" class="headerlink" title="5.4、resultMap"></a>5.4、resultMap</h2><blockquote><p> <code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。 </p><p> 在为一些比如连接的复杂语句编写映射代码的时候，一份 <code>resultMap</code> 能够代替实现同等功能的长达数千行的代码。 </p><p> ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。 </p></blockquote><h3 id="（1）属性名和字段名不一致（result字段）"><a href="#（1）属性名和字段名不一致（result字段）" class="headerlink" title="（1）属性名和字段名不一致（result字段）"></a>（1）属性名和字段名不一致（result字段）</h3><p>问题：解决属性名和字段名不一致的问题</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211210021.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211210120.png" class="lozad"></p><p>思路：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; select * from user where id = #&#123;id&#125;  </span><br><span class="line">&gt;  相当于</span><br><span class="line">&gt; select id,name,pwd from user where id = #&#123;id&#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; 类型处理器，会去找实体类中对应的属性名，当字段与属性名不一致时，属性没有查找到，因为就变成null了</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>解决方案：</p><ul><li>第一种方法：起别名（简单暴力）<ul><li>优点：简单</li><li>缺点：字段名多的时候，书写非常复杂，时SQL语句看起来很多，不美观</li></ul></li></ul><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211210853.png" class="lozad"><ul><li>第二种方法：resultMap（结果集映射）<ul><li>将  数据库中的列  映射成  实体类的属性</li></ul></li></ul><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211211817.png" class="lozad"><ul><li>上述的resultMap还可以再简化：数据库的id和实体类的id名称是一致的，因此不需要映射。</li></ul><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211213002.png" class="lozad"><h2 id="5-6、日志"><a href="#5-6、日志" class="headerlink" title="5.6、日志"></a>5.6、日志</h2><h3 id="（1）日志工厂"><a href="#（1）日志工厂" class="headerlink" title="（1）日志工厂"></a>（1）日志工厂</h3><p>我们在做数据库操作时发生异常，需要排错，此时日志能提高我们排错的效率！</p><p>以前：sout，debug</p><p>现在：日志工厂！</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211233722.png" class="lozad"></p><p>在Mybatis中，可以在核心配置文件的<code>&lt;settings&gt;</code>中设置使用的日志</p><p>常用的日志工厂为</p><ol><li><strong>STDOUT_LOGGING（标准日志输出）</strong></li></ol><ul><li>配置日志</li></ul><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">settings</span>&gt;</span>   </span><br><span class="line">&gt;     <span class="comment">&lt;!-- 标准的日志工厂实现 --&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li>查询输出的日志</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211234514.png" class="lozad"></p><ol start="2"><li><strong>LOG4j</strong></li></ol><ul><li><p>什么是LOG4j？</p><ul><li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995" target="_blank" rel="noopener">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/控制台/2438626" target="_blank" rel="noopener">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI" target="_blank" rel="noopener">GUI</a>组件 </li><li>也可以控制每一条日志的输出格式； </li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。 </li><li>这些可以通过一个<a href="https://baike.baidu.com/item/配置文件/286550" target="_blank" rel="noopener">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。 </li></ul></li><li><p>配置</p><ul><li><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>log4j配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>使用</p><p>在要使用log4j的类中，导入包 org.apache.log4j.Logger</p><p>日志对象，参数修改为当前类的class</p><p>日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">"info:进入了testLog4j"</span>);</span><br><span class="line">logger.debug(<span class="string">"debug:进入了testLog4j"</span>);</span><br><span class="line">logger.error(<span class="string">"error:进入了testLog4j"</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="5-7、分页"><a href="#5-7、分页" class="headerlink" title="5.7、分页"></a>5.7、分页</h2><p>为甚分页？</p><ul><li>当数据条目过多时，服务器负担过重，因此分页可以<strong>减少服务器对数据的处理量</strong></li></ul><h3 id="（1）使用limit分页"><a href="#（1）使用limit分页" class="headerlink" title="（1）使用limit分页"></a>（1）使用limit分页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user limit startIndex,pageSize //起始索引，该条的条目</span><br></pre></td></tr></table></figure><p>（1-1）接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><p>（1-2）Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yang.dao.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;result column="id" property="id"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByLimit"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">        select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（1-3）测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"startIndex"</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"pageSize"</span>,<span class="number">2</span>);</span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserByLimit(map);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(User user:userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//User&#123;id=2, username='阿二', password='123456'&#125;</span></span><br><span class="line">        <span class="comment">//User&#123;id=4, username='小强', password='123456'&#125;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>id：对应的namespace的方法名</p><p>resultType：sql语句</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1：简介&quot;&gt;&lt;a href=&quot;#1：简介&quot; class=&quot;headerlink&quot; title=&quot;1：简介&quot;&gt;&lt;/a&gt;1：简介&lt;/h1&gt;&lt;h2 id=&quot;1-1、什么是MyBatis？&quot;&gt;&lt;a href=&quot;#1-1、什么是MyBatis？&quot; class=&quot;header
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>集合框架 复习</title>
    <link href="https://cometorbityh.github.io/2019/12/08/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E5%A4%8D%E4%B9%A0/"/>
    <id>https://cometorbityh.github.io/2019/12/08/集合框架-复习/</id>
    <published>2019-12-08T13:50:53.000Z</published>
    <updated>2019-12-08T13:50:53.393Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC 学习</title>
    <link href="https://cometorbityh.github.io/2019/12/07/SpringMVC-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://cometorbityh.github.io/2019/12/07/SpringMVC-学习/</id>
    <published>2019-12-07T03:18:39.000Z</published>
    <updated>2019-12-07T15:29:32.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC的执行流程（⭐）"><a href="#SpringMVC的执行流程（⭐）" class="headerlink" title="SpringMVC的执行流程（⭐）"></a>SpringMVC的执行流程（⭐）</h1><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207154610.png" class="lozad"></p><p>步骤简述</p><blockquote><ol><li>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。<ul><li>我们假设请求的url为 : <a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/SpringMVC/hello</li><li><strong>如上url拆分成三部分：</strong></li><li><a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080服务器域名</li><li>SpringMVC部署在服务器上的web站点</li><li>hello表示控制器</li><li>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</li></ul></li><li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</li><li>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</li><li>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</li><li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li><li>Handler让具体的Controller执行。</li><li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</li><li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li><li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li><li>最终视图呈现给用户。</li></ol></blockquote><h1 id="第一个SpringMVC"><a href="#第一个SpringMVC" class="headerlink" title="第一个SpringMVC"></a>第一个SpringMVC</h1><p>控制器Controller</p><ul><li>控制器复杂提供访问应用程序的行为，通常通过<strong>接口定义</strong>或<strong>注解定义</strong>两种方法实现。</li><li>控制器负责解析用户的请求并将其转换为一个模型。</li><li>在Spring MVC中一个控制器类可以包含多个方法</li></ul><h2 id="方法1：实现Controller接口"><a href="#方法1：实现Controller接口" class="headerlink" title="方法1：实现Controller接口"></a>方法1：实现Controller接口</h2><h3 id="Controller接口介绍"><a href="#Controller接口介绍" class="headerlink" title="Controller接口介绍"></a>Controller接口介绍</h3><p>简述：</p><p> Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法； </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现该接口的类获得控制器功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">//处理请求且返回一个模型与视图对象</span></span><br><span class="line">    <span class="function">ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>实现Controller接口后，配置文件可以不用配置处理器映射器和处理器适配器，只留下视图解析器，也能运行。</p></blockquote><p>缺点：</p><blockquote><p>一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦； </p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>项目结构</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207162402.png" class="lozad"></p><h4 id="1）导入依赖"><a href="#1）导入依赖" class="headerlink" title="1）导入依赖"></a>1）导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2）web-xml（前端控制器）"><a href="#2）web-xml（前端控制器）" class="headerlink" title="2）web.xml（前端控制器）"></a>2）web.xml（前端控制器）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注册前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 关联springmvc的配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动级别：1   服务器启动时启动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- /  匹配所有请求 不包括jsp--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /* 匹配所有请求 包括jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3）springmvc-servlet-xml（springmvc核心配置文件）"><a href="#3）springmvc-servlet-xml（springmvc核心配置文件）" class="headerlink" title="3）springmvc-servlet.xml（springmvc核心配置文件）"></a>3）springmvc-servlet.xml（springmvc核心配置文件）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置处理器映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置处理器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注册Handler --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.yang.controller.HelloController"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4）HelloController-控制器"><a href="#4）HelloController-控制器" class="headerlink" title="4）HelloController 控制器"></a>4）HelloController 控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"你好 SpringMVC"</span>);</span><br><span class="line">        mv.setViewName(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5）视图页面"><a href="#5）视图页面" class="headerlink" title="5）视图页面"></a>5）视图页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;基于xml配置的SpringMVC&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        $&#123;msg&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="6）结果显示"><a href="#6）结果显示" class="headerlink" title="6）结果显示"></a>6）结果显示</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207161921.png" class="lozad"></p><h2 id="方法2：使用注解"><a href="#方法2：使用注解" class="headerlink" title="方法2：使用注解"></a>方法2：使用注解</h2><h3 id="Controller注解"><a href="#Controller注解" class="headerlink" title="Controller注解"></a>Controller注解</h3><p>这四个注解其实都一个意思。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component：   组件</span><br><span class="line">@Controller：  controller</span><br><span class="line">@Service：     service</span><br><span class="line">@Repository：  dao</span><br></pre></td></tr></table></figure><p>加入Controller注解后，表示这个类被Spring接管，</p><p>那么这个类中的所有方法中，如果返回值是String类型的，并且有具体页面可以跳转，那么就会被视图解析器解析，相当于是逻辑视图。</p><blockquote><p> 物理视图  =  前缀 + 逻辑视图 + 后缀</p></blockquote><h3 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="RequestMapping注解"></a>RequestMapping注解</h3><p>用于映射url到一个特定的类或方法</p><p>如果同时注解在类和方法上，那么在访问url时，应该进行url拼接，才能访问到特定的方法。</p><p>如果url带多个参数，则需要在形参前添加一个新注解：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207194024.png" class="lozad"></p><blockquote><p>注意：接收的形参尽量不要用基本数据类型，改而用包装类，避免为null，否则容易报异常</p><blockquote><p>Optional int parameter ‘xx’ is present but cannot be translated into a null value</p></blockquote></blockquote><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="1）导入依赖-1"><a href="#1）导入依赖-1" class="headerlink" title="1）导入依赖"></a>1）导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2）web-xml（前端控制器）-1"><a href="#2）web-xml（前端控制器）-1" class="headerlink" title="2）web.xml（前端控制器）"></a>2）web.xml（前端控制器）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注册前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 关联springmvc的配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动级别：1   服务器启动时启动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- /  匹配所有请求 不包括jsp--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /* 匹配所有请求 包括jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3）springmvc-servlet-xml（配置文件）"><a href="#3）springmvc-servlet-xml（配置文件）" class="headerlink" title="3）springmvc-servlet.xml（配置文件）"></a>3）springmvc-servlet.xml（配置文件）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解扫描：自动扫描包，使指定包下的注解生效，由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yang.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--资源过滤：使SpringMVC不处理静态资源 （.css,.js,.html,.mp3,.mp4）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       支持mvc注解驱动【注入处理器适配器和处理器映射器】</span></span><br><span class="line"><span class="comment">           在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">           要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">           必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">           和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">           这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">           而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4）HelloController-控制器-1"><a href="#4）HelloController-控制器-1" class="headerlink" title="4）HelloController 控制器"></a>4）HelloController 控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>     <span class="comment">//自动装配到springmvc配置文件中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"Hello SpringMVC!"</span>);</span><br><span class="line">        <span class="comment">// 封装视图</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5）视图页面-1"><a href="#5）视图页面-1" class="headerlink" title="5）视图页面"></a>5）视图页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;基于注解&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="6）结果展示"><a href="#6）结果展示" class="headerlink" title="6）结果展示"></a>6）结果展示</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207165645.png" class="lozad"></p><h1 id="Restful风格"><a href="#Restful风格" class="headerlink" title="Restful风格"></a>Restful风格</h1><p> Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。 </p><p><strong>功能</strong></p><ul><li>资源：互联网所有的事物都可以被抽象为资源</li><li>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</li><li>分别对应 添加、 删除、修改、查询。</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207194756.png" class="lozad"></p><p><strong>特点</strong>：简洁，高效，安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/&#123;a1&#125;/&#123;a2&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">item</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @PathVariable(<span class="string">"a1"</span>)</span>Integer a1,</span></span><br><span class="line"><span class="function">            @<span class="title">PathVariable</span><span class="params">(<span class="string">"a2"</span>)</span>Integer a2,</span></span><br><span class="line"><span class="function">            Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"result"</span>,<span class="string">"输出结果："</span> + (a1+a2));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>使用method属性指定请求类型</strong> </p><h1 id="转发-重定向"><a href="#转发-重定向" class="headerlink" title="转发 + 重定向"></a>转发 + 重定向</h1><p>配置了视图解析器，让我们无需写前后缀，就可以跳转到某个页面。</p><p>若没有配置视图解析器，那如何进行跳转？</p><p>无非就是加上前后缀</p><ul><li>转发：<code>return &quot;forward:/WEB-INF/jsp/hello.jsp&quot;;</code></li><li>重定向：<code>return &quot;redirect:/index.jsp&quot;;</code></li></ul><h1 id="获取请求参数-数据回显"><a href="#获取请求参数-数据回显" class="headerlink" title="获取请求参数 数据回显"></a>获取请求参数 数据回显</h1><h3 id="接收一个数据"><a href="#接收一个数据" class="headerlink" title="接收一个数据"></a>接收一个数据</h3><p>获取情断发送来的请求参数。当请求参数名字与方法中的形参名不一致时，接收不到消息。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207212252.png" class="lozad"></p><p>使用注解<code>@RequestParam</code>可以指明请求参数的名称。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207212818.png" class="lozad"></p><h3 id="接收一个对象"><a href="#接收一个对象" class="headerlink" title="接收一个对象"></a>接收一个对象</h3><p>url传来的参数名需要和对象的属性名一样，否则接收到的值是null。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207213142.png" class="lozad"></p><h3 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h3><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207214611.png" class="lozad"></p><p>Model – 精简版的ModelMap，推荐使用</p><p>ModelMap – 继承自LinkedHashMap类，有LinkedHashMap类的所有方法，还有自身的方法。</p><h1 id="乱码问题（过滤器）"><a href="#乱码问题（过滤器）" class="headerlink" title="乱码问题（过滤器）"></a>乱码问题（过滤器）</h1><p>在web.xml中加上乱码过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--字符编码过滤器：解决乱码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="拦截器（拦截处理器）"><a href="#拦截器（拦截处理器）" class="headerlink" title="拦截器（拦截处理器）"></a>拦截器（拦截处理器）</h1><p> SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于<strong>对处理器进行预处理和后处理</strong>。开发者可以自己定义一些拦截器来实现特定的功能。 </p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用（切面）。</p><p><strong>过滤器</strong></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul><p><strong>拦截器</strong></p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li></ul><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><p>那如何实现拦截器呢？</p><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p><p>其中的方法不需要强制实现，找有需要的方法实现即可。</p><p>（1）自定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在请求处理的方法之前执行</span></span><br><span class="line">    <span class="comment">//如果返回true执行下一个拦截器(放行)</span></span><br><span class="line">    <span class="comment">//如果返回false就不执行下一个拦截器(拦截)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------------处理前------------"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在请求处理方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------------处理后------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在dispatcherServlet处理后执行,做清理工作.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------------清理------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）注册拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/** 包括路径及其子路径--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.yang.interceptor.MyInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）编写控制器 （测试拦截器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/interceptor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"控制器中的方法执行了"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringMVC的执行流程（⭐）&quot;&gt;&lt;a href=&quot;#SpringMVC的执行流程（⭐）&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC的执行流程（⭐）&quot;&gt;&lt;/a&gt;SpringMVC的执行流程（⭐）&lt;/h1&gt;&lt;h2 id=&quot;执行流程&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA 基础合集</title>
    <link href="https://cometorbityh.github.io/2019/12/04/JAVA-%E5%9F%BA%E7%A1%80%E5%90%88%E9%9B%86/"/>
    <id>https://cometorbityh.github.io/2019/12/04/JAVA-基础合集/</id>
    <published>2019-12-04T07:13:37.000Z</published>
    <updated>2019-12-10T14:45:48.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="1：数组是一种引用类型"><a href="#1：数组是一种引用类型" class="headerlink" title="1：数组是一种引用类型"></a>1：数组是一种引用类型</h2><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191208145932.png" class="lozad"><p><img alt="image-20191208150458557" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191208150458557.png" class="lozad"></p><p>基本数据类型的变量都存储在栈中</p><blockquote><p>栈的特点是：存储空间小，存取速度较块，先进先出</p></blockquote><p>引用数据类型的变量都存取在堆中</p><blockquote><p>堆的特点是：存储空间大，存取速度较慢，后进先出</p></blockquote><p><strong>数组就是一种引用类型</strong></p><h2 id="2：数组的使用"><a href="#2：数组的使用" class="headerlink" title="2：数组的使用"></a>2：数组的使用</h2><p>1）创建数组</p><ul><li>int[] arr = new int[3];</li><li>int[] arr = new int[]{1,2,3,4}; //不指定长度，由初始化的元素个数指定。</li><li>char[] arr={‘a’,’b’,’c’};</li></ul><p>2）获取数组某一元素的值：数组名[元素下标]</p><p>3）获取数组长度：数组名.length</p><h2 id="3：数组：冒泡排序-选择排序"><a href="#3：数组：冒泡排序-选择排序" class="headerlink" title="3：数组：冒泡排序 + 选择排序"></a>3：数组：冒泡排序 + 选择排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a=&#123;<span class="number">80</span>,<span class="number">3</span>,<span class="number">77</span>,<span class="number">99</span>,<span class="number">66</span>,<span class="number">44</span>,<span class="number">33</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 冒泡排序 */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*for (int i=0;i&lt;a.length;i++)&#123;</span></span><br><span class="line"><span class="comment">            for(int j=0;j&lt;a.length-1;j++) &#123;</span></span><br><span class="line"><span class="comment">                if (a[j] &gt; a[j + 1]) &#123;</span></span><br><span class="line"><span class="comment">                    int temp;</span></span><br><span class="line"><span class="comment">                    temp = a[j];</span></span><br><span class="line"><span class="comment">                    a[j] = a[j + 1];</span></span><br><span class="line"><span class="comment">                    a[j + 1] = temp;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for (int k:a)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(k);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 选择排序 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 假设第一个元素式最小值 </span></span><br><span class="line">            <span class="keyword">int</span> min=i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;a.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="comment">// 给min重新赋值</span></span><br><span class="line">                <span class="keyword">if</span> (a[min]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    min=j+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 交换位置</span></span><br><span class="line">            <span class="keyword">if</span> (min!=i)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp;</span><br><span class="line">                temp = a[i];</span><br><span class="line">                a[i]=a[min];</span><br><span class="line">                a[min]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k:a)&#123;</span><br><span class="line">            System.out.println(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4）数组的倒置"><a href="#4）数组的倒置" class="headerlink" title="4）数组的倒置"></a>4）数组的倒置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">array01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr=&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>&#125;;</span><br><span class="line">        reverseArr(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 数组倒置</span></span><br><span class="line"><span class="comment">    *   * 找到中间值的索引 arr.length/2</span></span><br><span class="line"><span class="comment">    *   * 遍历数组的左边部分</span></span><br><span class="line"><span class="comment">    *      *对调左右两边对称的元素： a[i] &lt;==&gt; a[arr.length-1-i]</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseArr</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[arr.length-<span class="number">1</span>-i];</span><br><span class="line">            arr[arr.length-<span class="number">1</span>-i] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5）二维数组（了解）"><a href="#5）二维数组（了解）" class="headerlink" title="5）二维数组（了解）"></a>5）二维数组（了解）</h2><h1 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h1><h2 id="面向对象思想概述"><a href="#面向对象思想概述" class="headerlink" title="面向对象思想概述"></a>面向对象思想概述</h2><p>面向对象编程，OOP（Object Oriented Programming），在Java中，万物皆对象</p><blockquote><p>面向对象是以功能和属性划分的，而不是步骤。看重的是事物的功能。</p><p>编程就是模拟生活。使用面向对象的思想时，可以认为“万物皆对象”。</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191208160450.png" class="lozad"></p><h2 id="2：类与对象"><a href="#2：类与对象" class="headerlink" title="2：类与对象"></a>2：类与对象</h2><h3 id="2-1：类"><a href="#2-1：类" class="headerlink" title="2.1：类"></a>2.1：类</h3><p>定义：把某些具有相同的属性和行为的事物抽象成一个类。</p><blockquote><p>范例：</p><p>学生（类）</p><ul><li>属性：学号，姓名，年龄…</li><li>行为：学习，上课…</li></ul></blockquote><h3 id="2-2：对象"><a href="#2-2：对象" class="headerlink" title="2.2：对象"></a>2.2：对象</h3><p>类是一个概念，对象是一个具体的实例</p><blockquote><p>类：狗</p><p>对象：电线杆旁边正在占地盘的旺财</p></blockquote><h3 id="2-3：类的语法"><a href="#2-3：类的语法" class="headerlink" title="2.3：类的语法"></a>2.3：类的语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class 类名()&#123;</span><br><span class="line">属性</span><br><span class="line">方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类名的规范</p><ul><li>驼峰原则：XxxXxx</li><li>见名知意</li></ul><h3 id="2-4：创建对象-调用方法"><a href="#2-4：创建对象-调用方法" class="headerlink" title="2.4：创建对象 调用方法"></a>2.4：创建对象 调用方法</h3><p>创建对象</p><ul><li>类名 对象名 = new 类名()；</li></ul><p>调用方法</p><ul><li>对象名.方法名();</li></ul><h1 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h1><p>字符串概述</p><blockquote><p>String str= “hello”;</p></blockquote><p>字符串是类，是引用数据类型，不是基本数据类型</p><p>str是定义的一个字符串的常量，常量是不可改变的，因此字符串是不可改变的</p><h1 id="关键字集锦"><a href="#关键字集锦" class="headerlink" title="关键字集锦"></a>关键字集锦</h1><h2 id="1：static"><a href="#1：static" class="headerlink" title="1：static"></a>1：static</h2><h3 id="1-1：static在属性上"><a href="#1-1：static在属性上" class="headerlink" title="1.1：static在属性上"></a>1.1：static在属性上</h3><p>加上static的属性，称为 类属性 或 静态属性。</p><p>静态属性的特点</p><ol><li><p>静态属性处于数据共享区。静态属性可以被每一个对象共享</p></li><li><p>静态属性的产生：</p><blockquote><p>当class文件加载进入jvm时，类属性就被初始化了。因此静态属性在创建对象之前就已经存在了。</p><p>在jvm执行完毕class文件（class文件出了jvm）之后销毁。</p><p>也就是说，静态属性与class文件的生命周期保持一致</p></blockquote></li><li><p>静态属性与普通属性的区别</p><blockquote><p>静态属性在类加载时初始化，普通属性在对象创建时初始化。</p></blockquote></li><li><p>静态属性的访问：</p><blockquote><p>类名.静态属性    或    对象名.静态属性</p></blockquote></li></ol><h3 id="1-2：static在方法上"><a href="#1-2：static在方法上" class="headerlink" title="1.2：static在方法上"></a>1.2：static在方法上</h3><p>加上static的方法，称为 类方法 或 静态方法。</p><p>静态方法的特点</p><ol><li><p>静态方法处于数据共享区。静态方法可以被每一个对象共享。在jvm加载该类时，静态方法和对象方法都已经进入jvm了，但是对象方法不一定被调用了，只有先创建对象，才能调用对象方法。</p></li><li><p>静态方法的产生：</p><blockquote><p>当class文件加载进入jvm时，类方法就被初始化了。因此静态方法在创建对象之前就已经存在了。</p><p>在jvm执行完毕class文件（class文件出了jvm）之后销毁。</p><p>也就是说，静态方法与class文件的生命周期保持一致</p></blockquote></li><li><p>静态方法的访问：</p><blockquote><p>类名.静态方法()    或    对象名.静态方法()</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;h2 id=&quot;1：数组是一种引用类型&quot;&gt;&lt;a href=&quot;#1：数组是一种引用类型&quot; class=&quot;headerlink&quot; title=&quot;1：数
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring 基础</title>
    <link href="https://cometorbityh.github.io/2019/12/02/Spring-%E5%9F%BA%E7%A1%80/"/>
    <id>https://cometorbityh.github.io/2019/12/02/Spring-基础/</id>
    <published>2019-12-02T11:24:58.000Z</published>
    <updated>2019-12-04T14:17:18.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><h2 id="1-1、历史介绍"><a href="#1-1、历史介绍" class="headerlink" title="1.1、历史介绍"></a>1.1、历史介绍</h2><p>Spring</p><p>## </p><p>Spring下载地址： <a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/release/org/springframework/spring/</a> </p><p><strong>导包</strong></p><p>spring-webmvc包能导入我们需要的关于Spring的很多包，</p><p>spring-jdbc是整合Spring和Mybatis的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191202200248.png" class="lozad"></p><h2 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h2><ul><li><p>Spring是一个开源的免费的框架（容器）！</p></li><li><p>Spring是一个轻量级的、非入侵式的框架！</p><ul><li>轻量级：包很小，导入即用</li><li>非入侵式：引入Spring后不该改变原来的代码的任何情况，而且会简化代码</li></ul></li><li><p><strong>控制反转（IOC）、面向切面编程（AOP）！</strong></p></li><li><p>支持事务的处理，对框架整合的支持！（几乎能整合市面上所有的框架）</p></li></ul><h2 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191202194734.png" class="lozad"></p><p>##1.4、扩展</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191202195007.png" class="lozad"></p><ul><li><p>Spring Boot</p><ul><li>一个快速开发的脚手架</li><li>基于Spring Boot 可以快速的开发单个微服务</li><li>==约定大于配置！==</li></ul></li><li><p>Spring Cloud</p><ul><li>Spring Cloud 是基于Spring Boot 实现的</li></ul></li></ul><p>现在大多数公司都在使用Spring Boot进行快速开发</p><p>学习Spring boot 的前提，需要完全掌握Spring + SpringMVC ，起到承上启下的作用</p><h2 id="1-5、弊端"><a href="#1-5、弊端" class="headerlink" title="1.5、弊端"></a>1.5、弊端</h2><p>Spring发展到现在，已经违背了原来的理念！</p><p>配置十分繁琐，人称 “配置地狱” ！</p><h1 id="2、IOC"><a href="#2、IOC" class="headerlink" title="2、IOC"></a>2、IOC</h1><h2 id="2-1、IOC-理论推导"><a href="#2-1、IOC-理论推导" class="headerlink" title="2.1、IOC 理论推导"></a>2.1、IOC 理论推导</h2><p>IOC 是一种<strong>思想</strong>，不是代码</p><p>在我们编写业务时，需要进行以下步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserDao 接口</span><br><span class="line">UserDaoImpl 实现类</span><br><span class="line">UserService 业务接口</span><br><span class="line">UserServiceImpl 业务实现类</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191202202448.png" class="lozad"></p><p>当有多个Dao层实现类时，Service实现类每次调用就要更换其中调用的Dao层实现类对象，这样维护代码的代价很昂贵。</p><blockquote><p>解决方案：在Service实现类加入Set接口，</p></blockquote><p>Service实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用DAO层</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用set进行动态实现值得注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户实际调用的是业务层，dao层用户不需要接触！</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用set注入需要的DAO实现类的对象</span></span><br><span class="line">        ((UserServiceImpl) userService).setUserDao(<span class="keyword">new</span> UserDaoImpl());</span><br><span class="line">        <span class="comment">//((UserServiceImpl) userService).setUserDao(new UserDaoMysqlImpl());</span></span><br><span class="line">        <span class="comment">//((UserServiceImpl) userService).setUserDao(new UserDaoOracleImpl());</span></span><br><span class="line">        </span><br><span class="line">        userService.getUser();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="image-20191202204553492" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191202204553492.png" class="lozad"></p><p>之前，程序是由程序员主动创建对象，控制权在程序员手中</p><p>现在，使用了set注入，程序不再具有主动性，而是编程被动的接受对象</p><blockquote><p>之前添加Dao实现类，当用到某个Dao时，需要在Service层修改Dao的实现类对象，十分麻烦</p><p>现在只需要在Test中，set进去需要的对象，无需修改Service层就可以完成操作。</p></blockquote><p>这种思想，从本质上解决了问题，不再需要程序员去管理对象的创建了（而是用户输入）。系统的耦合性大大降低，可以更见专注于业务的实现上，这是IOC的原型！</p><h2 id="2-2、IOC的本质"><a href="#2-2、IOC的本质" class="headerlink" title="2.2、IOC的本质"></a>2.2、IOC的本质</h2><p>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法**，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。 </p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191202204752.png" class="lozad"></p><p><strong>IoC是Spring框架的核心内容</strong>，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IoC。</p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p><p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从Ioc容器中取出需要的对象。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191202205022.png" class="lozad"></p><h2 id="2-3、HelloSpring"><a href="#2-3、HelloSpring" class="headerlink" title="2.3、HelloSpring"></a>2.3、HelloSpring</h2><h3 id="注入pojo类对象"><a href="#注入pojo类对象" class="headerlink" title="注入pojo类对象"></a>注入pojo类对象</h3><p>创建pojo类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello,"</span>+ name );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中配置bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用Spring来创建对象，这些对象在Spring中统称为bean --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">bean:对象</span></span><br><span class="line"><span class="comment">        id：bean的唯一标识                 ===&gt; 变量名</span></span><br><span class="line"><span class="comment">        class：这个bean的类型（全限定类名）  ===&gt; new的对象</span></span><br><span class="line"><span class="comment">         相当于是：person1 = new Person();</span></span><br><span class="line"><span class="comment">property：属性</span></span><br><span class="line"><span class="comment"> name:属性名（对应的bean类中要有set方法，且setXXX的xxx就是name）</span></span><br><span class="line"><span class="comment"> value:注入属性值（基本数据类型）</span></span><br><span class="line"><span class="comment"> ref：引用容器中创建好的对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person1"</span> <span class="attr">class</span>=<span class="string">"com.yang.pojo.Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Spring"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在测试类中实例化容器 + 使用容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yang.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Spring的上下文对象（拿到Spring的容器）</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">// 创建bean对象（对象都在容器中管理，我们要使用，直接去里面取出来即可）</span></span><br><span class="line">        Person person1 = (Person) context.getBean(<span class="string">"person1"</span>);</span><br><span class="line">        System.out.println(person1.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=&apos;Spring&apos;&#125;</span><br></pre></td></tr></table></figure><p>思考</p><blockquote><ul><li><p>Hello 对象是谁创建的 ?</p><p>hello 对象是由Spring创建的</p></li><li><p>Hello 对象的属性是怎么设置的 ?</p><p>hello 对象的属性是由Spring容器设置的 ,</p></li></ul></blockquote><p>这个过程就叫控制反转 :</p><p>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的 .</p><p>反转 : 程序本身不创建对象 , 而变成被动的接收对象 .</p><p>依赖注入 : 就是利用<strong>set方法</strong>来进行注入的.</p><p>IOC是一种编程思想 , 由主动的编程变成被动的接收 .</p><p>可以通过newClassPathXmlApplicationContext去浏览一下底层源码 .</p><h3 id="注入Service类对象"><a href="#注入Service类对象" class="headerlink" title="注入Service类对象"></a>注入Service类对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mysqlImpl"</span> <span class="attr">class</span>=<span class="string">"com.yang.dao.UserDaoMysqlImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"oracleImpl"</span> <span class="attr">class</span>=<span class="string">"com.yang.dao.UserDaoOracleImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 要修改调用，只需修改ref即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.yang.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"mysqlImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Spring的上下文对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">// 创建bean对象（对象都在Spring中管理，我们要使用，直接去里面取出来即可）</span></span><br><span class="line">        UserServiceImpl userServiceImpl = (UserServiceImpl) context.getBean(<span class="string">"userServiceImpl"</span>);</span><br><span class="line">        <span class="comment">// 调用bean对象的方法</span></span><br><span class="line">        userServiceImpl.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>*<em>OK , 到了现在 , 我们彻底不用再程序中去改动了 , 要实现不同的操作 , 只需要在xml配置文件中进行修改 *</em></p><p><strong>所谓的IoC,一句话搞定 : 对象由Spring 来创建 , 管理 , 装配 !</strong></p><h2 id="2-4、IOC创建对象的方式"><a href="#2-4、IOC创建对象的方式" class="headerlink" title="2.4、IOC创建对象的方式"></a>2.4、IOC创建对象的方式</h2><p>1、使用无参构造方法创建对象，默认！</p><p>2、使用有参构造方法创建对象（3种方式）</p><ul><li>通过<strong>属性名</strong>给参数赋值</li><li>通过<strong>参数下标</strong>给参数赋值</li><li>通过<strong>参数类型</strong>给参数赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name = "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用Spring来创建对象，这些对象在Spring中统称为bean --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        id：bean的唯一标识                  ===&gt; 变量名</span></span><br><span class="line"><span class="comment">        class：这个bean的类型（全限定类名）  ===&gt; new的对象</span></span><br><span class="line"><span class="comment">        相当于是：bean person1 = new Person();</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用无参构造方法创建对象 --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person1"</span> <span class="attr">class</span>=<span class="string">"com.yang.pojo.Person"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用Set方法注入属性 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Spring"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 使用有参构造方法创建对象 --&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 方式1：通过下标给各参数赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user01"</span> <span class="attr">class</span>=<span class="string">"com.yang.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"赵四"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 方式2：通过参数类型给各参数赋值  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user02"</span> <span class="attr">class</span>=<span class="string">"com.yang.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"赵四"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 方式3：直接通过参数名赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user03"</span> <span class="attr">class</span>=<span class="string">"com.yang.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"赵四"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yang.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> com.yang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.yang.service.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Spring的上下文对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">// 取出对象（对象都在Spring中管理，我们要使用，直接去里面取出来即可）</span></span><br><span class="line">        User user01 = (User) context.getBean(<span class="string">"user01"</span>);</span><br><span class="line">        user01.show();  <span class="comment">// name = 赵四</span></span><br><span class="line">        User user02 = (User) context.getBean(<span class="string">"user02"</span>);</span><br><span class="line">        user02.show();  <span class="comment">// name = 赵四</span></span><br><span class="line">        User user03 = (User) context.getBean(<span class="string">"user03"</span>);</span><br><span class="line">        user03.show();  <span class="comment">// name = 赵四</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191202235038.png" class="lozad"></p><p>在获取到IOC容器对象时，Spring 就已经创建好了对象（对象已经注册了，并且只有一个实例），因此直接获取即可。</p><blockquote><p><strong>总结：在配置文件加载的时候，容器中管理的对象就已经初始化了！</strong></p></blockquote><h2 id="2-5、Spring配置"><a href="#2-5、Spring配置" class="headerlink" title="2.5、Spring配置"></a>2.5、Spring配置</h2><h2 id="2-6、DI-依赖注入"><a href="#2-6、DI-依赖注入" class="headerlink" title="2.6、DI 依赖注入"></a>2.6、DI 依赖注入</h2><p>2.6.1、依赖注入</p><ul><li>依赖：bean对象的创建依赖于容器</li><li>注入：bean对象中的所有属性，由容器来注入</li></ul><h3 id="2-6-2、构造器注入"><a href="#2-6-2、构造器注入" class="headerlink" title="2.6.2、构造器注入"></a>2.6.2、构造器注入</h3><p>见2.4</p><h3 id="2-6-3、Set方式注入"><a href="#2-6-3、Set方式注入" class="headerlink" title="2.6.3、Set方式注入"></a>2.6.3、Set方式注入</h3><p>【环境搭建】</p><p>1、复杂类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Address&#123;"</span> +</span><br><span class="line">                <span class="string">"address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; game;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWife</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(String wife)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getSubject() &#123;</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubject</span><span class="params">(String[] subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobbys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbys</span><span class="params">(List&lt;String&gt; hobbys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbys = hobbys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCard</span><span class="params">(Map&lt;String, String&gt; card)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> game;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGame</span><span class="params">(Set&lt;String&gt; game)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.game = game;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(Properties info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", wife='"</span> + wife + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address="</span> + address +</span><br><span class="line">                <span class="string">", subject="</span> + Arrays.toString(subject) +</span><br><span class="line">                <span class="string">", hobbys="</span> + hobbys +</span><br><span class="line">                <span class="string">", card="</span> + card +</span><br><span class="line">                <span class="string">", game="</span> + game +</span><br><span class="line">                <span class="string">", info="</span> + info +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.yang.demo.Address"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"隔壁屋"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.yang.demo.Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1、基本数据类型注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"老王"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 2、null注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wife"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 3、bean注入，ref --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 4、数组注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"subject"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 5、List 注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbys"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>唱<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>跳<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>RAP<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 6、Map注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"身份证"</span> <span class="attr">value</span>=<span class="string">"350322XXXXXXXX48XX"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"银行卡"</span> <span class="attr">value</span>=<span class="string">"62170018***********"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 7. Set注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"game"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DNF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 8、Properties注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"学号"</span>&gt;</span>1610****<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"姓名"</span>&gt;</span>老王<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"年龄"</span>&gt;</span>18<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yang.demo.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Spring的上下文对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Student student = (Student) context.getBean("student");</span></span><br><span class="line">        Student student = context.getBean(<span class="string">"student"</span>,Student.class);</span><br><span class="line">        System.out.println(student.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;</span><br><span class="line">    name=<span class="string">'老王'</span>, </span><br><span class="line">    wife=<span class="string">'null'</span>, </span><br><span class="line">    address=Address&#123;address=<span class="string">'隔壁屋'</span>&#125;, </span><br><span class="line">    subject=[语文, 数学, 英语], </span><br><span class="line">    hobbys=[唱, 跳, RAP, 篮球], </span><br><span class="line">    card=&#123;身份证=<span class="number">350322</span>XXXXXXXX48XX, 银行卡=<span class="number">62170018</span>***********&#125;, </span><br><span class="line">    game=[LOL, DNF, COC], </span><br><span class="line">    info=&#123;学号=<span class="number">1610</span>****, 姓名=老王, 年龄=<span class="number">18</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-3、c和p命名空间注入"><a href="#2-6-3、c和p命名空间注入" class="headerlink" title="2.6.3、c和p命名空间注入"></a>2.6.3、c和p命名空间注入</h3><p>p命名空间注入，可以直接注入属性的值（property）</p><p>c命名空间注入，通过构造器注入（construct-args）</p><blockquote><p>注意：p命名和c命名无法直接使用，需要在bean.xml中添加约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;        xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line">&gt;        xmlns:c="http://www.springframework.org/schema/c"</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//getter,setter,toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"worker01"</span> <span class="attr">class</span>=<span class="string">"com.yang.demo.Worker"</span> <span class="attr">p:name</span>=<span class="string">"老王"</span> <span class="attr">p:age</span>=<span class="string">"18"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"worker02"</span> <span class="attr">class</span>=<span class="string">"com.yang.demo.Worker"</span> <span class="attr">c:name</span>=<span class="string">"老张"</span> <span class="attr">c:age</span>=<span class="string">"28"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yang.demo.Worker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Spring的上下文对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line"></span><br><span class="line">        Worker worker01 = context.getBean(<span class="string">"worker01"</span>, Worker.class);</span><br><span class="line">        System.out.println(worker01.toString());</span><br><span class="line"></span><br><span class="line">        Worker worker02 = context.getBean(<span class="string">"worker02"</span>, Worker.class);</span><br><span class="line">        System.out.println(worker02.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Worker&#123;name=&apos;老王&apos;, age=18&#125;</span><br><span class="line">Worker&#123;name=&apos;老张&apos;, age=28&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7、bean的作用域"><a href="#2-7、bean的作用域" class="headerlink" title="2.7、bean的作用域"></a>2.7、bean的作用域</h2><p>scope属性，</p><ul><li><p>singleton（默认）：单例模式，一个Spring容器只有一个该对象</p></li><li><p>prototype：原型，一个Spring容器可以有多个该对象，每次从容器中get时，都会产生一个新对象</p></li><li><p>request、session、application：只能在web开发中使用</p></li></ul><p>使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"worker01"</span> <span class="attr">class</span>=<span class="string">"com.yang.demo.Worker"</span> <span class="attr">p:name</span>=<span class="string">"老王"</span> <span class="attr">p:age</span>=<span class="string">"18"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"worker02"</span> <span class="attr">class</span>=<span class="string">"com.yang.demo.Worker"</span> <span class="attr">c:name</span>=<span class="string">"老张"</span> <span class="attr">c:age</span>=<span class="string">"28"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yang.demo.Student;</span><br><span class="line"><span class="keyword">import</span> com.yang.demo.Worker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Spring的上下文对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line"></span><br><span class="line">        Worker w11 = context.getBean(<span class="string">"worker01"</span>, Worker.class);</span><br><span class="line">        Worker w12 = context.getBean(<span class="string">"worker01"</span>, Worker.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(w11==w12);   <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        Worker w21 = context.getBean(<span class="string">"worker02"</span>, Worker.class);</span><br><span class="line">        Worker w22 = context.getBean(<span class="string">"worker02"</span>, Worker.class);</span><br><span class="line">        System.out.println(w21==w22);   <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-8、bean的自动装配"><a href="#2-8、bean的自动装配" class="headerlink" title="2.8、bean的自动装配"></a>2.8、bean的自动装配</h2><p>自动装配是Spring满足bean依赖的一种方式</p><p>Spring会在上下文中寻找，并自动给bean装配属性</p><p>在Spring中有3种装配的方式</p><ul><li>在xml中显式的配置（之前的那些都是显式的）</li><li>在Java中显式的配置</li><li>隐式的自动装配bean</li></ul><h2 id="2-8-1、byName和byType的自动装配"><a href="#2-8-1、byName和byType的自动装配" class="headerlink" title="2.8.1、byName和byType的自动装配"></a>2.8.1、byName和byType的自动装配</h2><p>autowire属性</p><ul><li>byName ：自动在上下文中查找，和自己对象的set方法后面的值对应的bean id</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191204002459.png" class="lozad"></p><ul><li>byType自动在上下文中查找，和自己对象的的属性的类型相同的bean（id可以与set方法的不同）</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191204003047.png" class="lozad"></p><blockquote><p>byName ：需要保证所有bean id唯一，该bean id需要和自动注入·属性的set方法的后面部分一致</p><p>byType ：需要保证所有bean id唯一，该bean class需要和自动注入的属性的类型一致</p></blockquote><h3 id="2-8-2、注解实现自动配置"><a href="#2-8-2、注解实现自动配置" class="headerlink" title="2.8.2、注解实现自动配置"></a>2.8.2、注解实现自动配置</h3><h1 id="3、代理模式"><a href="#3、代理模式" class="headerlink" title="3、代理模式"></a>3、代理模式</h1><p>为什么学习代理模式？</p><blockquote><p>代理模式是AOP的底层（Spring AOP，SpringMVC）</p></blockquote><h2 id="3-1、静态代理"><a href="#3-1、静态代理" class="headerlink" title="3.1、静态代理"></a>3.1、静态代理</h2><p>角色分析</p><ul><li>抽象角色：一般使用接口或抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色。代理真实角色后，一般会做一些负数动作</li><li>客户：访问代理对象的人</li></ul><p>代码步骤</p><p>1、接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东要出租房子！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        host.rent();</span><br><span class="line">        heTong();</span><br><span class="line">        fare();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"中介带你看房!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heTong</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"中介带你签署合同!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收钱!（中介费）"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 房东要出租房子</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">//代理帮房东出租房子，但是代理一帮要有一些附属操作</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line">        <span class="comment">//客户无需面对房东，直接找中介租房即可</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">中介带你看房!</span><br><span class="line">房东要出租房子！</span><br><span class="line">中介带你签署合同!</span><br><span class="line">收钱!（中介费）</span><br></pre></td></tr></table></figure><p>代理模式的好处</p><ul><li>可以是真实角色的操作更加纯粹！无需去关注一些公共的任务</li><li>公共任务交给代理角色！实现了业务的分工</li><li>公共任务发生扩展时，方便几种管理</li><li>缺点：一个真实角色就会产生一个代理角色：代码量会翻倍，开发效率会变低</li></ul><h2 id="3-2、静态代理（加深理解）"><a href="#3-2、静态代理（加深理解）" class="headerlink" title="3.2、静态代理（加深理解）"></a>3.2、静态代理（加深理解）</h2><p>在<strong>不改变原有业务</strong>的情况下，想到要扩展业务，只需加上一个代理类，调用要扩展业务的类作为对象即可。这就是代理模式的优势</p><blockquote><p>改动公司原有的代码，是大忌！</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191203213708.png" class="lozad"></p><blockquote><p>横向开发 就是AOP</p></blockquote><p>代码步骤</p><ul><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>真实角色（实现类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加了一个用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除了一个用户！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改了一个用户！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了一个用户！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserServiceImpl userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"add"</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"delete"</span>);</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"update"</span>);</span><br><span class="line">        userService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"query"</span>);</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加入新业务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【debug】使用了"</span>+msg+<span class="string">"方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">       <span class="comment">// userService.add();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        UserServiceProxy proxy = <span class="keyword">new</span> UserServiceProxy();</span><br><span class="line">        proxy.setUserService(userService);</span><br><span class="line">        proxy.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【debug】使用了add方法</span><br><span class="line">添加了一个用户！</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-2、静态代理模式扩展性"><a href="#3-2、静态代理模式扩展性" class="headerlink" title="3.2、静态代理模式扩展性"></a>3.2、静态代理模式扩展性</h2><h2 id="3-3、动态代理"><a href="#3-3、动态代理" class="headerlink" title="3.3、动态代理"></a>3.3、动态代理</h2><h3 id="3-3-1、什么是动态代理"><a href="#3-3-1、什么是动态代理" class="headerlink" title="3.3.1、什么是动态代理"></a>3.3.1、什么是动态代理</h3><p>动态代理能解决静态代理的缺点（只能代理固定的真实角色）</p><ul><li><p>动态代理和静态代理的角色一样</p></li><li><p>动态代理的代理类是动态生成的，不是我们直接写好的</p></li></ul><h3 id="3-3-2、动态代理的分类"><a href="#3-3-2、动态代理的分类" class="headerlink" title="3.3.2、动态代理的分类"></a>3.3.2、动态代理的分类</h3><p>动态代理分为两大类：基于接口的动态代理 、基于类的动态代理</p><ul><li>基于接口  —-  JDK动态代理（我们在这里使用）</li><li>基于类  —-  cglib</li><li>java字节码实现  —-  javassist</li></ul><p>需要了解2个类：Proxy（代理）、invocationHandler（调用处理程序）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191203214545.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191203214917.png" class="lozad"></p><h3 id="3-3-3、基于接口的动态代理（⭐）"><a href="#3-3-3、基于接口的动态代理（⭐）" class="headerlink" title="3.3.3、基于接口的动态代理（⭐）"></a>3.3.3、基于接口的动态代理（⭐）</h3><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东要出租房子！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态代理的本质就是使用反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">                rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理代理实例，并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态代理的本质就是使用反射</span></span><br><span class="line">        Object result = method.invoke(rent, args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 真实角色：房东要出租房子</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代理角色</span></span><br><span class="line">        ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        <span class="comment">//设置要代理的对象</span></span><br><span class="line">        pih.setRent(host);</span><br><span class="line">        <span class="comment">// 动态生成代理类</span></span><br><span class="line">        Rent proxy = (Rent) pih.getProxy();</span><br><span class="line"></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">房东要出租房子！</span><br></pre></td></tr></table></figure><p><strong>这个动态代理类代理的是Rent接口</strong>，可以代理实现Rent接口的所有实现类</p><p>接下来我们做一个通用的动态代理类</p><ul><li><p>代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态代理的本质就是使用反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理代理实例，并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// method.getName()就是指 “动态代理对象调用的方法名”</span></span><br><span class="line">        log(method.getName());</span><br><span class="line">        <span class="comment">// 动态代理的本质就是使用反射</span></span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【debug】使用了"</span>+msg+<span class="string">"方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>客户端访问代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 真实角色：</span></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">// 代理角色：还不存在</span></span><br><span class="line">        ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        <span class="comment">//设置要代理的对象</span></span><br><span class="line">        pih.setTarget(userService);</span><br><span class="line">        <span class="comment">// 动态生成代理类</span></span><br><span class="line">        UserService proxy = (UserService) pih.getProxy();</span><br><span class="line"></span><br><span class="line">        proxy.add();</span><br><span class="line">        proxy.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【debug】使用了add方法</span><br><span class="line">添加了一个用户！</span><br><span class="line">【debug】使用了delete方法</span><br><span class="line">删除了一个用户！</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-4、动态代理的好处"><a href="#3-3-4、动态代理的好处" class="headerlink" title="3.3. 4、动态代理的好处"></a>3.3. 4、动态代理的好处</h3><ul><li>可以是真实角色的操作更加纯粹！无需去关注一些公共的任务</li><li>公共任务交给代理角色！实现了业务的分工</li><li>公共任务发生扩展时，方便几种管理</li><li><strong>一个动态代理类代理的是一个接口</strong>。一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可</li></ul><h1 id="4、AOP"><a href="#4、AOP" class="headerlink" title="4、AOP"></a>4、AOP</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191203223156.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191203223224.png" class="lozad"></p><p>添加日志在各个方法前后，但是不得改变原有逻辑</p><p><img alt="image-20191203223709691" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191203223709691.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191203223733.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191203223749.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191204154351.png" class="lozad"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加织入的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-1、方式一：Spring-API接口（主要是API接口实现）"><a href="#4-1、方式一：Spring-API接口（主要是API接口实现）" class="headerlink" title="4.1、方式一：Spring API接口（主要是API接口实现）"></a>4.1、方式一：Spring API接口（主要是API接口实现）</h2><p>接口 + 实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.yang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加了一个用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除了一个用户！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改了一个用户！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了一个用户！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 前置日志类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// method:要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">// args：参数</span></span><br><span class="line">    <span class="comment">// target：目标对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">"的"</span> +method.getName() + <span class="string">"方法被执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.yang.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 后置日志类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// returnValue：返回值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] objects, Object o1)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(method.getName() + <span class="string">"方法的执行结果："</span> + returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.yang.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"log"</span> <span class="attr">class</span>=<span class="string">"com.yang.log.Log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"afterLog"</span> <span class="attr">class</span>=<span class="string">"com.yang.log.AfterLog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式1：使用原生Spring API接口--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置AOP（需要导入aop的约束）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点：expression 表达式，execution(要执行的位置）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.yang.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--执行环绕增加--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"log"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"afterLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yang.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意：动态代理代理的式接口。不是实现类</span></span><br><span class="line">        UserService userService = context.getBean(<span class="string">"userService"</span>, UserService.class);</span><br><span class="line"></span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.yang.service.UserServiceImpl的add方法被执行了</span><br><span class="line">添加了一个用户！</span><br><span class="line">add方法的执行结果：null</span><br></pre></td></tr></table></figure><blockquote><p>关于execution表达式： <a href="https://blog.csdn.net/corbin_zhang/article/details/80576809" target="_blank" rel="noopener">https://blog.csdn.net/corbin_zhang/article/details/80576809</a> </p></blockquote><h2 id="4-2、方式二：自定义类实现AOP（主要是切面定义）"><a href="#4-2、方式二：自定义类实现AOP（主要是切面定义）" class="headerlink" title="4.2、方式二：自定义类实现AOP（主要是切面定义）"></a>4.2、方式二：自定义类实现AOP（主要是切面定义）</h2><p>自定义切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.diy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointcut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"==== 方法执行前 ===="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"==== 方法执行后 ===="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.yang.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"log"</span> <span class="attr">class</span>=<span class="string">"com.yang.log.Log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"afterLog"</span> <span class="attr">class</span>=<span class="string">"com.yang.log.AfterLog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash;方式1：使用原生Spring API接口 织入&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">    &amp;lt;!&amp;ndash; 配置AOP（需要导入aop的约束）&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">    &lt;aop:config&gt;</span></span><br><span class="line"><span class="comment">        &amp;lt;!&amp;ndash;切入点：expression 表达式，execution(要执行的位置）&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">        &lt;aop:pointcut id="pointcut" expression="execution(* com.yang.service.UserServiceImpl.*(..))"/&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &amp;lt;!&amp;ndash;执行环绕增加&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">        &lt;aop:advisor advice-ref="log" pointcut-ref="pointcut"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;/aop:config&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 方式2：使用自定义类织入 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"diy"</span> <span class="attr">class</span>=<span class="string">"com.yang.diy.DiyPointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"diy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--切入点 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"point"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.yang.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yang.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意：动态代理代理的式接口。不是实现类</span></span><br><span class="line">        UserService userService = context.getBean(<span class="string">"userService"</span>, UserService.class);</span><br><span class="line"></span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">==== 方法执行前 ====</span><br><span class="line">添加了一个用户！</span><br><span class="line">==== 方法执行后 ====</span><br></pre></td></tr></table></figure><h2 id="4-3、方式三：使用注解实现AOP"><a href="#4-3、方式三：使用注解实现AOP" class="headerlink" title="4.3、方式三：使用注解实现AOP"></a>4.3、方式三：使用注解实现AOP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.diy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用注解实现AOP</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span>     <span class="comment">//标注这个类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointCut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.yang.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---- 方法执行前 ----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* com.yang.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---- 方法执行后 ----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在环绕增强中，可以给定一个参数，代表我们要获取处理切入的点</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.yang.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">        <span class="comment">//ProceedingJoinPoint：连接点，可以获取切入点的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">round</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前"</span>);</span><br><span class="line">        Signature signature = jp.getSignature();    <span class="comment">//获得签名</span></span><br><span class="line">        System.out.println(<span class="string">"signature:"</span> +signature);</span><br><span class="line">        Object proceed = jp.proceed();  <span class="comment">//执行方法</span></span><br><span class="line">        System.out.println(proceed);</span><br><span class="line">        System.out.println(<span class="string">"环绕后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.yang.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 方式3--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"annotationPointCut"</span> <span class="attr">class</span>=<span class="string">"com.yang.diy.AnnotationPointCut"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yang.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意：动态代理代理的式接口。不是实现类</span></span><br><span class="line">        UserService userService = context.getBean(<span class="string">"userService"</span>, UserService.class);</span><br><span class="line"></span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">环绕前</span><br><span class="line">signature:void com.yang.service.UserService.add()</span><br><span class="line">---- 方法执行前 ----</span><br><span class="line">添加了一个用户！</span><br><span class="line">null</span><br><span class="line">环绕后</span><br><span class="line">---- 方法执行后 ----</span><br></pre></td></tr></table></figure><h1 id="5、Spring-整合-Mybatis"><a href="#5、Spring-整合-Mybatis" class="headerlink" title="5、Spring 整合 Mybatis"></a>5、Spring 整合 Mybatis</h1><h2 id="5-1、基本配置"><a href="#5-1、基本配置" class="headerlink" title="5.1、基本配置"></a>5.1、基本配置</h2><p>步骤</p><ol><li><p>导入相关jar包</p><ul><li>junit</li><li>mybatis</li><li>mysql数据库</li><li>spring-webmvc</li><li>spring-jdbc</li><li>aop织入</li><li>mybatis-spring</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--spring操作数据库，还需要一个spring jdbc --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!-- 整合包 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!-- maven静态资源过滤问题 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="5-2、回忆Mybatis的流程"><a href="#5-2、回忆Mybatis的流程" class="headerlink" title="5.2、回忆Mybatis的流程"></a>5.2、回忆Mybatis的流程</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191204165803.png" class="lozad"></p><h2 id="5-3、整合步骤"><a href="#5-3、整合步骤" class="headerlink" title="5.3、整合步骤"></a>5.3、整合步骤</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191204221407.png" class="lozad"></p><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DataSource：使用Spring的数据源替换Mybatis的配置 c3p0 dbcp druid</span></span><br><span class="line"><span class="comment">        这里使用Spring提供的jdbc</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sqlSessionFactory--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定mybatis的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/yang/mapper/*.xml"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sqlSessionTemplate：就是我们使用的sqlSession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用构造器注入SqlSessionFactory--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"com.yang.mapper.UserMapperImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSession"</span> <span class="attr">ref</span>=<span class="string">"sqlSession"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.yang.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 我们所有的操作。都使用sqlSession来执行</span></span><br><span class="line">    <span class="comment">// 现在使用SqlSessionTemplate</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、简介&quot;&gt;&lt;a href=&quot;#1、简介&quot; class=&quot;headerlink&quot; title=&quot;1、简介&quot;&gt;&lt;/a&gt;1、简介&lt;/h1&gt;&lt;h2 id=&quot;1-1、历史介绍&quot;&gt;&lt;a href=&quot;#1-1、历史介绍&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
      <category term="SSM框架" scheme="https://cometorbityh.github.io/categories/SSM%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring框架" scheme="https://cometorbityh.github.io/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SSM框架" scheme="https://cometorbityh.github.io/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 面向对象3大特性 总结</title>
    <link href="https://cometorbityh.github.io/2019/12/01/JAVA-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A13%E5%A4%A7%E7%89%B9%E6%80%A7-%E6%80%BB%E7%BB%93/"/>
    <id>https://cometorbityh.github.io/2019/12/01/JAVA-面向对象3大特性-总结/</id>
    <published>2019-12-01T05:43:37.000Z</published>
    <updated>2019-12-01T16:36:07.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>面向对象的三大特征：封装性，继承性，多态性</p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="什么是继承？"><a href="#什么是继承？" class="headerlink" title="什么是继承？"></a>什么是继承？</h2><blockquote><p>继承是从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为，并能<strong>扩展</strong>新的能力</p><p>继承是多态的前提，没有继承就没有多态 </p><p>继承主要解决的问题：<strong>共性抽取</strong></p></blockquote><img alt="image-20191201134947732" style="zoom:50%;" data-src="C:\Users\Administrator.RG4-44\AppData\Roaming\Typora\typora-user-images\image-20191201134947732.png" class="lozad"><h2 id="继承的3大特点"><a href="#继承的3大特点" class="headerlink" title="继承的3大特点"></a>继承的3大特点</h2><p>单继承：Java语言是单继承的，一个类的直接父类只能有一个</p><p>多级继承：Java语言可以多级继承，子类有一个父类，父类也可以有父类</p><p>多子类：一个子类只能有一个父类，但一个父类可以有多个子类</p><h2 id="继承的格式"><a href="#继承的格式" class="headerlink" title="继承的格式"></a>继承的格式</h2><p>关键字：<code>extends</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 父类名称</span>&#123;</span><br><span class="line"><span class="comment">//... ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类名称 <span class="keyword">extends</span> 父类名称</span>&#123;</span><br><span class="line"><span class="comment">//... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承中的子类"><a href="#继承中的子类" class="headerlink" title="继承中的子类"></a>继承中的子类</h2><p>在继承关系中，“子类就是一个父类”，子类可以被当成父类来看待。</p><p>例如：父类员工，子类讲师，那么“讲师就是一个员工”，二者之间关系：is-a</p><p>子类对象可以访问父类的方法，但父类对象无法访问子类的方法</p><h3 id="子类的特征"><a href="#子类的特征" class="headerlink" title="子类的特征"></a>子类的特征</h3><blockquote><ul><li>子类拥有父类*<em>非 private *</em>的属性，方法</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展</li><li>子类可以用自己的方式实现父类的方法</li><li>Java的继承是单继承，但是可以多重继承，<ul><li>单继承就是一个子类只能继承一个父类，</li><li>多重继承就是，例如A类继承B类，B类继承C类，</li><li>所以按照关系就是C类是B类的父类，B类是A类的父类，这是java继承区别于C++继承的一个特性</li></ul></li><li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系）</li></ul></blockquote><h3 id="重写（override）"><a href="#重写（override）" class="headerlink" title="重写（override）"></a>重写（override）</h3><p>重写：也称覆盖，是子类重写父类的方法，方法名和参数列表都一样，发生在继承关系中</p><blockquote><p>重写的特点：</p><ul><li><p>子类和父类的方法名和参数列表都一样</p></li><li><p>子类方法的返回值范围必须<strong>小于等于</strong>父类方法的返回值范围</p></li></ul><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201150431.png" class="lozad"><ul><li>子类方法的权限修饰符必须<strong>大于等于</strong>父类方法的权限修饰符（public &gt; protected &gt; default &gt; private）<ul><li>备注：default不是关键字，而是什么都不写，留空</li></ul></li></ul><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201150744.png" class="lozad"></blockquote><blockquote><p>重载（overload）：重载构造方法，方法名一样但参数列表不一样，发生在构造方法中</p></blockquote><h3 id="继承中构造方法的关系"><a href="#继承中构造方法的关系" class="headerlink" title="继承中构造方法的关系"></a>继承中构造方法的关系</h3><p>子类每一个构造方法的第一条语句默认都是<code>super()</code>，即子类中所有的构造方法默认都会先执行父类的<strong>无参构造</strong>方法，而且一个子类构造不能调用多个父类构造（super只能有一个，在第一句）</p><p>也可以通过super关键字，实现子类的构造调用父类的重载构造，注意非子类构造方法，无法通过super调用父类构造方法</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201152000.png" class="lozad"></p><h3 id="继承中成员变量的访问"><a href="#继承中成员变量的访问" class="headerlink" title="继承中成员变量的访问"></a>继承中成员变量的访问</h3><p>在父子类的继承关系当中，若成员变量重名，创建子类对象时，访问有2中方式</p><p>子类对象 . 成员变量 – &gt; 子类的成员变量</p><p>子类对象 . 父类的成员方法 —&gt;父类的成员方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问成员变量的原则：就近原则</span><br></pre></td></tr></table></figure><ul><li><p>访问局部变量：直接写成员变量</p></li><li><p>访问本类的成员变量：this.成员变量</p></li><li><p>访问父类的成员变量：super.成员变量</p></li></ul><h3 id="this与super"><a href="#this与super" class="headerlink" title="this与super"></a>this与super</h3><p>super关键字的三种用法（访问父类内容）</p><p>在子类的成员方法中，访问父类的成员变量</p><p>在子类的成员方法中，访问父类的成员方法</p><p>在子类的构造方法中，访问父类的构造方法</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201152855.png" class="lozad"></p><p>this关键字的三种方法（访问本类内容）</p><p>在本类的成员方法中，访问本类的成员变量</p><p>在本类的成员方法中，访问本类的另一成员方法</p><p>在本类的构造方法中，访问本类的另一构造方法（注意<code>this(...)</code>必须是构造方法的第一句，那么this与super就不能共存）</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201153539.png" class="lozad"><h1 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h1><p>抽象方法：加上abstract关键字，没有方法体（去掉大括号，直接分号结束）</p><p>抽象类：抽象方法所在的类，必须是抽象类，在class前加上abstract即可</p><p>抽象类可以有抽象方法，也可以有普通方法，可以有构造方法</p><h2 id="抽象类和抽象方法的使用"><a href="#抽象类和抽象方法的使用" class="headerlink" title="抽象类和抽象方法的使用"></a>抽象类和抽象方法的使用</h2><blockquote><p>抽象类【无法直接创建】抽象对象</p><p>必须使用子类【继承】抽象类</p><p>抽象类的子类必须【覆盖】抽象父类的【所有抽象方法】</p><p>创建子类对象进行使用</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>抽象类不能创建对象，只能创建其非抽象类子类的对象</p><p>抽象类中可以有构造方法，是供子类创建对象时，初始化父类成员使用的</p><p>抽象类中不一定包含抽象方法，但是包含抽象方法的类一定是抽象类</p><p>抽象类的子类，一定要覆盖抽象类中的所有抽象方法，否则会编译报错，除非子类也是抽象类</p></blockquote><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201155339.png" class="lozad"><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201160624.png" class="lozad"><h1 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h1><p>生活中，USB接口随处可见。电脑的，机箱的，打印机的….，他们的接口都是一样的。是每一个USB厂商都默认遵守的规范。因此我们可以说：</p><blockquote><p>接口是一种通用的规范标准</p><p>接口是多个类的公共规范</p><p>接口是一种引用数据类型，其中最重要的内容是，<strong>抽象方法</strong></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p><strong>接口</strong></p><p>接口没有静态代码块、构造方法</p><p>接口有</p><ul><li>JDK7：常量、抽象方法</li><li>JDK8：默认方法、静态方法</li><li>JDK9：私有方法</li></ul><p><strong>实现类与接口</strong></p><p>一个类只能继承一个父类，但是可以实现多个接口</p><p>如果实现类实现的多个接口中，存在重复的抽象方法（A接口和B接口都有），那么只需要重写一次即可</p><p>如果实现类实现的多个接口中，存在重复的默认方法（A接口和B接口都有），那么实现类一定要对冲突的默认方法重写</p><p>如果实现类没有重写所有接口的所有方法，那么就必须是一个抽象类</p><p>如果一个类，直接父类的方法和接口的默认方法产生冲突，优先用父类的方法</p><p><strong>类与类之间是单继承的，类与接口之间是多实现的，接口与接口之间是多继承的</strong></p></blockquote><h2 id="接口的格式"><a href="#接口的格式" class="headerlink" title="接口的格式"></a>接口的格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名称</span>&#123;</span><br><span class="line"><span class="comment">//接口内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：接口编译生成的字节码文件依然是：<code>.java--&gt; .class</code>，而不是<code>.interface</code></p></blockquote><h2 id="接口中的内容"><a href="#接口中的内容" class="headerlink" title="接口中的内容"></a>接口中的内容</h2><p>Java 7 的接口内容：常量，抽象方法</p><p>Java 8 的接口内容：常量，抽象方法，默认方法，静态方法</p><p>Java 9 的接口内容：常量，抽象方法，默认方法，静态方法，私有方法</p><h3 id="抽象方法（⭐）"><a href="#抽象方法（⭐）" class="headerlink" title="抽象方法（⭐）"></a>抽象方法（⭐）</h3><p>抽象方法格式：<code>public abstract 返回值类型 方法名（参数列表）;</code></p><blockquote><p>接口的抽象方法，修饰父必须是2个固定关键字：public abstract，可省略</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201162330.png" class="lozad"></p><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><p>接口无法直接使用，需要创建“实现类”来“实现”接口</p><p>实现类格式：<code>public class 实现类名称 implements 接口名称{ //....  }</code></p><blockquote><p>接口的实现类必须覆盖（实现）接口中所有的抽象方法，再创建实现类对象来使用</p><p>如果实现类没有覆盖所有的抽象方法，那么这个实现类必须是抽象类</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201163244.png" class="lozad"></p><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>默认方法：Java 8 开始，接口允许定义默认方法</p><p>格式：<code>public default 返回值类型 方法名称(参数列表){ 方法体 }</code></p><p>应用：解决接口升级的问题</p><blockquote><p>假设一个接口有3个抽象方法，有3个实现类，这3个实现类都重写了这3个方法。</p><p>现在有新的抽象方法加入，也就是说，这个接口现在有 4个抽象方法，因此3个实现类都必须重写这个新的抽象方法（否则会报错），这样带来的结果就是很麻烦，要一个一个去重写。</p><p>此时我们可以将这个抽象方法换成默认方法，默认方法的特点就是：<strong>实现类不用去重写</strong>，这样就避免了接口升级时，实现类不得不重写抽象方法的问题了。</p></blockquote><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201164554.png" class="lozad"><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>静态方法：Java 8 开始，接口允许定义静态方法</p><p>格式：<code>public static 返回值类型 方法名称(参数列表){ 方法体 }</code></p><blockquote><p>无法通过接口实现类对象去调用接口当中的静态方法</p><p>通过接口名称直接调用接口的静态方法</p></blockquote><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201165707.png" class="lozad"><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>私有方法：Java 9 开始，接口允许定义私有方法。</p><p>普通私有方法：解决多个默认方法之间重复代码问题</p><p>格式：<code>private 返回值类型 方法名称(参数列表){ 方法体 }</code></p><p>静态私有方法：解决多个静态方法之间重复代码问题</p><p>格式：<code>private static 返回值类型 方法名称(参数列表){ 方法体 }</code></p><blockquote><p>假设有1个接口，有2个默认方法，其中出现了代码重复，因此我们在用一个默认方法将这些重复代码提取出来。但是这样，问题来了，默认方法是可以被实现类访问到的，我们不应该把这个方法面向实现类，而是应该私有化。</p><p>Java 9 开始，接口允许定义私有方法。</p></blockquote><p>（由于我使用的JDK1.8 ，因此无法实际操作，这里只是做个演示）</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201171330.png" class="lozad"><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201171754.png" class="lozad"><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量格式：<code>public static final 数据类型 常量名称=数据值;</code></p><blockquote><p>接口的常量，修饰符必须是3个固定关键字：public static final，可省略，</p><p>注意：</p><p>接口中的常量，必须进行<strong>赋值</strong>，一旦赋值，就<strong>不可以修改</strong>了</p><p>常量名一般<strong>大写</strong>，用<strong>下划线</strong>进行分隔</p></blockquote><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201172558.png" class="lozad"><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="什么是多态？"><a href="#什么是多态？" class="headerlink" title="什么是多态？"></a>什么是多态？</h2><p> 多态指的是同一个方法调用，由于对象不同可能会有不同的行为。</p><p>  <strong>多态的要点：</strong></p><ol><li><p>多态是方法的多态，不是属性的多态(<strong>多态与属性无关</strong>)。</p></li><li><p>多态的存在要有3个必要条件：继承，方法重写，<strong>父类引用指向子类对象</strong>。</p></li><li><p>父类引用指向子类对象后，用该父类引用调用子类重写的方法</p></li></ol><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p><code>父类名称 对象名 = new 子类名称（）;</code></p><p><code>接口名称 对象名 = new 实现类名称（）;</code></p><h2 id="多态的作用"><a href="#多态的作用" class="headerlink" title="多态的作用"></a>多态的作用</h2><p> 消除类型之间的耦合关系 </p><blockquote><p>如何理解？</p><p> 没有多态，那么等号左边是啥右边就得是啥，这就叫<a href="https://www.baidu.com/s?wd=耦合&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">耦合</a>，有了多态，左边是父类（或者接口），右边是子类（或实现类），我只管调用接口里面的方法就是了，至于你实现类怎么去实现，那是你的事，你要修改一下实现，你只管去把实现类换掉，我这边一行代码都不用变，这就<a href="https://www.baidu.com/s?wd=解耦&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">解耦</a>了 </p></blockquote><h2 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h2><p>1)可替换性<br>2)可扩充性<br>3)接口性<br>4)灵活性 </p><h2 id="访问成员变量的方式"><a href="#访问成员变量的方式" class="headerlink" title="访问成员变量的方式"></a>访问成员变量的方式</h2><p>直接通过对象名称访问成员变量：多态与属性无关，父类引用无法访问子类的属性，只能访问父类的属性</p><p>间接通过成员方法访问成员变量：多态与方法有关，父类引用可以访问子类重写的方法</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201195257.png" class="lozad"><h2 id="访问子类成员方法的规则"><a href="#访问子类成员方法的规则" class="headerlink" title="访问子类成员方法的规则"></a>访问子类成员方法的规则</h2><p>使用多态方式调用方法：首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。 </p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201200725.png" class="lozad"><h2 id="对象的向上转型"><a href="#对象的向上转型" class="headerlink" title="对象的向上转型"></a>对象的向上转型</h2><p>其实就是多态写法</p><p><code>父类名称 对象名 = new 子类名称（）;</code></p><p>含义：右侧创建一个子类对象，把它当成父类来看待</p><p>例如：Animal animal = new Cat(); 创建了一只猫，把它当成动物看待</p><blockquote><p>注意：向上转型一定是安全的，从小范围转到大范围</p><p>eg：double num=100；    //正确，int —&gt; double，自动类型转换</p></blockquote><blockquote><p>弊端：对象一旦向上转型为父类，那么就无法调用子类原本<strong>特有</strong>的方法</p><p>解决方案：用对象的向下转型还原</p></blockquote><h2 id="对象的向下转型-instanceof"><a href="#对象的向下转型-instanceof" class="headerlink" title="对象的向下转型 + instanceof"></a>对象的向下转型 + instanceof</h2><p>其实是一个还原动作</p><p><code>子类名称 对象名= (子类名称)父类对象;</code></p><p>含义：将父类对象还原成为本来的子类对象</p><p>例如：</p><blockquote><p>Animal animal = new Cat();  //猫 向上转型为 动物</p><p>Cat cat = (Cat) animal; // 本来是猫，被当成动物，现在又还原成猫了</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201202828.png" class="lozad"></p><blockquote><p>如果一只猫向上转型为动物，而动物又向下转型为狗，那在运行时就会报异常ClassCastException，此时该怎么解决？</p><p>解决：使用instanceof关键字判断</p></blockquote><p><code>A instanceof B</code>:判断A是否是B类的实例</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201210745.png" class="lozad"></p><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><blockquote><p>对于类和方法，abstract和final关键字不能同时使用，因为矛盾</p></blockquote><h2 id="final修饰一个类"><a href="#final修饰一个类" class="headerlink" title="final修饰一个类"></a>final修饰一个类</h2><p>当final修饰一个类时，这个类就不能有子类（太监类、最终类）</p><p>一个类如果是最终类，那么其中的所有成员方法都无法进行覆盖重写（没有子类）</p><blockquote><p>在JDK中，被设计为 final 类的有 String、System 等 </p></blockquote><h2 id="final修饰一个方法"><a href="#final修饰一个方法" class="headerlink" title="final修饰一个方法"></a>final修饰一个方法</h2><p>当final修饰一个方法时，这个方法就是最终方法，也就是不能被覆盖重写</p><h2 id="final修饰一个局部变量"><a href="#final修饰一个局部变量" class="headerlink" title="final修饰一个局部变量"></a>final修饰一个局部变量</h2><p>当final修饰一个局部变量时，这个变量就不能更改，一次赋值终身不变</p><h2 id="final修饰一个成员变量"><a href="#final修饰一个成员变量" class="headerlink" title="final修饰一个成员变量"></a>final修饰一个成员变量</h2><p>当final修饰一个局部变量时，这个变量就不能更改</p><p>由于成员变量有默认值，所以用了final必须手动赋值</p><p> 当用final来修饰对象时，不能改变对象的引用，但是可以修改对象的属性值。 </p><h1 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h1><table><thead><tr><th></th><th>public</th><th>protected</th><th>（default）</th><th>private</th></tr></thead><tbody><tr><td>同一个类</td><td>YES</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>同一个包</td><td>YES</td><td>YES</td><td>YES</td><td>NO</td></tr><tr><td>不同包子类</td><td>YES</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>不同包非子类</td><td>YES</td><td>NO</td><td>NO</td><td>NO</td></tr></tbody></table><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="内部类的权限修饰符规则"><a href="#内部类的权限修饰符规则" class="headerlink" title="内部类的权限修饰符规则"></a>内部类的权限修饰符规则</h2><p>外部类：public / （default）</p><p>成员内部类：public / protected / （default）/private</p><p>局部内部类：什么都不能写</p><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>定义在类内部的类，就叫成员内部类</p><h3 id="定义的格式"><a href="#定义的格式" class="headerlink" title="定义的格式"></a>定义的格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称</span>&#123;</span><br><span class="line">    修饰符 <span class="class"><span class="keyword">class</span> 成员内部类名称</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 注意：内用外，随意访问，外用内，需要内部类对象</p></blockquote><h3 id="创建内部类对象"><a href="#创建内部类对象" class="headerlink" title="创建内部类对象"></a>创建内部类对象</h3><blockquote><p>间接方法：使用外部类的成员方法调用内部类</p><p>直接方法：<code>外部类名称.内部类名称 内部类对象名 = new 外部类名称().new 内部类名称</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodBody</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类的方法..."</span>);</span><br><span class="line">        <span class="comment">//创建内部类对象，调用内部类方法</span></span><br><span class="line">        <span class="keyword">new</span> Heart().beat();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 内部类访问外部类成员变量</span></span><br><span class="line">            System.out.println(<span class="string">"心脏跳动..."</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BodyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Body body = <span class="keyword">new</span> Body();</span><br><span class="line">        <span class="comment">// 方法一：间接调用</span></span><br><span class="line">        <span class="comment">// 使用外部类·成员方法调用内部类</span></span><br><span class="line">        body.methodBody();</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        <span class="comment">//方法二：直接调用</span></span><br><span class="line">        Body.Heart heart = <span class="keyword">new</span> Body().new Heart();</span><br><span class="line">        heart.beat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------- 控制台输出 -------------</span><br><span class="line">心脏跳动...<span class="keyword">null</span></span><br><span class="line">===========================</span><br><span class="line">心脏跳动...<span class="keyword">null</span></span><br></pre></td></tr></table></figure><h3 id="重名变量的调用"><a href="#重名变量的调用" class="headerlink" title="重名变量的调用"></a>重名变量的调用</h3><p>内部类调用：</p><ul><li>内部类的成员方法的局部变量：<code>局部变量名</code></li><li>内部类的成员变量：<code>this . 成员变量名</code></li><li>外部类的成员变量：<code>外部类名称. this. 外部类成员变量名</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">3</span>;</span><br><span class="line">            System.out.println(num);    <span class="comment">// 1</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.num);   <span class="comment">// 2</span></span><br><span class="line">            System.out.println(Outer.<span class="keyword">this</span>.num); <span class="comment">// 3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部内部类（匿名内部类）"><a href="#局部内部类（匿名内部类）" class="headerlink" title="局部内部类（匿名内部类）"></a>局部内部类（匿名内部类）</h2><p>定义在一个方法内部的类，叫做局部内部类</p><p>局部：当前所属方法才能用它，方法之外的都无法使用</p><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称</span>&#123;</span><br><span class="line">    修饰符 返回值类型 外部类方法名称（参数列表）&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> 局部内部类名称</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOuter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">2</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建局部内部类对象，调用其方法</span></span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.methodInner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        outer.methodOuter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##匿名内部类（⭐）</p><p>如果接口的实现类（或父类的子类）只需要用一次</p><p>这种情况下，可以省略实现类（或子类）的定义，二改为使用【匿名内部类】</p><h3 id="定义的格式-1"><a href="#定义的格式-1" class="headerlink" title="定义的格式"></a>定义的格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口名称 对象名 = <span class="keyword">new</span> 接口名称()&#123;</span><br><span class="line">    <span class="comment">// 覆盖重写接口的所有抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191202002957.png" class="lozad"></p><blockquote><p>注意：匿名内部类在【创建对象】时，只能使用一次。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h1&gt;&lt;p&gt;面向对象的三大特征：封装性，继承性，多态性&lt;/p&gt;
&lt;h1 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;hea
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mybatis 基础</title>
    <link href="https://cometorbityh.github.io/2019/11/30/Mybatis-%E5%9F%BA%E7%A1%80/"/>
    <id>https://cometorbityh.github.io/2019/11/30/Mybatis-基础/</id>
    <published>2019-11-30T06:42:09.000Z</published>
    <updated>2019-11-30T16:43:54.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130150029.png" class="lozad"></p><h1 id="第一条语句"><a href="#第一条语句" class="headerlink" title="第一条语句"></a>第一条语句</h1><p>(1) 新建数据库、Javabean类</p><p>(2) 编写全局配置文件mybatis-config.xml</p><ul><li>数据源</li><li>注册sql映射文件</li></ul><p>(3) 编写sql映射文件，配置了每一个SQL。以及sql的封装规则等</p><p>(4) 将sql映射文件注册在全局配置文件中（Mapper文件要和Java代码相互联系，因此需要配置到全局配置文件中）</p><p>(5) 编写测试类</p><ul><li>根据全局配置文件得到SqlSessionFactory</li><li>使用SqlSessionFactory得到sqlSession对象，</li><li>使用sqlSession对象来执行增删改查，一个sqlSession就是代表和数据库的一次会话，用完关闭</li><li>使用sql的唯一标识来告诉Mybatis执行那个sql，sql都是保存在sql映射文件中</li></ul><p>新建一张数据表，并添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb1_employee(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">11</span>) PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">last_name <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">gender <span class="built_in">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">email <span class="built_in">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130150718.png" class="lozad"></p><p>全局项目结构</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130161319.png" class="lozad"></p><p>新建javabean类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Employee&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", lastName='"</span> + lastName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建sql映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> namespace:名称空间</span></span><br><span class="line"><span class="comment"> id:唯一标识</span></span><br><span class="line"><span class="comment"> resultType:返回值类型</span></span><br><span class="line"><span class="comment"> #&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mybatis.EmployeeMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectEmp"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">select id,last_name lastName,email,gender from tb1_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建全局配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将写好的sql映射文件注册到全局配置文件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"EmployeeMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis.bean.Employee;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 根据全局配置文件创建一个sqlSessionFactory对象（工厂对象）</span></span><br><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory =</span><br><span class="line"> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取sqlSession实例，能直接执行已经映射的sql语句</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2个参数：</span></span><br><span class="line">           <span class="comment">//    sql的唯一标识：sql映射文件的名称空间.唯一标识</span></span><br><span class="line">            <span class="comment">//    执行sql要用的参数</span></span><br><span class="line">Employee employee = openSession.selectOne(<span class="string">"com.mybatis.EmployeeMapper.selectEmp"</span>,<span class="number">1</span>);</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">openSession.close();<span class="comment">//关闭sqlSession</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="image-20191130161102929" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191130161102929.png" class="lozad"></p><h2 id="第一条语句（改进）"><a href="#第一条语句（改进）" class="headerlink" title="第一条语句（改进）"></a>第一条语句（改进）</h2><p>但是测试类那样书写太麻烦，因此我们可以使用接口的代理对象来执行这些操作。</p><p>项目结构：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130163728.png" class="lozad"></p><p>新建接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis.bean.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改sql映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> namespace:名称空间,指定相关接口的全限定类名，接口和映射文件动态绑定</span></span><br><span class="line"><span class="comment"> id:唯一标识</span></span><br><span class="line"><span class="comment"> resultType:返回值类型</span></span><br><span class="line"><span class="comment"> #&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mybatis.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpById"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">select id,last_name lastName,email,gender from tb1_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> com.mybatis.dao.EmployeeMapper;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将创建SqlSessionFactory单独封装成一个方法，避免重复代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String resource = "mybatis-config.xml"; InputStream inputStream =</span></span><br><span class="line"><span class="comment"> * Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory</span></span><br><span class="line"><span class="comment"> * = new SqlSessionFactoryBuilder().build(inputStream);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line"><span class="comment">// 2. 获取sqlSession实例，能直接执行已经映射的sql语句</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Employee employee = openSession.selectOne(<span class="string">"com.mybatis.EmployeeMapper.selectEmp"</span>,<span class="number">1</span>);</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">openSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test01</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取SqlSessionFactory对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取sqlSession对象</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取接口的实现类对象</span></span><br><span class="line"><span class="comment">// 问:这个接口没有实现类啊？</span></span><br><span class="line"><span class="comment">// 答:mybatis会为接口自动创建一个代理对象，代理对象去执行增删改查操作</span></span><br><span class="line">EmployeeMapper mapper = openSession.getMapper(EmployeeMapper.class);</span><br><span class="line">Employee employee = mapper.getEmpById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(mapper.getClass());<span class="comment">//class com.sun.proxy.$Proxy8【代理对象】</span></span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130163606.png" class="lozad"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p><strong>接口式编程</strong></p><ul><li>原生：          Dao（接口）         ====&gt;    DaoImpl（对应的实现类）</li><li>mybatis:       Mapper（接口） ====&gt;    xxMapper.xml（对应的映射文件）</li></ul><p><strong>Mapper接口</strong></p><p>Mapper接口没有实现类，但是将接口和映射文件绑定之后，mybatis接口会为这个接口生成一个代理对象</p><p><strong>SqlSession</strong></p><p>SqlSession代表和数据库的一次会话，用完必须关闭</p><p>SqlSession和Connection一样都是非线程安全的（不要作为共享的成员变量），因此每次使用完都应该去获取新的对象。</p><p><strong>两个重要的配置文件</strong></p><ul><li>mybatis的全局配置i文件，包含数据库连接池信息，事务管理器信息，映射文件的位置信息，系统运行环境信息等等</li><li>sql映射文件，保存了每一个sql语句的映射信息。mybatis就是使用映射文件将sql抽取出来，因此是半自动的。</li></ul></blockquote><h1 id="MyBatis全局配置文件"><a href="#MyBatis全局配置文件" class="headerlink" title="MyBatis全局配置文件"></a>MyBatis全局配置文件</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130165141.png" class="lozad"></p><p>约束文件：定义了特定文件的语法规则</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130170128.png" class="lozad"></p><p><code>properties</code>标签：引入外部properties配置文件的内容</p><ul><li>resource 属性：引入类路径下的资源</li><li>url 属性：引入网络路径或磁盘路径下的资源</li></ul><p><code>environments</code>标签：配置多种环境</p><ul><li><p>default 属性：指定使用某种环境，如果配置多种环境，当用到了某一环境，修改default可以快速切换环境</p></li><li><p><code>environment</code>：配置一个具体的环境信息，必需有2个标签。id是当前环境的唯一表示</p><ul><li><p><code>transactionManager</code>标签：事务管理器</p><ul><li><p>type 属性：事务管理器类型：</p><ul><li>JDBC（JdbcTransactionFactory）|MANAGED（JdbcTransactionFactory）</li></ul></li><li><p>dataSource：数据源</p><ul><li>POOLED | UNPOOLED | JNDI</li></ul></li></ul></li></ul></li></ul><p><code>settings</code>标签：包含很多设置项</p><ul><li><p><code>setting</code>子标签：设置某一设置项</p><ul><li>name 属性：设置项名</li><li>value属性：设置项取值</li></ul><p>mapUnderscoreToCamelCase：是否开启驼峰命名规则，默认值为false</p><blockquote><p> 如数据库中为last_name,Bean中为lastName，那么会自动将 last_name 转为 lastName，这样的话，不用在 sql 语句中定义别名就可以设置对应的值了。</p></blockquote></li></ul><p><code>typeAliases</code>标签：别名处理器，可以为Java类起别名，默认别名就是类名小写</p><ul><li><p><code>typeAlias</code>子标签：为某个类起别名</p></li><li><p><code>package</code>子标签：为某个包下的所有类批量起别名</p><ul><li>在批量起别名的情况下，为了防止冲突，也可以使用@Alias注解为某个类型指定新的别名</li></ul><img style="zoom: 67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130173017.png" class="lozad"></li></ul><p><code>typeHander</code>标签：类型处理器</p><p><code>plugins</code>标签：插件</p><p><code>mappers</code>标签：将sql映射注册到全局配置中</p><ul><li>mapper标签：注册一个映射<ul><li>resource属性：引用类路径下的sql映射文件</li><li>url：引用网络路径或磁盘路径下的sql映射文件</li><li>class属性：引用（注册）接口<ul><li>有映射文件时，映射文件要与接口在同一目录下，映射文件名必须和接口同名</li><li>没有sql映射文件时，所有的sql都是利用注解写在接口上</li></ul></li></ul></li><li>package标签：批量注册映射，注意：接口和sql文件应该在一个包下（同名包也行）<ul><li>name：某个包的名字</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入外部properties配置文件的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"dbconfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 起别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为单个类起别名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;typeAlias type="com.mybatis.bean.Employee" alias="emp"/&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 批量起别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.mybatis.bean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将写好的sql映射文件注册到全局配置文件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/EmployeeMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="MyBatis映射文件"><a href="#MyBatis映射文件" class="headerlink" title="MyBatis映射文件"></a>MyBatis映射文件</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130220120.png" class="lozad"></p><h2 id="1-增删改查"><a href="#1-增删改查" class="headerlink" title="1. 增删改查"></a>1. 增删改查</h2><p>映射接口 EmployeeMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis.bean.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射文件 EmployeeMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> namespace:名称空间,指定相关接口的全限定类名，接口和映射文件动态绑定</span></span><br><span class="line"><span class="comment"> id:唯一标识</span></span><br><span class="line"><span class="comment"> resultType:返回值类型</span></span><br><span class="line"><span class="comment"> #&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mybatis.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpById"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">select * from tb1_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmp"</span>&gt;</span></span><br><span class="line">insert into tb1_employee(last_name,email,gender)</span><br><span class="line">values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmp"</span>&gt;</span></span><br><span class="line">update tb1_employee set last_name=#&#123;lastName&#125;,email=#&#123;email&#125;,gender=#&#123;gender&#125;</span><br><span class="line">where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteEmpById"</span>&gt;</span></span><br><span class="line">delete from tb1_employee where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类 MybatisTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> com.mybatis.dao.EmployeeMapper;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 将创建SqlSessionFactory单独封装成一个方法，避免重复代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test02</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取SqlSessionFactory对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取sqlSession对象(不会自动提交数据，也就无法修改数据库的数据，因此要手动提交)</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取接口的实现类对象</span></span><br><span class="line">EmployeeMapper mapper = openSession.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试添加</span></span><br><span class="line"><span class="comment">//Employee employee = new Employee(null,"jerry","jerry@qq.com","1");</span></span><br><span class="line"><span class="comment">//mapper.addEmp(employee);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试更新</span></span><br><span class="line"><span class="comment">//Employee employee = new Employee(1,"jerry","jerry@qq.com","0");</span></span><br><span class="line"><span class="comment">//mapper.updateEmp(employee);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试删除</span></span><br><span class="line">mapper.deleteEmpById(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 手动提交数据</span></span><br><span class="line">openSession.commit();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130214950.png" class="lozad"><blockquote><p>mybatis允许增删改直接定义一下类型返回值</p><ul><li>Integer、Long、Boolean、void</li></ul><p>在做增删改查操作时，我们需要手动提交数据</p><ul><li>手动提交：sqlSessionFactory.openSession();</li><li>自动提交：sqlSessionFactory.openSession(true);</li></ul></blockquote><h2 id="2-insert"><a href="#2-insert" class="headerlink" title="2. insert"></a>2. insert</h2><p>insert标签的属性</p><p><code>id</code>：唯一标识</p><p><code>parameterType</code>：参数类型，可以省略</p><p>获取自增主键的值（2个标签）</p><p><code>useGeneratedKeys=&quot;true&quot;</code>：使用自增主键获取主键值策略</p><p>mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGeneratedKeys()</p><p><code>keyProperty</code>：指定主键属性。mybatis获取到主键值后，将这个值封装给指定的主键属性</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130223452.png" class="lozad"></p><h2 id="3-参数处理"><a href="#3-参数处理" class="headerlink" title="3. 参数处理"></a>3. 参数处理</h2><h3 id="参数个数"><a href="#参数个数" class="headerlink" title="参数个数"></a>参数个数</h3><p>单个参数：mybatis不会做特殊处理，#{参数值}，即可取出参数值</p><p>多个参数：mybatis会做特殊处理，多个参数会被封装成一个map</p><ul><li>key:param1，param2，…，paramN，或者参数的索引也行（0，1，…，N）</li><li>value：传入的参数值</li><li>使用<code>#{}</code>从map中取出key对应的参数值</li></ul><p>因此，使用其他参数会报错。如果不想使用param1这种格式，只想用属性值来传值，该怎么做呢？我们可以使用命名参数来做。</p><blockquote><p>命名参数：明确指定封装参数时map的key，如<code>@Param(&quot;id&quot;)</code></p><p>在映射接口的方法的参数前，加入<code>@Param</code>注解</p><p>多个参数会被封装成一个map，此时：</p><ul><li>key：使用<code>@Param</code>注解指定的值</li><li>value：参数值</li><li>使用<code>#{指定key}</code>从map中取出key对应的参数值</li></ul></blockquote><p>使用@Param注解前：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130231653.png" class="lozad"></p><blockquote><p>运行报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Cause: org.apache.ibatis.binding.BindingException: </span><br><span class="line">&gt; Parameter <span class="string">'id'</span> not found.</span><br><span class="line">&gt; Available parameters are [arg1, arg0, param1, param2]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p>使用@Param注解后：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130232255.png" class="lozad"></p><p>POJO</p><p>但是如果参数多了，这么写也很麻烦，因此我们一般直接传入pojo（bean类）：</p><ul><li>如果多个参数刚好是我们业务逻辑的数据模型（bean的属性值），可以直接传入pojo</li><li>使用<code>#{属性值}</code>，取出传入的pojo的属性值</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130234317.png" class="lozad"></p><p>Map</p><p>如果多个参数不是业务模型中的数据，没有对应的pojo，并且不经常使用，为了方便，我们可以直接传入map（因为最后也要封装成map，干脆直接用map）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130235229.png" class="lozad"></p><p>TO</p><p>如果多个参数不是业务模型中的数据，并且经常使用，推荐来编写一个TO（Transfer Object）数据传输对象</p><blockquote><p>思考</p><p><code>public Employee getEmp(@Param(&quot;id&quot;)Integer id,String lastName);</code><br>    取值：id—&gt;#{id/param1}   lastName—&gt;#{param2}</p><p><code>public Employee getEmp(Integer id,@Param(&quot;e&quot;)Employee emp);</code><br>    取值：id—&gt;#{param1}    lastName—&gt;#{param2.lastName/e.lastName}</p><p>特别注意：若传入的参数类型是Collection（List、Set）类型或者是数组，也会特殊处理。也是把传入的list或者数组封装在map中。<br>        key：Collection用collection，如果是List既可以用collection也可以用list，数组用array</p><p><code>public Employee getEmpById(List&lt;Integer&gt; ids);</code><br>    取值：取出第一个id的值：   #{list[0]}</p></blockquote><h3 id="参数值的获取"><a href="#参数值的获取" class="headerlink" title="参数值的获取"></a>参数值的获取</h3><p>{}：可以获取map中的值或者pojo对象属性的值；</p><p>${}：可以获取map中的值或者pojo对象属性的值；</p><p>sql语句：<code>select * from tbl_employee where id=${id} and last_name=#{lastName}</code></p><p>控制台：<code>Preparing: select * from tbl_employee where id=2 and last_name=?</code><br>    区别：</p><ul><li><p>{}:是以预编译的形式，将参数设置到sql语句中；PreparedStatement；防止sql注入</p></li><li><p>${}:取出的值直接拼装在sql语句中；会有安全问题；`</p></li><li><p>大多情况下，我们去参数的值都应该去使用#{}；</p><ul><li>原生jdbc不支持占位符的地方我们就可以使用${}进行取值<br>比如分表、排序。。。；按照年份分表拆分<pre><code>select * from ${year}_salary where xxx;select * from tbl_employee order by ${f_name} ${order}</code></pre></li></ul></li></ul><blockquote><p>{ }更丰富的用法：</p><p>规定参数的一些规则：<br>javaType、 jdbcType、 mode（存储过程）、 numericScale、<br>resultMap、 typeHandler、 jdbcTypeName、 expression（未来准备支持的功能）；</p><p>jdbcType通常需要在某种特定的条件下被设置：<br>    在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理。比如Oracle（报错）；<br>    JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，oracle不能正确处理;</p><p>由于全局配置中：jdbcTypeForNull=OTHER；oracle不支持；两种办法<br>1、#{email,jdbcType=OTHER};<br>2、jdbcTypeForNull=NULL<br>    <code>&lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;NULL&quot;/&gt;</code></p></blockquote><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>如果<code>返回值</code>是<code>集合（List...）</code>，那么映射文件中对应的<code>resultType</code>要写集合中的元素类型</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201002536.png" class="lozad"></p><p>返回值是Map，key为列名，value为对应值</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201004340.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念介绍&quot;&gt;&lt;a href=&quot;#概念介绍&quot; class=&quot;headerlink&quot; title=&quot;概念介绍&quot;&gt;&lt;/a&gt;概念介绍&lt;/h1&gt;&lt;p&gt;&lt;img alt data-src=&quot;https://yanghanblog.oss-cn-hangzhou.aliyunc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JQuery 基础</title>
    <link href="https://cometorbityh.github.io/2019/11/30/JQuery-%E5%9F%BA%E7%A1%80/"/>
    <id>https://cometorbityh.github.io/2019/11/30/JQuery-基础/</id>
    <published>2019-11-30T03:19:53.000Z</published>
    <updated>2019-11-30T06:37:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识jQuery"><a href="#初识jQuery" class="headerlink" title="初识jQuery"></a>初识jQuery</h1><h2 id="什么是jQuery"><a href="#什么是jQuery" class="headerlink" title="什么是jQuery?"></a>什么是jQuery?</h2><p>jQuery是一款优秀的JavaScript库，主要用途是：</p><ul><li><p>查询（js+Query）</p></li><li><p>简化原生JS操作，使用jQuery能让我们对HTML文档遍历和操作、事件处理、东湖处理以及Ajax变得更加简单</p></li></ul><p>为什么要用jQuery？</p><ul><li><p>强大的选择器：方便快速查找DOM元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    *&#123;</span><br><span class="line">        margin:0;</span><br><span class="line">        padding:0;</span><br><span class="line">    &#125;</span><br><span class="line">    div&#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        border: 1px solid #000;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"static/jquery-1.12.4.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    window.onload = function (ev) &#123;</span><br><span class="line">    //    1.利用原生JS查找DOM元素</span><br><span class="line">        var div1 = document.getElementsByTagName("div")[0];</span><br><span class="line">        var div2 = document.getElementsByClassName("box1")[0];</span><br><span class="line">        var div3 = document.getElementById("box2");</span><br><span class="line">        console.log(div1);</span><br><span class="line">        console.log(div2);</span><br><span class="line">        console.log(div3);</span><br><span class="line">    //    2.利用原生的JS修改背景颜色</span><br><span class="line">        div1.style.backgroundColor = "red";</span><br><span class="line">        div2.style.backgroundColor = "blue";</span><br><span class="line">        div3.style.backgroundColor = "yellow";</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    //利用jQuery查找DOM元素 修改背景颜色</span><br><span class="line">    $(function()&#123;</span><br><span class="line">        var $div1 = $("div");</span><br><span class="line">        var $div2 = $(".box1");</span><br><span class="line">        var $div3 = $("#box2");</span><br><span class="line">        console.log($div1);</span><br><span class="line">        console.log($div2);</span><br><span class="line">        console.log($div3);</span><br><span class="line">        $div1.css(&#123;</span><br><span class="line">            background:"red",</span><br><span class="line">            width:"200px",</span><br><span class="line">            height:"200px"</span><br><span class="line">        &#125;);</span><br><span class="line">        $div2.css(&#123;</span><br><span class="line">            background:"blue"</span><br><span class="line">        &#125;);</span><br><span class="line">        $div3.css(&#123;</span><br><span class="line">            background:"yellow"</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>浏览器兼容</p><p>1.x：兼容ie678</p><p>2.x：不兼容ie678</p><p>3.x：不兼容ie678</p></li></ul><p>如何使用？</p><ul><li>下载jQuery库</li><li>引入jQuery库</li><li>编写jQuery代码</li></ul><h1 id="jQuery入口函数"><a href="#jQuery入口函数" class="headerlink" title="jQuery入口函数"></a>jQuery入口函数</h1><p>jQuery和js的加载模式（入口函数）</p><ul><li><p>JS和jQuery入口函数的加载模式不同</p><ul><li>原生JS会等到DOM元素加载完毕，并且图片也加载完毕才会执行</li><li>jQuery会得等到DOM元素加载完毕，但不会等到图片也加载完毕就会执行</li></ul></li><li><p>JS若编写了多个入口函数，后面编写的会覆盖前面编写的</p><p>jQuery若编写了多个入口函数，后面编写的不会覆盖前面编写的</p></li></ul><p>jQuery入口函数的四种写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"static/jquery-1.12.4.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    $(document).ready(function () &#123;</span><br><span class="line">        // 1</span><br><span class="line">    &#125;);</span><br><span class="line">    jQuery(document).ready(function () &#123;</span><br><span class="line">        // 2</span><br><span class="line">    &#125;);</span><br><span class="line">    $(function () &#123;// 推荐写法</span><br><span class="line">        // 3</span><br><span class="line">    &#125;);</span><br><span class="line">    jQuery(function () &#123;</span><br><span class="line">        // 4</span><br><span class="line">    &#125;);      </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jQuery冲突问题</p><h1 id="核心函数"><a href="#核心函数" class="headerlink" title="核心函数"></a>核心函数</h1><p><code>$();</code>：就代表jQuery的核心函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;jQuery&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        *&#123;</span></span><br><span class="line"><span class="regexp">            margin:0;</span></span><br><span class="line"><span class="regexp">            padding:0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        div&#123;</span></span><br><span class="line"><span class="regexp">            width: 100px;</span></span><br><span class="line"><span class="regexp">            height: 100px;</span></span><br><span class="line"><span class="regexp">            border: 1px solid #000;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">    &lt;script src=<span class="string">"static/jquery-1.12.4.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.接收一个函数</span></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello comet!"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.接收一个字符串</span></span><br><span class="line">            <span class="comment">// 2.1 接收一个字符串选择器</span></span><br><span class="line">            <span class="comment">// 返回一个jQuery对象，对象中保存了找到的DOM元素</span></span><br><span class="line">            <span class="keyword">var</span> $box1 = $(<span class="string">".box1"</span>);</span><br><span class="line">            <span class="keyword">var</span> $box2 = $(<span class="string">"#box2"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log($box1);</span><br><span class="line">            <span class="built_in">console</span>.log($box2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.2 接收一个代码片段</span></span><br><span class="line">            <span class="comment">// 返回一个jQuery对象，对象中保存了创建的DOM元素</span></span><br><span class="line">            <span class="keyword">var</span> $p = $(<span class="string">"&lt;p&gt;我是段落&lt;/p&gt;"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log($p);</span><br><span class="line">            $box2.append($p);   <span class="comment">//拼接在$box1上</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.接收一个DOM元素</span></span><br><span class="line">            <span class="comment">// 会被包装成一个jQuery对象返回给我们</span></span><br><span class="line">            <span class="keyword">var</span> span = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"span"</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"span"</span>,span);</span><br><span class="line">            <span class="keyword">var</span> $span = $(span);</span><br><span class="line">            <span class="built_in">console</span>.log($span);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box1"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;div id=<span class="string">"box2"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;span&gt;我是span&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="传递函数"><a href="#传递函数" class="headerlink" title="传递函数"></a>传递函数</h2><h2 id="传递选择器"><a href="#传递选择器" class="headerlink" title="传递选择器"></a>传递选择器</h2><h2 id="传递DOM对象"><a href="#传递DOM对象" class="headerlink" title="传递DOM对象"></a>传递DOM对象</h2><h2 id="传递HTML"><a href="#传递HTML" class="headerlink" title="传递HTML"></a>传递HTML</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初识jQuery&quot;&gt;&lt;a href=&quot;#初识jQuery&quot; class=&quot;headerlink&quot; title=&quot;初识jQuery&quot;&gt;&lt;/a&gt;初识jQuery&lt;/h1&gt;&lt;h2 id=&quot;什么是jQuery&quot;&gt;&lt;a href=&quot;#什么是jQuery&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS 基础</title>
    <link href="https://cometorbityh.github.io/2019/11/29/JS-%E5%9F%BA%E7%A1%80/"/>
    <id>https://cometorbityh.github.io/2019/11/29/JS-基础/</id>
    <published>2019-11-29T07:13:17.000Z</published>
    <updated>2019-11-29T15:15:30.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-数据类型"><a href="#01-数据类型" class="headerlink" title="01_数据类型"></a>01_数据类型</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>基本(值)类型<ul><li>String: 任意字符串</li><li>Number: 任意的数字</li><li>boolean: true/false</li><li>undefined: undefined</li><li>null: null</li></ul></li><li>对象(引用)类型<ul><li>Object: 任意对象（内部数据无序）</li><li>Function: 一种特别的对象(可以执行)</li><li>Array: 一种特别的对象(数值下标, 内部数据是有序的)</li></ul></li></ul><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><ul><li><p>typeof: 返回数据类型的字符串表达（引号内的是字符串）</p><ul><li><p>可以判断: undefined/ number/ string / boolean / function</p></li><li><p>不能判断: null与object  object与array</p></li><li><blockquote><p>null,array,object的typeof都是object，但是function的typeof是function</p></blockquote></li></ul></li><li><p>instanceof:</p><ul><li>判断对象的具体类型，<code>A instanceof B</code>表示A是否是B这个类型的实例</li></ul></li><li><p>===</p><ul><li>可以判断: undefined, null</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 使用typeof判断数据类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    console.log(a, a===undefined, typeof a, typeof a === <span class="string">"undefined"</span>) <span class="comment">//undefined true "undefined" true</span></span><br><span class="line">    a=<span class="number">3</span>;</span><br><span class="line">    console.log(typeof a === <span class="string">"number"</span>); <span class="comment">//true</span></span><br><span class="line">    a=<span class="string">"nihao"</span>;</span><br><span class="line">    console.log(typeof a === <span class="string">"string"</span>); <span class="comment">//true</span></span><br><span class="line">    a=<span class="keyword">true</span>;a</span><br><span class="line">    console.log(typeof a === <span class="string">"boolen"</span>); <span class="comment">//true</span></span><br><span class="line">    a=<span class="keyword">null</span>;</span><br><span class="line">    console.log(typeof a === <span class="string">"null"</span>);   <span class="comment">//false,【null 的typeof是 "object"】</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.使用instanceof判断对象的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> b1 = &#123;</span><br><span class="line">        b2: [<span class="number">1</span>, <span class="string">'abc'</span>, console.log],</span><br><span class="line">        b3: function () &#123;</span><br><span class="line">            console.log(<span class="string">'b3'</span>)</span><br><span class="line">            <span class="keyword">return</span> function () &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'xfzhang'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数和数组都是一种Object对象</span></span><br><span class="line">    console.log(b1 <span class="keyword">instanceof</span> Object, b1 <span class="keyword">instanceof</span> Array) <span class="comment">// true  false</span></span><br><span class="line">    console.log(b1.b2 <span class="keyword">instanceof</span> Array, b1.b2 <span class="keyword">instanceof</span> Object) <span class="comment">// true true</span></span><br><span class="line">    console.log(b1.b3 <span class="keyword">instanceof</span> Function, b1.b3 <span class="keyword">instanceof</span> Object) <span class="comment">// true true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.使用typeof判断对象的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    console.log(typeof b1)    <span class="comment">// 'object'</span></span><br><span class="line">    console.log(typeof b1.b2) <span class="comment">// 'object' 【数组的typeof是object】</span></span><br><span class="line">    console.log(typeof b1.b3===<span class="string">'function'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    console.log(typeof b1.b2[<span class="number">2</span>]===<span class="string">'function'</span>)   <span class="comment">// true</span></span><br><span class="line">    console.log(b1.b2[<span class="number">2</span>](<span class="number">4</span>))    <span class="comment">//4，【相当于是console.log(4)】</span></span><br><span class="line">    console.log(b1.b3()())      <span class="comment">//xfzhang</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li><p><strong>undefined与null的区别?</strong>⭐</p><ul><li>undefined代表定义了未赋值</li><li>nulll定义了并赋值了, 只是值为null</li></ul></li><li><p>什么时候给变量赋值为null呢?  / 为什么null的typeof是object？</p><ul><li><p>初始赋值, 表明将要赋值为对象（还没想好，指向谁，先赋值为null吧）</p></li><li><p>结束前, 让对象成为垃圾对象(被垃圾回收器回收)</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//起始</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="literal">null</span>  <span class="comment">// 初始赋值为null, 表明将要赋值为对象</span></span><br><span class="line">  <span class="comment">//确定对象就赋值</span></span><br><span class="line">  b = [<span class="string">'atguigu'</span>, <span class="number">12</span>]</span><br><span class="line">  <span class="comment">//最后</span></span><br><span class="line">  b = <span class="literal">null</span> <span class="comment">// 让b指向的对象成为垃圾对象(被垃圾回收器回收)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>严格区别变量类型与数据类型?</p><ul><li>数据的类型<ul><li>基本类型</li><li>对象类型</li></ul></li><li>变量的类型(变量内存值的类型)<ul><li>基本类型: 保存就是基本类型的数据</li><li>引用类型: 保存的是地址值</li></ul></li></ul></li></ol><h1 id="02-数据-变量-内存"><a href="#02-数据-变量-内存" class="headerlink" title="02_数据 变量 内存"></a>02_数据 变量 内存</h1><ol><li>什么是数据?<ul><li>存储在内存中代表特定信息的’东东’, 本质上是0101…</li><li>数据的特点: 可传递, 可运算</li><li>一切皆数据</li><li>内存中所有操作的目标: 数据<ul><li>算术运算</li><li>逻辑运算</li><li>赋值</li><li>运行函数</li></ul></li></ul></li><li>什么是内存?<ul><li>内存条通电后产生的可储存数据的空间(临时的)</li><li>内存产生和死亡: 内存条(电路版)==&gt;通电==&gt;产生内存空间==&gt;存储数据==&gt;处理数据==&gt;断电==&gt;内存空间和数据都消失</li><li>一块小内存的2个数据<ul><li>内部存储的数据</li><li>地址值</li></ul></li><li>内存分类<ul><li>栈: 全局变量/局部变量</li><li>堆: 对象</li></ul></li></ul></li><li>什么是变量?<ul><li>可变化的量, 由变量名和变量值组成</li><li>每个变量都对应的一块小内存, 变量名用来查找对应的内存, 变量值就是内存中保存的数据</li></ul></li><li>内存,数据, 变量三者之间的关系<ul><li>内存用来存储数据的空间</li><li>变量是内存的标识</li></ul></li></ol><h1 id="03-对象"><a href="#03-对象" class="headerlink" title="03_对象"></a>03_对象</h1><ol><li>什么是对象?<ul><li>多个数据的封装体</li><li>用来保存多个数据的容器</li><li>一个对象代表现实中的一个事物</li></ul></li><li>为什么要用对象?<ul><li>统一管理多个数据</li></ul></li><li>对象的组成<ul><li>属性: 属性名(字符串)和属性值(任意)组成</li><li>方法: 一种特别的属性(属性值是函数)</li></ul></li><li>如何访问对象内部数据?<ul><li>.属性名: 编码简单, 有时不能用</li><li>[‘属性名’]: 编码麻烦, 能通用</li></ul></li></ol><blockquote><p>什么时候必须使用[‘属性名’]的方式?</p><pre><code>1. 属性名包含特殊字符: - 空格2. 属性名不确定</code></pre></blockquote><h1 id="04-函数-基础"><a href="#04-函数-基础" class="headerlink" title="04_函数-基础"></a>04_函数-基础</h1><p>首先我们知道，函数是一种特殊的对象，那么他就需由对象的特点，也有自己的特点，因此函数比对象更加复杂</p><ol><li>什么是函数?<ul><li>实现特定功能的n条语句的封装体</li><li>只有函数是可以执行的, 其它类型的数据不能执行</li></ul></li><li>为什么要用函数?<ul><li>提高代码复用</li><li>便于阅读交流</li></ul></li><li>如何定义函数?<ul><li>函数声明</li><li>表达式</li></ul></li><li>如何调用(执行)函数?<ul><li>test(): 直接调用</li><li>obj.test(): 通过对象调用</li><li>new test(): new调用</li><li>test.call/apply(obj): 临时让test成为obj的方法进行调用</li></ul></li></ol><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><ol><li><p>回调函数的特点<br>1). 你定义的<br>2). 你没有调<br>3). 但最终它执行了(在某个时刻或某个条件下)</p></li><li><p>常见的回调函数?</p><ul><li><p>dom事件回调函数 ==&gt;发生事件的dom元素</p></li><li><p>定时器回调函数 ===&gt;window</p></li><li><p>ajax请求回调函数(后面讲)</p></li><li><p>生命周期回调函数(后面讲)</p></li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;测试点击事件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  document.getElementById('btn').onclick = function () &#123; // dom事件回调函数</span></span><br><span class="line"><span class="string">    alert(this.innerHTML)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      //定时器</span></span><br><span class="line"><span class="string">            // 超时定时器</span></span><br><span class="line"><span class="string">            // 循环定时器</span></span><br><span class="line"><span class="string">      setTimeout(function () &#123; // 定时器回调函数</span></span><br><span class="line"><span class="string">        alert('到点了'+this)</span></span><br><span class="line"><span class="string">      &#125;, 2000)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure><h2 id="LIFE"><a href="#LIFE" class="headerlink" title="LIFE"></a>LIFE</h2><ol><li>理解<ul><li>全称: Immediately-Invoked Function Expression，立即调用（执行）函数表达式</li></ul></li><li>作用<ul><li>隐藏实现</li><li>不会污染外部(全局)命名空间</li><li>用它来编码js模块</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//匿名函数自调用</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line">    <span class="built_in">console</span>.log(a + <span class="number">3</span>)</span><br><span class="line">  &#125;)()</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">4</span></span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line">  ;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(++a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.$ = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 向外暴露一个全局函数</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        test: test</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)()</span><br><span class="line"></span><br><span class="line">  $().test() <span class="comment">// 1. $是一个函数 2. $执行后返回的是一个对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="函数中的this"><a href="#函数中的this" class="headerlink" title="函数中的this"></a>函数中的this</h2><ol><li><p>this是什么?</p><ul><li>任何函数本质上都是通过某个对象来调用的,如果没有直接指定就是window</li><li>所有函数内部都有一个变量this</li><li>它的值是调用函数的当前对象</li></ul></li><li><p>如何确定this的值?</p><ul><li>test(): window</li><li>p.test(): p</li><li>new test(): 新创建的对象</li><li>p.call(obj): obj</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.getColor = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.setColor = <span class="function"><span class="keyword">function</span> (<span class="params">color</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person(<span class="string">"red"</span>); <span class="comment">//this是谁? window</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"yello"</span>); <span class="comment">//this是谁? p</span></span><br><span class="line"></span><br><span class="line">  p.getColor(); <span class="comment">//this是谁? p</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  p.setColor.call(obj, <span class="string">"black"</span>); <span class="comment">//this是谁? obj</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> test = p.setColor;</span><br><span class="line">  test(); <span class="comment">//this是谁? window</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun2(); <span class="comment">//this是谁? window</span></span><br><span class="line">  &#125;</span><br><span class="line">  fun1();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="05-函数-高级"><a href="#05-函数-高级" class="headerlink" title="05_函数-高级"></a>05_函数-高级</h1><h2 id="原型-原型链"><a href="#原型-原型链" class="headerlink" title="原型 原型链"></a>原型 原型链</h2><p>原型（prototype）</p><p>显示原型与隐式原型</p><p>原型链</p><p>探索instanceof</p><h2 id="执行上下文与执行上下文栈"><a href="#执行上下文与执行上下文栈" class="headerlink" title="执行上下文与执行上下文栈"></a>执行上下文与执行上下文栈</h2><h3 id="变量提升-函数提升"><a href="#变量提升-函数提升" class="headerlink" title="变量提升 函数提升"></a>变量提升 函数提升</h3><blockquote><p>变量声明提升</p><ul><li>通过var定义(声明)的变量, 在定义语句之前就可以访问到</li><li>值: undefined</li></ul><p>函数声明提升</p><ul><li><p>通过function声明的函数, 在之前就可以直接调用</p></li><li><p>值: 函数定义(对象)</p></li></ul><p>问题: 变量提升和函数提升是如何产生的?</p></blockquote><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><h4 id="全局执行上下文"><a href="#全局执行上下文" class="headerlink" title="全局执行上下文"></a>全局执行上下文</h4><h4 id="函数执行上下文"><a href="#函数执行上下文" class="headerlink" title="函数执行上下文"></a>函数执行上下文</h4><h3 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h3><p>问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;01-数据类型&quot;&gt;&lt;a href=&quot;#01-数据类型&quot; class=&quot;headerlink&quot; title=&quot;01_数据类型&quot;&gt;&lt;/a&gt;01_数据类型&lt;/h1&gt;&lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记录独自做SSM论坛系统的错误、解决方案以及心得</title>
    <link href="https://cometorbityh.github.io/2019/11/27/%E8%AE%B0%E5%BD%95%E7%8B%AC%E8%87%AA%E5%81%9ASSM%E8%AE%BA%E5%9D%9B%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%94%99%E8%AF%AF%E3%80%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%BB%A5%E5%8F%8A%E5%BF%83%E5%BE%97/"/>
    <id>https://cometorbityh.github.io/2019/11/27/记录独自做SSM论坛系统的错误、解决方案以及心得/</id>
    <published>2019-11-27T08:55:47.000Z</published>
    <updated>2019-12-08T12:30:29.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-如何在文章下加入评论"><a href="#1-如何在文章下加入评论" class="headerlink" title="1. 如何在文章下加入评论"></a>1. 如何在文章下加入评论</h2><p>由于自己用的分页插件pageHelper只支持List，因此想用map插入实在很难解决（可能是我不懂哈哈），</p><p>之前试过4表查询，结果只能得到有评论的文章。</p><p>因此在纠结了2天之后，我终于找到方法，就是查到所有评论，在控制层中按照文章的序号加入对应的评论，这样我就可以把对应的评论加入到对应文章的List中，从而解决了使用插件的难题。很开心，这样在之后插入也可以一个模块一个模块加入到文章bean中。</p><h2 id="2-添加文章时出现400错误代码"><a href="#2-添加文章时出现400错误代码" class="headerlink" title="2. 添加文章时出现400错误代码"></a>2. 添加文章时出现400错误代码</h2><p>在点击提交添加的按钮那边，一直出现400，很着急，按照百度的说法，有很多原因，有写是因为Date类型格式无法识别的，有说是int与Integer未转换，我一一试了一遍。都不行。最后在谷歌浏览器的控制台发现：我遍历出来的文章类型是类型名，但是我数据库中文章有关类型的字段是类型ID，看到这里我真的感觉很尴尬，我仿佛已经看到我要重构项目的时候了，郁闷。为什么当初要用Mybatis逆向工程，啊啊啊啊！！！不过好在解决了这个问题，这样发帖子功能也实现了，虽然没实现添加图片的功能，不过这个功能先放一放，后面再写。</p><h2 id="3-添加文章时，类型错误"><a href="#3-添加文章时，类型错误" class="headerlink" title="3. 添加文章时，类型错误"></a>3. 添加文章时，类型错误</h2><p>在添加带图片的文章时，由于图片是file类型的，因此后台一直获取不到这个数据。找了很多方法，最后在Controller方法的参数前加上@requestParam注解得以解决。</p><h2 id="4-收藏文章的思路"><a href="#4-收藏文章的思路" class="headerlink" title="4. 收藏文章的思路"></a>4. 收藏文章的思路</h2><p>需求：点击收藏按钮时变红（收藏），再次点击收藏时变灰（取消收藏），并且显示当前收藏数</p><p>思路：</p><ul><li><p>先去数据库查出该文章被收藏的条目，在控制层中将其加入到各文章的LIst中，这样该文章的收藏数就是这些收藏条目的长度了。</p></li><li><p>在前端页面中，使用ajax遍历文章</p><ul><li>用户未登录，且当前文章不是是当前登录用户的，收藏按钮显示为“请登录”</li><li>用户已登录，且当前文章不是是当前登录用户的（ 当前登录的用户ID和文章ID ）<ol><li>未收藏（当前登录用户ID和文章ID  不等于  传到页面的Articles的该Article的Collection中的每条数据）<ol><li>点击时收藏（调用收藏操作，执行添加收藏方法，并使收藏按钮变红）</li></ol></li><li>已收藏（当前登录用户ID和文章ID      等于  传到页面的Articles的该Article的Collection中的某条数据）<ol><li>点击时取消收藏（调用取消收藏操作，执行取消收藏方法，并使收藏按钮变灰）</li></ol></li></ol></li></ul></li></ul><h2 id="5-重大消息"><a href="#5-重大消息" class="headerlink" title="5.重大消息"></a>5.重大消息</h2><p>今天发现之前跟着视频用分页做的逻辑居然如此好用，里面有个to_page()方法，它用了Ajax刷新了整个页面，但我居然不知道去使用，知道今天才发现，害我写了N多的重复代码，真的想哭。不过好在及时发现了这个神器，嘻嘻，再也不用重复写相同的逻辑了。这样的话之前的代码就需要重构了，不过没事，能简化代码我很开心呢。嗷嗷嗷嗷嗷嗷！<img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191107165712.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191107165520.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-如何在文章下加入评论&quot;&gt;&lt;a href=&quot;#1-如何在文章下加入评论&quot; class=&quot;headerlink&quot; title=&quot;1. 如何在文章下加入评论&quot;&gt;&lt;/a&gt;1. 如何在文章下加入评论&lt;/h2&gt;&lt;p&gt;由于自己用的分页插件pageHelper只支持List，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA 多线程：1</title>
    <link href="https://cometorbityh.github.io/2019/11/26/JAVA-%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A1/"/>
    <id>https://cometorbityh.github.io/2019/11/26/JAVA-多线程：1/</id>
    <published>2019-11-26T12:21:27.000Z</published>
    <updated>2019-12-04T15:29:32.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="线程的创建-启动"><a href="#线程的创建-启动" class="headerlink" title="线程的创建 + 启动"></a>线程的创建 + 启动</h2><p>方式1：继承 java.lang.Thread 类，并覆盖run( ) 方法<br>方式2：实现 java.lang.Runnble 接口，并实现run( )方法<br>方式3：实现 Callable 接口，并实现call( )方法</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126211351.png" class="lozad"></p><blockquote><p> tips：<strong>我们常写的main方法也是一个线程</strong>，称为”<strong>主线程</strong>“</p></blockquote><p><strong>线程启动的步骤：</strong></p><ul><li>创建线程类，重写 run( ) 方法</li><li>创建线程对象</li><li>启动该线程，start( ) 方法（注意不是执行 run 方法）</li></ul><h3 id="方式一-继承Thread类"><a href="#方式一-继承Thread类" class="headerlink" title="方式一  继承Thread类"></a>方式一  继承Thread类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法体，run()中写的是线程执行的代码，线程要完成的任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//由于继承了Thread类，可以直接用this调用线程的方法</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"当前线程名："</span>+<span class="keyword">this</span>.getName()+<span class="string">",线程优先级："</span>+<span class="keyword">this</span>.getPriority());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        ThreadDemo thread = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// main线程</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"当前线程名："</span>+Thread.currentThread().getName()+<span class="string">"，线程优先级："</span>+Thread.currentThread().getPriority());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设定主线程优先级</span></span><br><span class="line">        <span class="comment">//Thread.currentThread().setPriority(Thread.MAX_PRIORITY);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------------------</span><br><span class="line">当前线程名：main，线程优先级：<span class="number">5</span></span><br><span class="line">当前线程名：main，线程优先级：<span class="number">5</span></span><br><span class="line">当前线程名：main，线程优先级：<span class="number">5</span></span><br><span class="line">当前线程名：Thread-<span class="number">0</span>,线程优先级：<span class="number">5</span></span><br><span class="line">当前线程名：Thread-<span class="number">0</span>,线程优先级：<span class="number">5</span></span><br><span class="line">当前线程名：Thread-<span class="number">0</span>,线程优先级：<span class="number">5</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="Thread常用的方法"><a href="#Thread常用的方法" class="headerlink" title="Thread常用的方法"></a>Thread常用的方法</h4><blockquote><p>run() —— 线程体</p><p>start( ) —— 启动线程</p><p>currentThread( ) —— 获取当前线程</p><p>** getName() —— 获取线程名称</p><p>** setName() —— 设置线程名称</p><p>** getPriority() —— 获取线程优先级</p><p>** setPriority() —— 设置线程优先级</p><p>优先级级别越低，代表执行的几率越小，但不是没有</p></blockquote><h3 id="方式二-实现Runnable接口"><a href="#方式二-实现Runnable接口" class="headerlink" title="方式二  实现Runnable接口"></a>方式二  实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法体，run()中写的是线程执行的代码，线程要完成的任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//由于继承了Thread类，可以直接用this调用线程的方法</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"当前线程名："</span>+Thread.currentThread().getName()+<span class="string">",线程优先级："</span>+Thread.currentThread().getPriority());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        Runnable r = <span class="keyword">new</span> RunnableDemo();<span class="comment">//这并不是个线程对象</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(r);<span class="comment">//这才是线程对象</span></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// main线程</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"当前线程名："</span>+Thread.currentThread().getName()+<span class="string">"，线程优先级："</span>+Thread.currentThread().getPriority());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2种定义线程类的方法的对比</strong></p><table><thead><tr><th></th><th>Thread类</th><th>Runnable接口</th></tr></thead><tbody><tr><td>1</td><td>编程相对简单</td><td>编程相对复杂</td></tr><tr><td>2</td><td>Thread是个类，因此线程类无法继承其他类</td><td>Runnable是个接口，因此线程类还可以继承其他类</td></tr><tr><td>3</td><td>多个线程共享同一个资源</td><td><strong>更方便</strong>多个线程共享同一个资源</td></tr></tbody></table><p>上述3的举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        Runnable r = <span class="keyword">new</span> RunnableDemo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多个Thread对象共用同一个RunnableDemo</span></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread thread3 = <span class="keyword">new</span> Thread(r);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// main线程</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"当前线程名："</span>+Thread.currentThread().getName()+<span class="string">"，线程优先级："</span>+Thread.currentThread().getPriority());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，假如在线程类中售卖200张票。如果启动了3个对象，就相当于是3个窗口交替的在给你卖票，这样效率就特别快了。</p><h3 id="匿名内部类在线程中的使用"><a href="#匿名内部类在线程中的使用" class="headerlink" title="匿名内部类在线程中的使用"></a>匿名内部类在线程中的使用</h3><p>如果某个Runnable接口的实现类只使用一次，使用匿名内部类即可</p><p>多个Thread对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"当前线程名："</span>+Thread.currentThread().getName()+<span class="string">",线程优先级："</span>+Thread.currentThread().getPriority());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多个Thread对象共用同一个Runnable对象</span></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread thread3 = <span class="keyword">new</span> Thread(r);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// main线程</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"当前线程名："</span>+Thread.currentThread().getName()+<span class="string">"，线程优先级："</span>+Thread.currentThread().getPriority());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单个Thread对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"当前线程名："</span>+Thread.currentThread().getName()+<span class="string">",线程优先级："</span>+Thread.currentThread().getPriority());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// main线程</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"当前线程名："</span>+Thread.currentThread().getName()+<span class="string">"，线程优先级："</span>+Thread.currentThread().getPriority());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提取线程"><a href="#提取线程" class="headerlink" title="提取线程"></a>提取线程</h3><p>如果多定义几个线程类，但仅仅只是其中的名字不一样时，这是我们可以考虑用bean来封装一个通用类，这个类继承自Thread类，重写run（）方法，并且可以传入线程名和其他数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String RunnerName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RunnerThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RunnerThread</span><span class="params">(String runnerName)</span> </span>&#123;    <span class="comment">//指定运动员名字</span></span><br><span class="line">        RunnerName = runnerName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RunnerThread</span><span class="params">(String name, String runnerName)</span> </span>&#123;   <span class="comment">//指定运动员名字 和 线程名字</span></span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        RunnerName = runnerName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRunnerName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RunnerName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRunnerName</span><span class="params">(String runnerName)</span> </span>&#123;</span><br><span class="line">        RunnerName = runnerName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.RunnerName + <span class="string">"领先！TA的线程（赛道）是"</span>+<span class="keyword">this</span>.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RunnerThread t1 = <span class="keyword">new</span> RunnerThread();</span><br><span class="line">        t1.setRunnerName(<span class="string">"刘翔"</span>);</span><br><span class="line">        t1.setName(<span class="string">"刘翔线程"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> RunnerThread(<span class="string">"可达鸭"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t3 = <span class="keyword">new</span> RunnerThread(<span class="string">"姚明线程"</span>,<span class="string">"姚明"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------</span><br><span class="line">刘翔领先！TA的线程（赛道）是刘翔线程</span><br><span class="line">刘翔领先！TA的线程（赛道）是刘翔线程</span><br><span class="line">刘翔领先！TA的线程（赛道）是刘翔线程</span><br><span class="line">刘翔领先！TA的线程（赛道）是刘翔线程</span><br><span class="line">可达鸭领先！TA的线程（赛道）是Thread-<span class="number">1</span></span><br><span class="line">可达鸭领先！TA的线程（赛道）是Thread-<span class="number">1</span></span><br><span class="line">姚明领先！TA的线程（赛道）是姚明线程</span><br></pre></td></tr></table></figure><h3 id="方式三-实现Callable接口"><a href="#方式三-实现Callable接口" class="headerlink" title="方式三  实现Callable接口"></a>方式三  实现Callable接口</h3><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>CPU只有一个，必须抢占，若抢占不到，就要排队</p><p>就绪状态也称可运行状态，可以运行但是还【<strong>没得到资格</strong>】运行</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191127002034.jpg" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191127002302.png" class="lozad"></p><h2 id="线程控制的几个方法"><a href="#线程控制的几个方法" class="headerlink" title="线程控制的几个方法"></a>线程控制的几个方法</h2><h3 id="setName-setPriority"><a href="#setName-setPriority" class="headerlink" title="setName( ),    setPriority( )"></a>setName( ),    setPriority( )</h3><blockquote><p>可以在线程类中设定，也可以在start()之前设定</p></blockquote><blockquote><p>Java提供了一个<strong>线程调度器</strong>，来监控程序中启动后并进入就绪状态的所有线程，线程调度器会按照线程的优先级决定应调度哪个线程来执行。</p></blockquote><p>线程优先级用数字表示，范围在[0,10]</p><p>注意：优先级低只是意味着<strong>获得调度的概率低</strong>，并不是绝对先调用优先级高后调用优先级低的线程</p><h3 id="join-：插队"><a href="#join-：插队" class="headerlink" title="join( )：插队"></a>join( )：插队</h3><blockquote><p>作用：阻塞当前正在运行的线程，插入本线程，等本线程执行完毕后，再执行被阻塞的线程</p><p>简而言之：某个线程被本少爷<strong>中断了（插队了）</strong></p></blockquote><p><strong>注意：join() 必须写在 start() 之后</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">6</span>)&#123;</span><br><span class="line">            System.out.println(i+<span class="string">"  从线程："</span>+Thread.currentThread().getName()+<span class="string">"---"</span>+Thread.currentThread().getPriority());</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">4</span>)&#123;</span><br><span class="line">                <span class="comment">//另一个线程对象</span></span><br><span class="line">                Thread t1 = <span class="keyword">new</span> RunnableDemo();</span><br><span class="line">                t1.setName();</span><br><span class="line">                t1.start();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    t1.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i+<span class="string">"  主线程："</span>+ Thread.currentThread().getName() +<span class="string">"---"</span> +Thread.currentThread().getPriority());</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line"><span class="number">0</span>  主线程：main---<span class="number">5</span></span><br><span class="line"><span class="number">1</span>  主线程：main---<span class="number">5</span></span><br><span class="line"><span class="number">2</span>  主线程：main---<span class="number">5</span></span><br><span class="line"><span class="number">3</span>  主线程：main---<span class="number">5</span></span><br><span class="line"><span class="number">0</span>  从线程：我是被阻塞的线程---<span class="number">5</span></span><br><span class="line"><span class="number">1</span>  从线程：我是被阻塞的线程---<span class="number">5</span></span><br><span class="line"><span class="number">2</span>  从线程：我是被阻塞的线程---<span class="number">5</span></span><br><span class="line"><span class="number">3</span>  从线程：我是被阻塞的线程---<span class="number">5</span></span><br><span class="line"><span class="number">4</span>  从线程：我是被阻塞的线程---<span class="number">5</span></span><br><span class="line"><span class="number">5</span>  从线程：我是被阻塞的线程---<span class="number">5</span></span><br><span class="line"><span class="number">4</span>  主线程：main---<span class="number">5</span></span><br><span class="line"><span class="number">5</span>  主线程：main---<span class="number">5</span></span><br><span class="line"><span class="number">6</span>  主线程：main---<span class="number">5</span></span><br><span class="line"><span class="number">7</span>  主线程：main---<span class="number">5</span></span><br><span class="line"><span class="number">8</span>  主线程：main---<span class="number">5</span></span><br><span class="line"><span class="number">9</span>  主线程：main---<span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><blockquote><p>作用：阻塞当前线程，让当前线程进入阻塞状态（让出CPU执行权），时间一到，线程会进入就绪状态（并不是运行状态）</p><p>在被阻塞的时间内，就算CPU处于空闲，被sleep的线程也不会提前结束阻塞状态，也无法获取到CPU的执行权</p></blockquote><blockquote><p>应用</p><p>在多线程环境下，模拟线程的切换，让某些安全的问题得以充分的暴露</p></blockquote><p>从线程每执行一次，就会sleep1毫秒，在这1毫秒内，主线程获取到主线程的执行权，在1毫秒内执行了很多次，等到1毫秒后，CPU的执行权又要受到争夺。也就是说，就算被阻塞的线程sleep之后，也不一定会立即得到CPU执行权，也是要重新抢占CPU的执行权。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"从线程："</span>+Thread.currentThread().getName()+<span class="string">"---"</span>+Thread.currentThread().getPriority());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//另一个线程对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> RunnableDemo();</span><br><span class="line">        t1.setName(<span class="string">"我是sleep的线程"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"主线程："</span>+ Thread.currentThread().getName() +<span class="string">"---"</span> +Thread.currentThread().getPriority());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------</span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是sleep的线程---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="yield-：礼让"><a href="#yield-：礼让" class="headerlink" title="yield()：礼让"></a>yield()：礼让</h3><p>field，原义屈服，投降，在此处翻译为“礼让”，礼让CPU。</p><p>使当前线程释放CPU，进入就绪状态，重新排队，抢占CPU执行权。</p><p>作用：让同优先级或更高级别的线程得到执行的机会。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">            System.out.println(<span class="string">"从线程："</span>+Thread.currentThread().getName()+<span class="string">"---"</span>+Thread.currentThread().getPriority());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//另一个线程对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> RunnableDemo();</span><br><span class="line">        t1.setName(<span class="string">"我是sleep的线程"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">            System.out.println(<span class="string">"主线程："</span>+ Thread.currentThread().getName() +<span class="string">"---"</span> +Thread.currentThread().getPriority());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------</span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是sleep的线程---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是sleep的线程---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是sleep的线程---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="setDaemon-true-：后台线程-寄生线程"><a href="#setDaemon-true-：后台线程-寄生线程" class="headerlink" title="setDaemon(true)：后台线程/寄生线程"></a>setDaemon(true)：后台线程/寄生线程</h3><p>从线程是在main方法中定义的，实际上当主线程执行完毕后，从线程还在执行，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">----</span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br></pre></td></tr></table></figure><p>那么现在有一个需求，就是当主线程执行完毕后，从线程也不再执行（就好比寄生物一般，主体死亡，寄生物也跟着消失）</p><p>此时就要要到 Thread类的 setDaemon(true) 方法了</p><blockquote><p>setDaemon(true)</p><p>作用：使当前线程变成后台线程（寄生线程），启动后台线程的线程结束时，后台线程也随之结束</p><p>注意：该方法也应该定义在start()方法之前，即只能在线程启动之前将其设定为后台线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"从线程："</span>+Thread.currentThread().getName()+<span class="string">"---"</span>+Thread.currentThread().getPriority());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//另一个线程对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> RunnableDemo();</span><br><span class="line">        t1.setName(<span class="string">"我是从线程"</span>);</span><br><span class="line">        t1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">6</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"主线程："</span>+ Thread.currentThread().getName() +<span class="string">"---"</span> +Thread.currentThread().getPriority());</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------</span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br></pre></td></tr></table></figure><p>可以看到结果，主线程执行完后，从线程也会渐渐的停止执行（多出的几次是误差，可忽略不计）</p><h3 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt()"></a>interrupt()</h3><p>中断线程（软中断）：不直接中断线程，而是需要被中断线程自己处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 线程未被中断时，执行</span></span><br><span class="line">        <span class="keyword">while</span>(!<span class="keyword">this</span>.isInterrupted())&#123;</span><br><span class="line">            System.out.println(<span class="string">"从线程："</span>+Thread.currentThread().getName()+<span class="string">"---"</span>+Thread.currentThread().getPriority());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//另一个线程对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> RunnableDemo();</span><br><span class="line">        t1.setName(<span class="string">"我是从线程"</span>);</span><br><span class="line">        t1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">6</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"主线程："</span>+ Thread.currentThread().getName() +<span class="string">"---"</span> +Thread.currentThread().getPriority());</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当主线程执行完毕时， 中断从线程</span></span><br><span class="line">        t1.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------------</span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br><span class="line">主线程：main---<span class="number">5</span><span class="comment">//此时主线程执行完毕，中断从线程</span></span><br><span class="line">从线程：我是从线程---<span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="stop-（不推荐使用）"><a href="#stop-（不推荐使用）" class="headerlink" title="stop()*（不推荐使用）"></a>stop()*（不推荐使用）</h3><p>中断线程（硬中断）：直接结束线程</p><h2 id="Java-多线程锁释放-⭐"><a href="#Java-多线程锁释放-⭐" class="headerlink" title="Java 多线程锁释放 (⭐)"></a>Java 多线程锁释放 (⭐)</h2><blockquote><p><strong>问：Java多线程运行环境中，在哪些情况下会使对象锁释放？</strong></p><p>答：由于等待一个锁的线程只有在获得这把锁之后，才能恢复运行，所以让持有锁的线程在不再需要锁的时候及时释放锁是很重要的。</p><p>在以下情况下，持有锁的线程会释放锁：<br>（1）执行完同步代码块，就会释放锁。（synchronized）<br>（2）在执行同步代码块的过程中，遇到异常而导致线程终止，锁也会被释放。（exception）<br>（3）在执行同步代码块的过程中，执行了锁所属对象的wait()方法，这个线程会释放锁，进入对象的等待池。(wait)</p><p>除了以上情况以外，只要持有锁的线程还没有执行完同步代码块，就不会释放锁。<br>在下面情况下，线程是不会释放锁的：<br>（1）执行同步代码块的过程中，执行了Thread.sleep()方法，当前线程放弃CPU，开始睡眠，在睡眠中不会释放锁。<br>（2）在执行同步代码块的过程中，执行了Thread.yield()方法，当前线程放弃CPU，但不会释放锁。<br>（3）在执行同步代码块的过程中，其他线程执行了当前线程对象的suspend()方法，当前线程被暂停，但不会释放锁。 </p></blockquote><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>当多个线程访问通过一个数据时，容易出现线程安全问题，需要让线程同步，保证数据安全</p><p>线程同步：当2个及2个以上的线程同时访问同一个资源时，需要某种方式来确保资源在<strong>某一个时刻只被一个线程使用</strong></p><p><strong>线程同步的实现方案</strong></p><ul><li><p>同步代码块</p><p><code>synchronized(obj){}</code></p></li><li><p>同步方法</p><p><code>private synchronized void XXX(){}</code></p></li></ul><p><strong>案例引导</strong></p><blockquote><p>需求：多用户同时操作统一账户取款，保证账户金额不出现错误</p><p>分析：</p><ul><li><p>多个用户对同一个账户取款，因此开发一个账户类</p></li><li><p>多用户取款操作流程一样，因此开发一个取款线程类</p></li><li><p>每个用户对应一个线程对象，因为是多个用户对同一个账户取款，有共享资源（账户），因而使用Runnable接口实现。</p></li></ul><p>思路：创建银行账户类Account，创建取款线程AccountRunnable，创建测试类TestAccount，让2个用户同时取款</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="comment">//余额</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取款操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withDraw</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance -money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Account account = <span class="keyword">new</span> Account();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取款操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//核心操作</span></span><br><span class="line">        <span class="keyword">if</span>(account.getBalance()&gt;=<span class="number">400</span>)&#123;</span><br><span class="line">            account.withDraw(<span class="number">400</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"取款成功，当前余额："</span></span><br><span class="line">                    +account.getBalance());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() +<span class="string">"余额不足,取款失败！当前余额："</span></span><br><span class="line">                    +account.getBalance());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建2个线程</span></span><br><span class="line">        Runnable a = <span class="keyword">new</span> AccountRunnable(); <span class="comment">//账户线程</span></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(a);</span><br><span class="line">        thread1.setName(<span class="string">"张三"</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(a);</span><br><span class="line">        thread2.setName(<span class="string">"张三妻子"</span>);</span><br><span class="line">        <span class="comment">//启动2个线程</span></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------</span><br><span class="line">张三取款成功，当前余额：<span class="number">200</span><span class="comment">//情况1</span></span><br><span class="line">张三妻子余额不足,取款失败！当前余额：<span class="number">200</span></span><br><span class="line">    </span><br><span class="line">张三妻子余额不足,取款失败！当前余额：<span class="number">200</span><span class="comment">//情况2</span></span><br><span class="line">张三取款成功，当前余额：<span class="number">200</span></span><br></pre></td></tr></table></figure><p>乍一看好像有点问题，取款成功和失败的顺序有点不大对，那我们使用sleep来放大一下安全问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Account account = <span class="keyword">new</span> Account();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取款操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//核心操作</span></span><br><span class="line">        <span class="keyword">if</span>(account.getBalance()&gt;=<span class="number">400</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            account.withDraw(<span class="number">400</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"取款成功，当前余额："</span></span><br><span class="line">                    +account.getBalance());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() +<span class="string">"余额不足,取款失败！当前余额："</span></span><br><span class="line">                    +account.getBalance());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------</span><br><span class="line">张三妻子取款成功，当前余额：-<span class="number">200</span><span class="comment">//情况1</span></span><br><span class="line">张三取款成功，当前余额：-<span class="number">200</span></span><br><span class="line"></span><br><span class="line">张三妻子取款成功，当前余额：<span class="number">200</span><span class="comment">//情况2</span></span><br><span class="line">张三取款成功，当前余额：<span class="number">200</span></span><br></pre></td></tr></table></figure><p>居然都有负数！！！那么发生上述的问题该如何解决？</p><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><p><code>synchronized（同步监视器）{同步代码块：可能出现安全隐患的代码}</code></p><blockquote><p>同步监视器（锁）的要求：</p><ul><li>必须是引用数据类型，不能是基本数据类型</li><li>在同步代码快中不能可以改变同步监视器的属性值，不能改变其引用（也就是说引用对象的属性值可以修改，但是不能将该引用指向其他对象）<ul><li>若自己无法保证修改，可以给同步监视器加上<strong>final</strong>关键字，这样即使在同步代码块中也会编译报错来提示。</li></ul></li><li>尽量不用String和Integer做同步监视器，若用了，要保证代码块中不对其操作<ul><li>String a=”hello”做同步监视器时，代码块中String a=”nihao”，相当于是改变了其引用，涉及到了常量池的引用</li><li>Integer a=1做同步监视器时，代码块中Integer a = 11,而常量池中有[-128，127]的引用，实际上是指向了常量池中2对应的引用</li></ul></li><li>一般使用共享资源做同步监视器就行了</li><li>也可以专门创建一个  没有任何业务含义的同步监视器</li><li><strong>建议使用final修饰同步监视器</strong></li></ul><p>总结下：同步监视器（3点）：<font color="red">必须是引用类型，可修改属性值不可修改引用，建议使用final修饰</font></p></blockquote><h3 id="同步代码块的执行过程"><a href="#同步代码块的执行过程" class="headerlink" title="同步代码块的执行过程"></a>同步代码块的执行过程</h3><blockquote><ul><li><p>线程1 获取到cpu，来到同步执行块，发现同步监视器open状态，需要先close，在执行其中的代码</p><p>（线程1看到锁是开的，先进入，再把锁锁上了，这样就它自己一个线程在里面了）</p></li><li><p>线程1在执行过程中，发生了线程切换（阻塞，就绪），线程1失去了cpu,但是没有开锁open，因此线程2也进入阻塞状态（线程1在屋子里，失去了cpu，但是线程2由于被锁在外面进不来，拿到cpu也无法使用，进入阻塞状态）</p></li><li><p>线程1再次获取到cpu，接着执行后续代码，等待同步代码块执行完毕，线程1释放锁open</p><p>（线程1做好了，开锁出去了）</p></li><li><p>线程2 再次获取到cpu，来到同步代码块，发现同步监视器open转台，重复线程1的处理过程</p><p>（上锁、执行、开锁）</p></li></ul></blockquote><p>将可能出现安全隐患的代码加入到同步代码块中</p><p>由于本例中只用到一个if else，无法分离。因此全部加进入。正常项目不会只会将可能出现安全隐患的代码加进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Account account = <span class="keyword">new</span> Account();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取款操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//核心操作</span></span><br><span class="line">        <span class="keyword">synchronized</span> (account)&#123;</span><br><span class="line">            <span class="keyword">if</span>(account.getBalance()&gt;=<span class="number">400</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                account.withDraw(<span class="number">400</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"取款成功，当前余额："</span></span><br><span class="line">                        +account.getBalance());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() +<span class="string">"余额不足,取款失败！当前余额："</span></span><br><span class="line">                        +account.getBalance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line">张三取款成功，当前余额：<span class="number">200</span></span><br><span class="line">张三妻子余额不足,取款失败！当前余额：<span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="同步代码块的优缺点"><a href="#同步代码块的优缺点" class="headerlink" title="同步代码块的优缺点"></a>同步代码块的优缺点</h3><p>优点：安全</p><p>缺点：效率低 可能出现死锁</p><img style="zoom: 67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191127170057.png" class="lozad"><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>多个代码块使用同一个同步监视器（锁），锁住一个代码块的同时，也锁住了所有使用该锁的所有代码块，其他线程无法访问其中的<strong>任何一个代码块</strong>。但是没有锁住使用其他同步监视器的代码块，其他线程有机会访问其他同步监视器的代码块</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191127170922.png" class="lozad"></p><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p>关键字：<code>synchronized</code></p><p>注意：<strong>不要将 run 方法设置为同步方法</strong>，那样run方法就变成单线程的了。（并行/并发—–&gt;串行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Account account = <span class="keyword">new</span> Account();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取款操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">//核心操作</span></span><br><span class="line">        withDraw();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">withDraw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(account.getBalance()&gt;=<span class="number">400</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            account.withDraw(<span class="number">400</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"取款成功，当前余额："</span></span><br><span class="line">                    +account.getBalance());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() +<span class="string">"余额不足,取款失败！当前余额："</span></span><br><span class="line">                    +account.getBalance());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建2个线程</span></span><br><span class="line">        Runnable a = <span class="keyword">new</span> AccountRunnable(); <span class="comment">//账户线程</span></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(a);</span><br><span class="line">        thread1.setName(<span class="string">"张三"</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(a);</span><br><span class="line">        thread2.setName(<span class="string">"张三妻子"</span>);</span><br><span class="line">        <span class="comment">//启动2个线程</span></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------------------</span><br><span class="line">张三取款成功，当前余额：<span class="number">200</span></span><br><span class="line">张三妻子余额不足,取款失败！当前余额：<span class="number">200</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>同步代码块有自定义的同步监视器，那么同步方法有吗？</strong></p><p>有。同步方法的同步监视器是<code>this</code>,也就是<code>当前的对象</code>。</p><p>也就是说，一旦一个同步方法被锁定，所有的同步方法都会被锁定。<code>效率低下</code></p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191127172128.png" class="lozad"></p><h2 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h2><p>JDK1.5提供了一个新的线程同步的方式。</p><p>java.util.concurrent.locks，我们需要用到并发包下的Locks的Lock接口</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191127174209.png" class="lozad"></p><p>步骤：<code>买锁  ----  上锁  ----  开锁</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 买锁</span></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Account account = <span class="keyword">new</span> Account();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取款操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">//上锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="comment">//核心操作</span></span><br><span class="line">        <span class="keyword">if</span>(account.getBalance()&gt;=<span class="number">400</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            account.withDraw(<span class="number">400</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"取款成功，当前余额："</span></span><br><span class="line">                    +account.getBalance());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() +<span class="string">"余额不足,取款失败！当前余额："</span></span><br><span class="line">                    +account.getBalance());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------</span><br><span class="line">张三取款成功，当前余额：<span class="number">200</span></span><br><span class="line">张三妻子余额不足,取款失败！当前余额：<span class="number">200</span></span><br></pre></td></tr></table></figure><p>但这还是不够完整，若是同步代码发生异常，开锁的操作就不会执行，因此我们需要将 unlock() 加入 finally 来使开锁操作执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 买锁</span></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Account account = <span class="keyword">new</span> Account();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取款操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//上锁</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="comment">//核心操作</span></span><br><span class="line">            <span class="keyword">if</span>(account.getBalance()&gt;=<span class="number">400</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                account.withDraw(<span class="number">400</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"取款成功，当前余额："</span></span><br><span class="line">                        +account.getBalance());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() +<span class="string">"余额不足,取款失败！当前余额："</span></span><br><span class="line">                        +account.getBalance());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//开锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，这个lock的流程：</p><blockquote><p> Lock l = …;<br>     l.lock();<br>     try {<br>         // access the resource protected by this lock<br>     } finally {<br>         l.unlock();<br>     }</p></blockquote><h2 id="Lock-和-synchronized-的区别"><a href="#Lock-和-synchronized-的区别" class="headerlink" title="Lock 和 synchronized 的区别"></a>Lock 和 synchronized 的区别</h2><p>Lock 是 JDK5 后新增的功能。与采用 synchronized 相比，Lock可提供多种锁方案（多个实现类）。更加灵活</p><blockquote><p>Lock是显式锁（手动开启和关闭），synchronized是隐式锁</p><p>Lock只有代码块锁，synchronized有代码块锁和方法锁（lock只能锁代码，不能锁方法）</p><p>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好，并且具有更好的扩展性（子类多）</p></blockquote><h2 id="3种同步方式的优先使用顺序"><a href="#3种同步方式的优先使用顺序" class="headerlink" title="3种同步方式的优先使用顺序"></a>3种同步方式的优先使用顺序</h2><p><strong>Lock</strong> —- <strong>同步代码块</strong>（已经进入线程体，分配了相应资源）   —– <strong>同步方法</strong>（在方法体之外，还得另外分配资源）</p><h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><h2 id="生产者和消费者问题"><a href="#生产者和消费者问题" class="headerlink" title="生产者和消费者问题"></a>生产者和消费者问题</h2><blockquote><p>技能点：线程通信  wait()  notify()  notifyAll()  Object类中的public方法</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191127175341.png" class="lozad"></p><p>在上述例子中，要避免供过于求或供不应求。因此生产者和消费者之间要进行<strong>通信</strong></p><p>分析：</p><blockquote><ul><li>生产者 —– 仓库（只能放一件商品） —– 消费者</li><li>生产和消费交替进行</li><li>生产者交替生成白色馒头和黄色玉米饼</li></ul></blockquote><p>注意：</p><blockquote><ul><li>线程通信的<strong>前提是线程同步</strong>，因此需要线程同步来保证安全性</li><li>生产者线程和消费者线程是2个不同的线程</li><li>本例与取款的例子不同：取款的2个线程对象是做相同的操作，而本例的2个线程对象一个做生产，一个做消费</li><li>生产者线程和消费者线程需要<strong>相互通信</strong>（还没有商品吗？没有，告诉生产者生产吧）</li></ul></blockquote><p>设计：</p><blockquote><ul><li>定义商品类</li><li>定义生产者线程 消费者线程</li><li>定义测试类（创建线程对象并启动）</li></ul></blockquote><h3 id="发现问题-解决问题"><a href="#发现问题-解决问题" class="headerlink" title="发现问题 + 解决问题"></a>发现问题 + 解决问题</h3><blockquote><p> 第一个问题：实现相同锁 </p><ul><li>消费者获取到的产品名和产品颜色都是null</li><li>是因为他们获取到地不是同一个对象，因此要定义同一个对象，以参数的形式传递给生产者线程和消费者线程。</li></ul><p>第二个问题：实现安全问题</p><ul><li><p>当加入sleep方法后检查安全问题：</p></li><li><p>开始出现黄色馒头和白色玉米棒，这是因为没有线程同步，因此给生产者和消费者线程加上锁（同一把锁）</p></li></ul><p>第三个问题：实现线程通信</p><ul><li><p>生产者和消费者之间没有实现交替</p></li><li><p>调用同步监视器的wait()进行等待，调用同步监视器的notify()进行通知</p></li><li><p><strong>注意wait()和notify()要写在同步的代码中</strong>，否则会报IllegalMonitorStateException</p></li></ul></blockquote><h3 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h3><p> <strong>这些方法都是属于Object类的方法</strong> </p><p><code>wait()</code>:会进入【当前同步监控器】的【阻塞队列】，并【释放锁】。在其他线程调用此对象（同步监控器）的notify()或notifyAll()之前，都会处于线程等待状态（阻塞）</p><p>也就是说，当生产者发现仓库还有商品时，执行wait()进入了product的阻塞队列，并释放了锁，此时消费者抢占到CPU，拿到锁，进入了同步代码块，一看哟呵，有商品，因此没有进入wait()，而是直接消费商品，完后使用同一个监视器notify()通知（唤醒）处在阻塞队列的生产者，而后生产者继续执行未完的操作（不包括wait，因为wait已经执行完毕）</p><p><code>wait(time)</code>:会进入当前同步监控器的阻塞队列time秒，并释放锁。过了time秒后，即使【没被唤醒】，也会【自己醒】来。</p><p><code>notify()</code>:通知（唤醒）在【此对象监视器】上等待的【一个】线程。</p><p>此时若所有线程都在此对象上等待，则会【随机】选择【唤醒其中一个】线程。</p><p><code>notifyAll()</code>:通知（唤醒）在【此对象监视器】上等待的【所有】线程。</p><p>被唤醒的线程将以常规的方式与该对象上主动同步的其他线程【进行竞争】</p><h3 id="程序设计-同步代码块"><a href="#程序设计-同步代码块" class="headerlink" title="程序设计 (同步代码块)"></a>程序设计 (同步代码块)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="comment">// 商品标志 默认为没有商品</span></span><br><span class="line">    Boolean flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(String name, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Product&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", color='"</span> + color + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">======================================</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProduceRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private Product product = new Product();</span></span><br><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProduceRunnable</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProduct</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (product)&#123;</span><br><span class="line">                <span class="comment">// 如果仓库有了商品，就等待</span></span><br><span class="line">                <span class="keyword">if</span>(product.flag)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        product.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//生产商品并输出结果</span></span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    product.setName(<span class="string">"馒头"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    product.setColor(<span class="string">"白色"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    product.setName(<span class="string">"玉米棒"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    product.setColor(<span class="string">"黄色"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"生产者在生产..."</span>+product.getColor() +product.getName());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 改变商品状态（商品做好了）</span></span><br><span class="line">                product.flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 通知消费者可以消费</span></span><br><span class="line">                product.notify();</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">===================================</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumeRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private Product product = new Product();</span></span><br><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsumeRunnable</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProduct</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (product)&#123;</span><br><span class="line">                <span class="comment">//如若没有商品 ，就等待</span></span><br><span class="line">                <span class="keyword">if</span> (!product.flag)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        product.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//消费商品并输出结果</span></span><br><span class="line">                System.out.println(<span class="string">"消费者在消费商品..."</span>+product.getColor()+product.getName());</span><br><span class="line"></span><br><span class="line">                <span class="comment">//改变商品状态（没有商品了）</span></span><br><span class="line">                product.flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">//通知生产者进行生产</span></span><br><span class="line">                product.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">===============================</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        Runnable r1 = <span class="keyword">new</span> ProduceRunnable(product);</span><br><span class="line">        Thread productor = <span class="keyword">new</span> Thread(r1);</span><br><span class="line"></span><br><span class="line">        Runnable r2 = <span class="keyword">new</span> ConsumeRunnable(product);</span><br><span class="line">        Thread consumer = <span class="keyword">new</span> Thread(r2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        productor.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=================================</span><br><span class="line">生产者在生产...白色馒头</span><br><span class="line">消费者在消费商品...白色馒头</span><br><span class="line">生产者在生产...黄色玉米棒</span><br><span class="line">消费者在消费商品...黄色玉米棒</span><br><span class="line">生产者在生产...白色馒头</span><br><span class="line">消费者在消费商品...白色馒头</span><br><span class="line">生产者在生产...黄色玉米棒</span><br><span class="line">消费者在消费商品...黄色玉米棒</span><br><span class="line">生产者在生产...白色馒头</span><br><span class="line">消费者在消费商品...白色馒头</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="程序设计-同步方法"><a href="#程序设计-同步方法" class="headerlink" title="程序设计 (同步方法)"></a>程序设计 (同步方法)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="comment">// 商品标志 默认为没有商品</span></span><br><span class="line">    Boolean flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(String name, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Product&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", color='"</span> + color + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">(String name,String color)</span></span>&#123;  <span class="comment">//锁是this</span></span><br><span class="line">        <span class="comment">// 如果仓库有了商品，就等待</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        System.out.println(<span class="string">"生产者在生产..."</span>+getColor() +getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变商品状态（商品做好了）</span></span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知消费者可以消费</span></span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span></span>&#123;     <span class="comment">//锁是this</span></span><br><span class="line"><span class="comment">//如若没有商品 ，就等待</span></span><br><span class="line">        <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费商品并输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"消费者在消费商品..."</span>+name+color);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改变商品状态（没有商品了）</span></span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//通知生产者进行生产</span></span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">==============================</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProduceRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private Product product = new Product();</span></span><br><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProduceRunnable</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProduct</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                product.produce(<span class="string">"馒头"</span>,<span class="string">"白色"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                product.produce(<span class="string">"玉米棒"</span>,<span class="string">"黄色"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">==============================    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumeRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private Product product = new Product();</span></span><br><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsumeRunnable</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProduct</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            product.consume();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==============================</span><br><span class="line">生产者在生产...黄色玉米棒</span><br><span class="line">消费者在消费商品...玉米棒黄色</span><br><span class="line">生产者在生产...白色馒头</span><br><span class="line">消费者在消费商品...馒头白色</span><br><span class="line">生产者在生产...黄色玉米棒</span><br><span class="line">消费者在消费商品...玉米棒黄色</span><br><span class="line">生产者在生产...白色馒头</span><br><span class="line">消费者在消费商品...馒头白色</span><br><span class="line">生产者在生产...黄色玉米棒</span><br><span class="line">消费者在消费商品...玉米棒黄色</span><br></pre></td></tr></table></figure><h2 id="更完整的线程生命周期"><a href="#更完整的线程生命周期" class="headerlink" title="更完整的线程生命周期"></a>更完整的线程生命周期</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191127233402.png" class="lozad"></p><h4 id="3种阻塞状态的区别"><a href="#3种阻塞状态的区别" class="headerlink" title="3种阻塞状态的区别"></a>3种阻塞状态的区别</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191128000900.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191128000617.png" class="lozad"></p><h4 id="sleep-和-yield-的区别"><a href="#sleep-和-yield-的区别" class="headerlink" title="sleep 和 yield 的区别"></a>sleep 和 yield 的区别</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191128001416.png" class="lozad"></p><h4 id="sleep-与-wait-的异同"><a href="#sleep-与-wait-的异同" class="headerlink" title="sleep 与 wait 的异同"></a>sleep 与 wait 的异同</h4><p>相同点：sleep和wait抛出的异常相同，都可以指定时间</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191128002417.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191128002158.png" class="lozad"></p><h1 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h1><h2 id="线程组介绍"><a href="#线程组介绍" class="headerlink" title="线程组介绍"></a>线程组介绍</h2><p>如果一个线程没有指定线程组，有 <strong>默认线程组（main）</strong></p><p><strong>顶级线程组：system</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        System.out.println(thread.getName());   <span class="comment">//Thread-0</span></span><br><span class="line">        System.out.println(thread.getThreadGroup().getName());  <span class="comment">//main</span></span><br><span class="line">        System.out.println(thread.getThreadGroup().getParent().getName());  <span class="comment">//system</span></span><br><span class="line">        System.out.println(thread.getThreadGroup().getParent().getParent());    <span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程组的使用"><a href="#线程组的使用" class="headerlink" title="线程组的使用"></a>线程组的使用</h2><p>线程组作用：<strong>统一管理</strong>线程组中的线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程组group。名为 赵四线程组</span></span><br><span class="line">        ThreadGroup group = <span class="keyword">new</span> ThreadGroup(<span class="string">"赵四线程组"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象,线程名为 赵四线程 所属线程组是 group</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> ThreadDemo(group,<span class="string">"赵四线程"</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> ThreadDemo(group,<span class="string">"王五线程"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(thread.getName());   <span class="comment">// 赵四线程</span></span><br><span class="line">        System.out.println(thread.getThreadGroup().getName());      <span class="comment">// 赵四线程组</span></span><br><span class="line">        System.out.println(thread.getThreadGroup().getParent());    <span class="comment">// java.lang.ThreadGroup[name=main,maxpri=10]</span></span><br><span class="line">        System.out.println(thread.getThreadGroup().getParent().getName());  <span class="comment">// main</span></span><br><span class="line">        System.out.println(thread.getThreadGroup().getParent().getParent());  <span class="comment">// system</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 作用：统一管理</span></span><br><span class="line">        group.setDaemon(<span class="keyword">true</span>);  <span class="comment">//后台线程</span></span><br><span class="line">        group.setMaxPriority(<span class="number">8</span>);    <span class="comment">//最高优先级：8</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程组中活跃的线程数（前提：必须启动线程）</span></span><br><span class="line">        System.out.println(group.activeCount());    <span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="线程池概述"><a href="#线程池概述" class="headerlink" title="线程池概述"></a>线程池概述</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><blockquote><p>创建和销毁对象是非常耗费时间的</p><ul><li>创建对象：需要分配内存等资源</li><li>销毁对象：垃圾回收器再后台一直跟踪并销毁（无需程序员操作）</li></ul><p>对于经常创建和销毁对象的资源，比如并发情况下的线程，对性能的影响很大</p></blockquote><p>思路：创建好多个线程（堆内存内），放入线程池中，使用时直接获取引用，不使用时放回线程池中。可以避免频繁创建销毁，实现重复利用</p><blockquote><p>生活案例：共享单车</p><p>技术案例：线程池、数据库连接池</p></blockquote><p>JDK1.5起，提供了【<strong>内置线程池</strong>】，我们可以【<strong>直接拿来使用</strong>】</p><h3 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h3><blockquote><p>提高<strong>响应速度</strong>（减少了创建新线程的时间）</p><p>降低<strong>资源消耗</strong>（重复利用线程池中的线程，不需要每次都创建）</p><p>提高线程的<strong>可管理性</strong>：避免线程无限制创建，从而消耗系统资源，降低系统稳定性。甚至内存移除或者CPU耗尽</p></blockquote><h3 id="线程池的应用场合"><a href="#线程池的应用场合" class="headerlink" title="线程池的应用场合"></a>线程池的应用场合</h3><blockquote><p>需要大量的线程，并且完成任务的时间短（节省创建销毁的时间）</p><p>对性能要求苛刻</p><p>接受突发性的大量请求</p></blockquote><h2 id="线程池实例"><a href="#线程池实例" class="headerlink" title="线程池实例"></a>线程池实例</h2><ul><li><p>使用线程池完成大量的没有返回值的Callable任务命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Executable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用线程池完成大量的没有返回值的Callable任务命令</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadPool1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程池(这些线程池都有线程，直接使用即可)</span></span><br><span class="line">        <span class="comment">//创建线程池，该线程池中只有一个线程</span></span><br><span class="line">        ExecutorService pool = Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="comment">//创建线程池，该线程池中线程的数量是固定的</span></span><br><span class="line">        ExecutorService pool2 = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//创建线程池，该线程池中线程的数量是动态可变的</span></span><br><span class="line">        ExecutorService pool3 = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用线程池</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> n=i;    <span class="comment">//注意JDK1.7需要加上final,1.8不用</span></span><br><span class="line">            Runnable runnable = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"线程开始"</span>+n);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">"线程结束"</span>+n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;   <span class="comment">//注意该步骤不是创建线程对象</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用线程对象（提交一个任务到线程池中）</span></span><br><span class="line">            pool.execute(runnable);      <span class="comment">//花费了60秒（线程池只有一个线程，进出20次花费60秒左右）</span></span><br><span class="line">            <span class="comment">//pool2.execute(runnable);     //花费了6秒（线程池有10个线程，进出2次花费6秒左右）</span></span><br><span class="line">            <span class="comment">//pool3.execute(runnable);     //花费了3秒（线程池的线程数量可变，进出1次花费3秒左右）</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用线程池完成大量的有返回值的Callable任务命令</p><blockquote><p>使用get方法时，必须得等待线程执行完毕才能得到返回值，一个3秒20个就60秒，效率很低。</p><p>因此我们需要创建了一个ArrayList 【<strong>保存每个任务的执行结果</strong>】 ，将future对象加入到集合中，在遍历时进行获得返回值，这样就不会等待线程执行完毕才能获得返回值。只要3秒效率更高</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用线程池完成大量的有返回值的Callable任务命令</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadPool2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  创建线程池(这些线程池都有线程，直接使用即可)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//创建线程池，该线程池中线程的数量是动态可变的</span></span><br><span class="line">        ExecutorService pool = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  使用线程池</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        List&lt;Future&gt; futureList = <span class="keyword">new</span> ArrayList&lt;Future&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个任务</span></span><br><span class="line">            Callable&lt;Integer&gt; task = <span class="keyword">new</span> MyCallable();</span><br><span class="line">            <span class="comment">// 使用线程池执行该任务 执行完成后得到的结果最终会保存在 Future&lt;Integer&gt;里面</span></span><br><span class="line">            Future&lt;Integer&gt; future = pool.submit(task);</span><br><span class="line">            <span class="comment">/*// 得到返回值</span></span><br><span class="line"><span class="comment">            int result = future.get();  //必须等线程执行完毕后才能得到返回值，之前再次阻塞</span></span><br><span class="line"><span class="comment">            System.out.println(result);*/</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 加入到集合中</span></span><br><span class="line">            futureList.add(future);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取线程的执行结果</span></span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Integer&gt; f:futureList)&#123;</span><br><span class="line">            <span class="keyword">int</span> result = f.get();</span><br><span class="line">            System.out.print(result + “ ”);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  关闭线程池</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);    <span class="comment">//返回一个10以内的随机整数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------------------</span><br><span class="line"><span class="number">7</span> <span class="number">7</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span> <span class="number">8</span> <span class="number">8</span> <span class="number">4</span> <span class="number">6</span> <span class="number">1</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">7</span> <span class="number">3</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="多线程的继承结构"><a href="#多线程的继承结构" class="headerlink" title="多线程的继承结构"></a>多线程的继承结构</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191128222941.png" class="lozad"></p><h2 id="线程池的参数"><a href="#线程池的参数" class="headerlink" title="线程池的参数"></a>线程池的参数</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191128222901.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191128222915.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h1&gt;&lt;h2 id=&quot;线程的创建-启动&quot;&gt;&lt;a href=&quot;#线程的创建-启动&quot; class=&quot;headerlink&quot; title=&quot;线程的创建
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="https://cometorbityh.github.io/2019/11/25/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://cometorbityh.github.io/2019/11/25/数据库/</id>
    <published>2019-11-25T12:23:38.000Z</published>
    <updated>2019-11-26T15:19:20.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库介绍"><a href="#数据库介绍" class="headerlink" title="数据库介绍"></a>数据库介绍</h1><blockquote><p>数据库 —– DataBase —– DB</p></blockquote><h2 id="什么是数据库？"><a href="#什么是数据库？" class="headerlink" title="什么是数据库？"></a>什么是数据库？</h2><blockquote><p> 用于存储和管理数据的仓库。</p></blockquote><h2 id="数据库的特点"><a href="#数据库的特点" class="headerlink" title="数据库的特点"></a>数据库的特点</h2><blockquote><ol><li>持久化存储数据的。其实数据库就是一个文件系统</li><li>方便存储和管理数据</li><li>使用了统一的方式操作数据库 —&gt; SQL</li></ol></blockquote><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="什么是SQL？"><a href="#什么是SQL？" class="headerlink" title="什么是SQL？"></a>什么是SQL？</h2><blockquote><p>Structured Query Language：结构化查询语言</p><p>其实就是定义了操作所有关系型数据库的<strong>规则</strong>。每一种数据库操作的方式存在不一样的地方，称为“方言”。</p></blockquote><h2 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h2><pre><code>1. SQL 语句可以单行或多行书写，以分号结尾。2. 可使用空格和缩进来增强语句的可读性。3. MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。4. 3 种注释    * 单行注释: -- 注释内容 或 # 注释内容(mysql 特有)     * 多行注释: /* 注释 */</code></pre><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><blockquote><p><strong>DDL ( Data Definition Language ) 数据定义语言</strong><br>    用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</p><p><strong>DML ( Data Manipulation Language ) 数据操作语言</strong><br>    用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</p><p><strong>DQL ( Data Query Language ) 数据查询语言</strong><br>    用来查询数据库中表的记录(数据)。关键字：select, where 等</p><p>DCL ( Data Control Language ) 数据控制语言(了解)<br>    用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</p></blockquote><h1 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">=========建表==========</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>, <span class="comment">-- 编号</span></span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>), <span class="comment">-- 姓名</span></span><br><span class="line">age <span class="built_in">int</span>, <span class="comment">-- 年龄</span></span><br><span class="line">sex <span class="built_in">varchar</span>(<span class="number">5</span>), <span class="comment">-- 性别</span></span><br><span class="line">address <span class="built_in">varchar</span>(<span class="number">100</span>), <span class="comment">-- 地址</span></span><br><span class="line">math <span class="built_in">int</span>, <span class="comment">-- 数学</span></span><br><span class="line">english <span class="built_in">int</span> <span class="comment">-- 英语</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="keyword">id</span>,<span class="keyword">NAME</span>,age,sex,address,math,english) <span class="keyword">VALUES</span> </span><br><span class="line">    (<span class="number">1</span>,<span class="string">'马云'</span>,<span class="number">55</span>,<span class="string">'男'</span>,<span class="string">'杭州'</span>,<span class="number">66</span>,<span class="number">78</span>),</span><br><span class="line">    (<span class="number">2</span>,<span class="string">'马化腾'</span>,<span class="number">45</span>,<span class="string">'女'</span>,<span class="string">'深圳'</span>,<span class="number">98</span>,<span class="number">87</span>),</span><br><span class="line">    (<span class="number">3</span>,<span class="string">'马景涛'</span>,<span class="number">55</span>,<span class="string">'男'</span>,<span class="string">'香港'</span>,<span class="number">56</span>,<span class="number">77</span>),</span><br><span class="line">    (<span class="number">4</span>,<span class="string">'柳岩'</span>,<span class="number">20</span>,<span class="string">'女'</span>,<span class="string">'湖南'</span>,<span class="number">76</span>,<span class="number">65</span>),</span><br><span class="line">    (<span class="number">5</span>,<span class="string">'柳青'</span>,<span class="number">20</span>,<span class="string">'男'</span>,<span class="string">'湖南'</span>,<span class="number">86</span>,<span class="literal">NULL</span>),</span><br><span class="line">    (<span class="number">6</span>,<span class="string">'刘德华'</span>,<span class="number">57</span>,<span class="string">'男'</span>,<span class="string">'香港'</span>,<span class="number">99</span>,<span class="number">99</span>),</span><br><span class="line">    (<span class="number">7</span>,<span class="string">'马德'</span>,<span class="number">22</span>,<span class="string">'女'</span>,<span class="string">'香港'</span>,<span class="number">99</span>,<span class="number">99</span>),</span><br><span class="line">    (<span class="number">8</span>,<span class="string">'德玛西亚'</span>,<span class="number">18</span>,<span class="string">'男'</span>,<span class="string">'南京'</span>,<span class="number">56</span>,<span class="number">65</span>);</span><br></pre></td></tr></table></figure><h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>约束 —–&gt; 对表中数据进行限定，从而保证数据的正确性、有效性和完整性</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191125234254.png" class="lozad"><h2 id="1-非空约束（not-null）"><a href="#1-非空约束（not-null）" class="headerlink" title="(1) 非空约束（not null）"></a>(1) 非空约束（not null）</h2><p>定义某列的数据不能为空</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加非空约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table1(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line"><span class="keyword">name</span> VAECHAR(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后删除非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1 <span class="keyword">MODIFY</span> <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后添加非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1 <span class="keyword">MODIFY</span> <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="2-唯一约束（unique）"><a href="#2-唯一约束（unique）" class="headerlink" title="(2) 唯一约束（unique）"></a>(2) 唯一约束（unique）</h2><p>注意：MYSQL中唯一约束限定的列的值可以有多个NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加唯一约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table1(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">phone VAECHAR(<span class="number">20</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后删除唯一约束（也称唯一索引）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> phone;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后添加唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1 <span class="keyword">MODIFY</span> phone <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></table></figure><h2 id="3-主键约束（primary-key）"><a href="#3-主键约束（primary-key）" class="headerlink" title="(3) 主键约束（primary key）"></a>(3) 主键约束（primary key）</h2><p><code>主键 = 非空 + 唯一</code></p><ul><li><p>一张表中只能由一个字段是主键</p></li><li><p>主键就是表中记录的唯一标识</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加主键约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> STU(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键(因为一张表只有一个主键 因此不必声明具体字段名)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后添加主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>自动增长</strong></p><ul><li><p>某一列时数值类型的，可以使用 <code>auto_increment</code> 来完成自动增长，这样添加数据时可无需指定该字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加主键约束(自动增长)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,qqq);<span class="comment">-- 不指定自动增长的字段</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu <span class="keyword">VALUES</span>(<span class="number">10</span>,sss);<span class="comment">-- 可以自己指定自增的字段</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,sss);<span class="comment">-- 注意该条数据中自增的字段为11 与上一条插入的数据有关</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除自增</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">id</span> <span class="built_in">INT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后添加自增</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">id</span> <span class="built_in">INT</span> AUTO_INCREMENT;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-外键约束（foreign-key）"><a href="#4-外键约束（foreign-key）" class="headerlink" title="(4) 外键约束（foreign key）"></a>(4) 外键约束（foreign key）</h2><p>首先创建一张表，观察表中数据会发现：这个表的数据有些冗余，而且增加和删除数据都很麻烦</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">age <span class="built_in">INT</span>,</span><br><span class="line">dep_name <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">dep_location <span class="built_in">VARCHAR</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (<span class="keyword">NAME</span>, age, dep_name, dep_location) <span class="keyword">VALUES</span> (<span class="string">'张三'</span>, <span class="number">20</span>, <span class="string">'研发部'</span>, <span class="string">'广州'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (<span class="keyword">NAME</span>, age, dep_name, dep_location) <span class="keyword">VALUES</span> (<span class="string">'李四'</span>, <span class="number">21</span>, <span class="string">'研发部'</span>, <span class="string">'广州'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (<span class="keyword">NAME</span>, age, dep_name, dep_location) <span class="keyword">VALUES</span> (<span class="string">'王五'</span>, <span class="number">20</span>, <span class="string">'研发部'</span>, <span class="string">'广州'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (<span class="keyword">NAME</span>, age, dep_name, dep_location) <span class="keyword">VALUES</span> (<span class="string">'老王'</span>, <span class="number">20</span>, <span class="string">'销售部'</span>, <span class="string">'深圳'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (<span class="keyword">NAME</span>, age, dep_name, dep_location) <span class="keyword">VALUES</span> (<span class="string">'大王'</span>, <span class="number">22</span>, <span class="string">'销售部'</span>, <span class="string">'深圳'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (<span class="keyword">NAME</span>, age, dep_name, dep_location) <span class="keyword">VALUES</span> (<span class="string">'小王'</span>, <span class="number">18</span>, <span class="string">'销售部'</span>, <span class="string">'深圳'</span>);</span><br></pre></td></tr></table></figure><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126131608.png" class="lozad"><p>那我们如何解决呢？这里可以把这张数据表拆分成2张表，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建部门表（主表）</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> department(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">dep_name <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">dep_location <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建员工表（从表）</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">age <span class="built_in">int</span>,</span><br><span class="line">dep_id <span class="built_in">int</span> <span class="comment">-- 外键对应主表的主键</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> department <span class="keyword">values</span>(<span class="literal">null</span>, <span class="string">'研发部'</span>,<span class="string">'广州'</span>),(<span class="literal">null</span>, <span class="string">'销售部'</span>, <span class="string">'深圳'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">NAME</span>, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'张三'</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">NAME</span>, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'李四'</span>, <span class="number">21</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">NAME</span>, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'王五'</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">NAME</span>, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'老王'</span>, <span class="number">20</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">NAME</span>, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'大王'</span>, <span class="number">22</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">NAME</span>, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'小王'</span>, <span class="number">18</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><blockquote><p> 现在这2张表是好看了，但是他们之间还是没有关系啊！</p><p>没事，我们可以使用一个<strong>外键约束</strong>来关联这2张表</p></blockquote><p>创建表时添加外键约束</p><p><code>CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称)</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建部门表（主表）</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> department(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">dep_name <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">dep_location <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建员工表（从表）</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">age <span class="built_in">int</span>,</span><br><span class="line">dep_id <span class="built_in">int</span>, <span class="comment">-- 外键对应主表的主键</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> emp_dept_fk <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (dep_id) <span class="keyword">REFERENCES</span> department(<span class="keyword">id</span>) <span class="comment">-- 外键约束</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> department <span class="keyword">values</span>(<span class="literal">null</span>, <span class="string">'研发部'</span>,<span class="string">'广州'</span>),(<span class="literal">null</span>, <span class="string">'销售部'</span>, <span class="string">'深圳'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">NAME</span>, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'张三'</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">NAME</span>, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'李四'</span>, <span class="number">21</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">NAME</span>, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'王五'</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">NAME</span>, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'老王'</span>, <span class="number">20</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">NAME</span>, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'大王'</span>, <span class="number">22</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">NAME</span>, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'小王'</span>, <span class="number">18</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>删除外键约束</p><p><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</code></p><p>创建表后添加外键约束</p><p><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称)</code></p><h2 id="5-级联操作"><a href="#5-级联操作" class="headerlink" title="(5) 级联操作"></a>(5) 级联操作</h2><h3 id="级联更新"><a href="#级联更新" class="headerlink" title="级联更新"></a>级联更新</h3><p>当我们想修改主表的数值怎么办？由于从表的外键绑定着主表的数值，我们必须先修改从表中的数据，才能再修改主表中的数据</p><p>但是一个一个修改太麻烦了，有什么方法能够快速删除这些数据呢？</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126134059.png" class="lozad"><p><strong>方法1（逐表修改）</strong></p><p>将从表中 dep_id = 1 更换成 dep_id = NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> dep_id = <span class="literal">NULL</span> <span class="keyword">WHERE</span> dep_id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><img style="zoom: 67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126134355.png" class="lozad"><p>修改主表数据，再更换从表数据</p><p><code>UPDATE employee SET dep_id = 4 WHERE dep_id IS NULL;</code></p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126134745.png" class="lozad"><p><strong>方法2（级联操作）</strong></p><p>重新修改外键，并在其后添加<code>ON UPDATE CASCADE</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> emp_dept_fk; <span class="comment">-- 删除外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> emp_dept_fk <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (dep_id) <span class="keyword">REFERENCES</span> department(<span class="keyword">id</span>) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>; <span class="comment">-- 重新添加外键</span></span><br></pre></td></tr></table></figure><p>修改主表的数据时，从表的外键数据也会随之修改</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126135536.png" class="lozad"><h3 id="级联删除（谨慎使用！）"><a href="#级联删除（谨慎使用！）" class="headerlink" title="级联删除（谨慎使用！）"></a>级联删除（谨慎使用！）</h3><p>那么我们是否可以：删除主表的数据时，从表的相关外键数据也随之删除呢？</p><p>重新修改外键，并在其后添加<code>ON DELETE CASCADE</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> emp_dept_fk; <span class="comment">-- 删除外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> emp_dept_fk <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (dep_id) <span class="keyword">REFERENCES</span> department(<span class="keyword">id</span>) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span>; <span class="comment">-- 重新添加外键</span></span><br></pre></td></tr></table></figure><p>删除主表的数据时，从表的外键数据也会随之删除（注意：是整条删除！）</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126135943.png" class="lozad"><h1 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h1><h2 id="多表之间的关系"><a href="#多表之间的关系" class="headerlink" title="多表之间的关系"></a>多表之间的关系</h2><h3 id="1-一对一"><a href="#1-一对一" class="headerlink" title="(1) 一对一 *"></a>(1) 一对一 *</h3><blockquote><p>如：人 &lt;—–&gt; 身份证  ||  一个人对应一个身份证，一个身份证对应一个人</p></blockquote><blockquote><p>实现方式：<code>在任意一张表中添加唯一外键，指向另一个表的主键</code>，但一般情况下可以合成这2张表为一张表</p></blockquote><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126141000.png" class="lozad"><h3 id="2-一对多-多对一"><a href="#2-一对多-多对一" class="headerlink" title="(2) 一对多 / 多对一"></a>(2) 一对多 / 多对一</h3><blockquote><p>如；部门 &lt;—–&gt; 员工  ||  一个部门有多个员工，一个员工对应一个部门</p></blockquote><blockquote><p>实现方式：<code>在多的一方建立外键，指向多的一方的主键</code></p></blockquote><img style="zoom: 67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126140738.png" class="lozad"><h3 id="3-多对多"><a href="#3-多对多" class="headerlink" title="(3) 多对多"></a>(3) 多对多</h3><blockquote><p>如：学生 &lt;—–&gt; 课程  ||  一个学生可选多门课程，一个课程可被多个学生选择</p></blockquote><blockquote><p>实现方式：<code>新建中间表</code>，中间表至少包含2个字段，这2个字段作为中间表的外键，分别指向两张表的主键</p></blockquote><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126140755.png" class="lozad"><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>– 创建旅游线路分类表 tab_category<br>    – cid 旅游线路分类主键，自动增长<br>    – cname 旅游线路分类名称非空，唯一，字符串 100<br>    CREATE TABLE tab_category (<br>        cid INT PRIMARY KEY AUTO_INCREMENT,<br>        cname VARCHAR(100) NOT NULL UNIQUE<br>    );</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">-- 创建旅游线路表 tab_route</span><br><span class="line">/*</span><br><span class="line">rid 旅游线路主键，自动增长</span><br><span class="line">rname 旅游线路名称非空，唯一，字符串 100</span><br><span class="line">price 价格</span><br><span class="line">rdate 上架时间，日期类型</span><br><span class="line">cid 外键，所属分类</span><br><span class="line">*/</span><br><span class="line">CREATE TABLE tab_route(</span><br><span class="line">rid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">rname VARCHAR(100) NOT NULL UNIQUE,</span><br><span class="line">price DOUBLE,</span><br><span class="line">rdate DATE,</span><br><span class="line">cid INT,</span><br><span class="line">FOREIGN KEY (cid) REFERENCES tab_category(cid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">/*创建用户表 tab_user</span><br><span class="line">uid 用户主键，自增长</span><br><span class="line">username 用户名长度 100，唯一，非空</span><br><span class="line">password 密码长度 30，非空</span><br><span class="line">name 真实姓名长度 100</span><br><span class="line">birthday 生日</span><br><span class="line">sex 性别，定长字符串 1</span><br><span class="line">telephone 手机号，字符串 11</span><br><span class="line">email 邮箱，字符串长度 100</span><br><span class="line">*/</span><br><span class="line">CREATE TABLE tab_user (</span><br><span class="line">uid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(100) UNIQUE NOT NULL,</span><br><span class="line">PASSWORD VARCHAR(30) NOT NULL,</span><br><span class="line">NAME VARCHAR(100),</span><br><span class="line">birthday DATE,</span><br><span class="line">sex CHAR(1) DEFAULT &apos;男&apos;,</span><br><span class="line">telephone VARCHAR(11),</span><br><span class="line">email VARCHAR(100)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">创建收藏表 tab_favorite</span><br><span class="line">rid 旅游线路 id，外键</span><br><span class="line">date 收藏时间</span><br><span class="line">uid 用户 id，外键</span><br><span class="line">rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次</span><br><span class="line">*/</span><br><span class="line">CREATE TABLE tab_favorite (</span><br><span class="line">rid INT, -- 线路id</span><br><span class="line">DATE DATETIME,</span><br><span class="line">uid INT, -- 用户id</span><br><span class="line">-- 创建复合主键</span><br><span class="line">PRIMARY KEY(rid,uid), -- 联合主键</span><br><span class="line">FOREIGN KEY (rid) REFERENCES tab_route(rid),</span><br><span class="line">FOREIGN KEY(uid) REFERENCES tab_user(uid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="数据库的设计准则——范式"><a href="#数据库的设计准则——范式" class="headerlink" title="数据库的设计准则——范式"></a>数据库的设计准则——范式</h2><p>设计数据库时，需要遵循的一些<strong>规范</strong></p><ul><li><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，</p></li><li><p>各种范式呈递次规范，越高的范式数据库冗余越小。</p><blockquote><p>目前关系数据库有六种范式：</p><pre><code>第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德 范式（BCNF）、第四范式(4NF）第五范式（5NF，又称完美范式）。</code></pre></blockquote></li></ul><p><code>如果要遵循后边的范式要求，必须先遵循前边的所有范式要求</code></p><h3 id="1-第一范式（1NF）"><a href="#1-第一范式（1NF）" class="headerlink" title="(1) 第一范式（1NF）"></a>(1) 第一范式（1NF）</h3><p>每一列都是不可分割的原子数据项</p><img style="zoom: 50%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126143429.png" class="lozad"><blockquote><p>存在的问题：<br>    1.存在非常严重的数据冗余(重复)：姓名、系名、系主任<br>    2.数据添加存在问题：添加新开设的系和系主任时，数据不合法<br>    3.数据删除存在问题：张无忌同学毕业了，删除数据，会将系的数据一起删除。</p></blockquote><h3 id="2-第二范式（2NF）"><a href="#2-第二范式（2NF）" class="headerlink" title="(2) 第二范式（2NF）"></a>(2) 第二范式（2NF）</h3><p>​    在1NF的基础上，非码属性必须完全依赖于码（<code>在1NF基础上消除</code>非主属性对主码的<code>部分函数依赖</code>）</p><p>​    首先要介绍几个概念：</p><ol><li><strong>函数依赖</strong>：A–&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A<br>例如：学号–&gt;姓名。  （学号，课程名称） –&gt; 分数</li><li><strong>完全函数依赖</strong>：A–&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。<br>例如：（学号，课程名称） –&gt; 分数</li><li><strong>部分函数依赖</strong>：A–&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。<br>例如：（学号，课程名称） – &gt; 姓名</li><li><strong>传递函数依赖</strong>：A–&gt;B, B – &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A<br>例如：学号–&gt;系名，系名–&gt;系主任</li><li><strong>码</strong>：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码<br>例如：该表中码为：（学号，课程名称）<ul><li>主属性：码属性组中的所有属性</li><li>非主属性：除过码属性组的属性</li></ul></li></ol><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126145738.png" class="lozad"></p><blockquote><p>本例中，</p><p>​        码属性组（学号，课程名称），</p><p>​        分数完全依赖于码，</p><p>​        而姓名、系名和系主任则部分依赖于码（只需学号就可确定）；</p><p>而2NF的任务就是消除部分依赖</p><p>那么如何消除？方法就是拆分表格</p></blockquote><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126151257.png" class="lozad">        <blockquote><p>依然存在的问题：</p><p>​    2.数据添加存在问题：添加新开设的系和系主任时，数据不合法<br>​    3.数据删除存在问题：张无忌同学毕业了，删除数据，会将系的数据一起删除。</p></blockquote><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126151802.png" class="lozad"><h3 id="3-第三范式（3NF）"><a href="#3-第三范式（3NF）" class="headerlink" title="(3) 第三范式（3NF）"></a>(3) 第三范式（3NF）</h3><p>​    在2NF基础上，任何非主属性不依赖于其它非主属性（<code>在2NF基础上消除传递依赖</code>）</p><p>​    本例中的传递依赖是：学号 – &gt; 系名 –&gt; 系主任</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126152008.png" class="lozad"><p>此时添加数据和删除数据就都合法了。</p><h1 id="DQL-1"><a href="#DQL-1" class="headerlink" title="DQL"></a>DQL</h1><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><h2 id="–-1-基础查询"><a href="#–-1-基础查询" class="headerlink" title="– (1) 基础查询"></a>– (1) 基础查询</h2><blockquote><p>SELECT  FROM,DISTINCT , IFNULL, AS</p></blockquote><ul><li><p>查询 student 表所有字段<br> <code>select * from student;</code></p></li><li><p>查询 NAME 和 age 两列<br> <code>select NAME,age from student;</code></p></li><li><p>查询地址（去除重复后的结果集）<br> <code>select DISTINCT address from student;</code></p></li><li><p>计算分数之和（新列）</p><p><code>select name, math, english,math+english from student;</code></p><ul><li><p>若有null参与运算，则结果为null，显然不合理，这里应该用到：</p></li><li><p>IFNULL（字段名，字段值）：如果字段名的默认值为null，那么该值就替换为字段值</p><p><code>SELECT name,math,english,math+IFNULL(english,0) FROM student;</code></p></li></ul></li><li><p>起别名（接上例）（as 可省略）</p><p><code>SELECT name as 姓名,math as 数学,english as 英语,math+IFNULL(english,0) as 总分 FROM student;</code></p></li></ul><h2 id="–-2-条件查询"><a href="#–-2-条件查询" class="headerlink" title="– (2) 条件查询"></a>– (2) 条件查询</h2><blockquote><p>WHERE，BETWEEN AND， IN，IS NULL， AND，OR，NOT</p></blockquote><ul><li><p>查询 age等于20 的人</p><p><code>SELECT name,age FROM student WHERE age=20;</code></p></li><li><p>查询 age不等于20 的人</p><p><code>SELECT name,age FROM student WHERE age!=20;</code></p><p><code>SELECT name,age FROM student WHERE age&lt;&gt;20;</code></p></li><li><p>查询 age在[20,30] 范围的人</p><p><code>SELECT name,age FROM student WHERE age&gt;=20 AND age&lt;=30;</code></p><p> <code>SELECT name,age FROM student WHERE age BETWEEN 20 AND 30;</code> </p></li><li><p>查询 age等于22 或 18 或 25 的人</p><p><code>SELECT name,age FROM student WHERE age=22 OR age=18 OR age=25;</code></p><p><code>SELECT name,age FROM student WHERE age IN(18,22,25);</code></p><p>查询 English 缺考的人（=null）和未缺考的人</p><p><code>SELECT name,english FROM student WHERE english IS NULL;</code></p><p><code>SELECT name,english FROM student WHERE english IS NOT NULL;</code></p></li></ul><table><thead><tr><th></th><th align="left"></th></tr></thead><tbody><tr><td>LIKE （模糊查询）</td><td align="left">占位符<br> _：单个任意字符<br>%：多个任意字符</td></tr></tbody></table><ul><li><p>查询姓名中包含马的人</p><p><code>SELECT name FROM student WHERE name LIKE &#39;%马%&#39;;</code></p></li><li><p>查询姓名是3个字的人</p><p><code>SELECT name FROM student WHERE name LIKE &#39;___&#39;;</code></p></li></ul><h2 id="–-3-排序查询"><a href="#–-3-排序查询" class="headerlink" title="– (3) 排序查询"></a>– (3) 排序查询</h2><blockquote><p>ORDER BY ASC / DESC（默认升序）</p></blockquote><ul><li><p>按照 math 升序排序</p><p><code>SELECT name,math,english FROM student ORDER BY math asc;</code></p></li><li><p>按照 math 升序排序，若 math 一样，则按照 english 升序排序</p><p><code>SELECT name,math,english FROM student ORDER BY math asc,english asc;</code></p></li></ul><h2 id="–-4-计算列（聚合函数）"><a href="#–-4-计算列（聚合函数）" class="headerlink" title="– (4) 计算列（聚合函数）"></a>– (4) 计算列（聚合函数）</h2><blockquote><p>COUNT，MAX，MIN，SUM，AVG</p></blockquote><p>注意：聚合函数不计算null值</p><ul><li><p>查询总人数</p><p><code>SELECT COUNT(name),COUNT(IFNULL(english,0)) FROM student;</code></p></li><li><p>查询 math 的最大值和最小值</p><p><code>SELECT MAX(math),MIN(math) FROM student;</code></p></li><li><p>查询 english 的总和 以及 english 的平均值</p><p><code>SELECT SUM(english),AVG(english) FROM student;</code></p></li></ul><h2 id="–-5-分组查询"><a href="#–-5-分组查询" class="headerlink" title="– (5) 分组查询"></a>– (5) 分组查询</h2><blockquote><p>GROUP BY，HAVING（分组之后查询的字段为：分组字段、聚合函数)</p></blockquote><blockquote><p> where 和 having 的区别？</p><ol><li>where 在分组之前进行限定，having 在分组之后进行限定</li><li>where后不能根聚合函数，having后可以更聚合函数</li></ol></blockquote><ul><li><p>按照性别分组，查询不同性别的 english 的平均分，人数（分数低于70的人不参与分组）</p><p><code>SELECT sex,AVG(english),COUNT(id) FROM student WHERE english&gt;70 GROUP BY sex</code></p></li><li><p>根据上述分组，只显示大于2人的分组</p><p><code>SELECT sex,AVG(english),COUNT(id) FROM student WHERE english&gt;70 GROUP BY sex HAVING COUNT(id)&gt;2;</code></p></li></ul><h2 id="–-6-分页查询"><a href="#–-6-分页查询" class="headerlink" title="– (6) 分页查询"></a>– (6) 分页查询</h2><blockquote><p>LIMIT x,y  —–  从 x 开始显示 y 条记录</p></blockquote><ul><li><p>每页显示3条记录</p><p><code>SELECT * FROM student LIMIT 0,3;</code></p><p><code>SELECT * FROM student LIMIT 3,3;</code></p><p><code>SELECT * FROM student LIMIT 6,3;</code></p></li></ul><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>先创建2张表：部门表 + 员工表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept (<span class="keyword">NAME</span>) <span class="keyword">VALUES</span> (<span class="string">'开发部'</span>),(<span class="string">'市场部'</span>),(<span class="string">'财务部'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">gender <span class="built_in">CHAR</span>(<span class="number">1</span>), <span class="comment">-- 性别</span></span><br><span class="line">salary <span class="keyword">DOUBLE</span>, <span class="comment">-- 工资</span></span><br><span class="line">join_date <span class="built_in">DATE</span>, <span class="comment">-- 入职日期</span></span><br><span class="line">dept_id <span class="built_in">INT</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (dept_id) <span class="keyword">REFERENCES</span> dept(<span class="keyword">id</span>) <span class="comment">-- 外键，关联部门表(部门表的主键)</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(<span class="keyword">NAME</span>,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">'孙悟空'</span>,<span class="string">'男'</span>,<span class="number">7200</span>,<span class="string">'2013-02-24'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(<span class="keyword">NAME</span>,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">'猪八戒'</span>,<span class="string">'男'</span>,<span class="number">3600</span>,<span class="string">'2010-12-02'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(<span class="keyword">NAME</span>,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">'唐僧'</span>,<span class="string">'男'</span>,<span class="number">9000</span>,<span class="string">'2008-08-08'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(<span class="keyword">NAME</span>,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">'白骨精'</span>,<span class="string">'女'</span>,<span class="number">5000</span>,<span class="string">'2015-10-07'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(<span class="keyword">NAME</span>,gender,salary,join_date,dept_id) <span class="keyword">VALUES</span>(<span class="string">'蜘蛛精'</span>,<span class="string">'女'</span>,<span class="number">4500</span>,<span class="string">'2011-03-14'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>多表查询涉及到了笛卡尔积：</p><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><blockquote><ul><li>有两个集合A,B .取这两个集合的所有组成情况。</li><li>要完成多表查询，需要<strong>消除无用的数据</strong></li><li>多表查询的分类：<strong>内连接查询 + 外连接查询</strong></li></ul></blockquote><h4 id="1-内连接查询"><a href="#1-内连接查询" class="headerlink" title="(1) 内连接查询"></a>(1) 内连接查询</h4><blockquote><p>使用内连接查询需要的数据：</p><ol><li>查询哪些字段( select … )</li><li>从哪些表中查询数据 ( from… )</li><li>条件是什么( where… )</li></ol></blockquote><ul><li><p><strong>隐式内连接</strong>：使用 <strong>where</strong> 条件消除无用数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有员工信息和对应的部门信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> emp.<span class="string">`dept_id`</span> = dept.<span class="string">`id`</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询员工表的名称，性别。部门表的名称</span></span><br><span class="line"><span class="comment">-- 方式1</span></span><br><span class="line"><span class="keyword">SELECT</span> emp.name,emp.gender,dept.name <span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> emp.<span class="string">`dept_id`</span> = dept.<span class="string">`id`</span>;</span><br><span class="line"><span class="comment">-- 方式2</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">t1.name, <span class="comment">-- 员工表的姓名</span></span><br><span class="line">t1.gender,<span class="comment">-- 员工表的性别</span></span><br><span class="line">t2.name <span class="comment">-- 部门表的名称</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp t1,</span><br><span class="line">dept t2</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">t1.<span class="string">`dept_id`</span> = t2.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>显式内连接：</strong></p><p>语法： <code>select 字段列表 from 表名1 [inner] join 表名2 on 条件</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有员工信息和对应的部门信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.<span class="string">`dept_id`</span> = dept.<span class="string">`id`</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.<span class="string">`dept_id`</span> = dept.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li></ul><p>​    </p><h4 id="2-外连接查询"><a href="#2-外连接查询" class="headerlink" title="(2) 外连接查询"></a>(2) 外连接查询</h4><ul><li><p><strong>左外连接：</strong>查询的是左表所有数据以及其交集部分。</p><p>语法：<code>select 字段列表 from 表1 left [outer] join 表2 on 条件；</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> t1.*,t2.<span class="string">`name`</span> <span class="keyword">FROM</span> emp t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept t2 <span class="keyword">ON</span> t1.<span class="string">`dept_id`</span> = t2.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li></ul><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126154358.png" class="lozad"><ul><li><p><strong>右外连接：</strong>查询的是右表所有数据以及其交集部分。</p><p>语法：<code>select 字段列表 from 表1 right [outer] join 表2 on 条件;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dept t2 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> emp t1 <span class="keyword">ON</span> t1.<span class="string">`dept_id`</span> = t2.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-子查询（嵌套查询）"><a href="#3-子查询（嵌套查询）" class="headerlink" title="(3) 子查询（嵌套查询）"></a>(3) 子查询（嵌套查询）</h4><ul><li><p>概念：查询中嵌套查询，称<strong>嵌套查询</strong>为<strong>子查询</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询工资最高的员工信息</span></span><br><span class="line"><span class="comment"># 普通方法</span></span><br><span class="line"><span class="comment">-- 1 查询最高的工资是多少 9000</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2 查询员工信息，并且工资等于9000的</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.<span class="string">`salary`</span> = <span class="number">9000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子查询方法</span></span><br><span class="line"><span class="comment">-- 一条sql就完成这个操作。子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.<span class="string">`salary`</span> = (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>子查询不同情况</strong></li></ul><pre><code>1. 子查询的结果是**单行单列**的：子查询可以作为条件，使用**运算符**去判断。 运算符： &gt; &gt;= &lt; &lt;= =    <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工工资小于平均工资的人</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.salary &lt; (<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure>2. 子查询的结果是**多行单列**的：子查询可以作为条件，使用**运算符in**来判断  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询'财务部'和'市场部'所有的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'财务部'</span> <span class="keyword">OR</span> <span class="keyword">NAME</span> = <span class="string">'市场部'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_id = <span class="number">3</span> <span class="keyword">OR</span> dept_id = <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'财务部'</span> <span class="keyword">OR</span> <span class="keyword">NAME</span> = <span class="string">'市场部'</span>);</span><br></pre></td></tr></table></figure>3. 子查询的结果是**多行多列**的：子查询可以作为一张**虚拟表**参与查询  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span></span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dept t1 ,(<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.<span class="string">`join_date`</span> &gt; <span class="string">'2011-11-11'</span>) t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.id = t2.dept_id;</span><br><span class="line"><span class="comment">-- 普通内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp t1,dept t2 <span class="keyword">WHERE</span> t1.<span class="string">`dept_id`</span> = t2.<span class="string">`id`</span> <span class="keyword">AND</span> t1.<span class="string">`join_date`</span> &gt;  <span class="string">'2011-11-11'</span>;</span><br></pre></td></tr></table></figure></code></pre><h1 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h1><ol><li>命令行：<ul><li>语法：<ul><li>备份： <code>mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径</code></li><li>还原：<ol><li>登录数据库</li><li>创建数据库</li><li>使用数据库</li><li>执行文件 source 文件路径</li></ol></li></ul></li></ul></li><li>图形化工具：</li></ol><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="概念-步骤"><a href="#概念-步骤" class="headerlink" title="概念 + 步骤"></a>概念 + 步骤</h2><p><strong>事务</strong>：如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</p><p><strong>操作步骤：</strong></p><ol><li>开启事务： start transaction;</li><li>回滚：rollback;</li><li>提交：commit;</li></ol><ul><li><p>先创建一张表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">account</span> (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">balance <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span> (<span class="keyword">NAME</span>, balance) <span class="keyword">VALUES</span> (<span class="string">'zhangsan'</span>, <span class="number">1000</span>), (<span class="string">'lisi'</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li></ul><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126161100.png" class="lozad"><ul><li><p>模拟转账出错：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 张三账户 -500</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance - <span class="number">500</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="comment">-- 2. 李四账户 +500（多打了一行字，导致出错，下条没执行）</span></span><br><span class="line">多打了一行字</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance + <span class="number">500</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'lisi'</span>;</span><br></pre></td></tr></table></figure></li></ul><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126160834.png" class="lozad"><ul><li><p>使用事务解决：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--    先恢复金额</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 0. 开启事务</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="comment">-- 1. 张三账户 -500</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance - <span class="number">500</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="comment">-- 2. 李四账户 +500（多打了一行字，导致出错）</span></span><br><span class="line">多打了一行字</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance + <span class="number">500</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'lisi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 发现执行没有问题，提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 发现出问题了，回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure></li></ul><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126161100.png" class="lozad"><h2 id="事务提交的两种方式"><a href="#事务提交的两种方式" class="headerlink" title="事务提交的两种方式"></a>事务提交的两种方式</h2><p>自动提交：一条DML(增删改)语句会自动提交一次事务。（mysql就是自动提交的）</p><p>手动提交：需要先开启事务，再提交</p><ul><li>（<strong>若只开启事务没有提交，则下次重新打开图形界面时会恢复成之之前的数据</strong>）</li><li>（上述例子就是手动提交的）</li></ul><blockquote><p> MySQL数据库中事务默认自动提交，Oracle 数据库默认是手动提交事务</p></blockquote><blockquote><p>修改事务的默认提交方式：</p><ul><li>查看事务的默认提交方式：SELECT @@autocommit; – 1 代表自动提交  0 代表手动提交</li><li>修改默认提交方式： set @@autocommit = 0;</li></ul></blockquote><h2 id="事务的四大特征（⭐）"><a href="#事务的四大特征（⭐）" class="headerlink" title="事务的四大特征（⭐）"></a>事务的四大特征（⭐）</h2><ol><li>原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</li><li>持久性：当事务提交或回滚后，数据库会持久化的保存数据。</li><li>隔离性：多个事务之间。相互独立。</li><li>一致性：事务操作前后，数据总量不变</li></ol><h2 id="事务的隔离级别（⭐）"><a href="#事务的隔离级别（⭐）" class="headerlink" title="事务的隔离级别（⭐）"></a>事务的隔离级别（⭐）</h2><ul><li><p>概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p></li><li><p>存在的问题：</p><ol><li><strong>脏读</strong>：一个事务，读取到另一个事务中没有提交的数据</li><li><strong>不可重复读(虚读)</strong>：在同一个事务中，两次读取到的数据不一样。</li><li><strong>幻读</strong>：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</li></ol></li><li><p>隔离级别：</p><ol><li><p>read uncommitted：读未提交（对方事务<strong>未提交</strong>，我方事务就可读取到修改）</p><ul><li>产生的问题：脏读、不可重复读、幻读</li></ul></li><li><p>read committed：读已提交 （对方事务<strong>提交后</strong>，我方事务才能读取到修改）（Oracle默认）</p><ul><li>产生的问题：不可重复读、幻读</li></ul></li><li><p>repeatable read：可重复读 （对方和我方事务<strong>都提交后</strong>，我方事务才能读取到修改）（MySQL默认）</p><ul><li>产生的问题：幻读</li></ul></li><li><p>serializable：串行化（<strong>锁表</strong>的操作，只能有一个事务在运行，相当于java的同步锁）</p><ul><li>可以解决所有的问题</li></ul><blockquote><p>注意：隔离级别从小到大<strong>安全性越来越高</strong>，但是<strong>效率越来越低</strong></p></blockquote><blockquote><p>数据库查询隔离级别：select @@tx_isolation;</p><p>数据库设置隔离级别：set global transaction isolation level  级别字符串;<strong>（修改隔离级别后要重启）</strong></p></blockquote></li></ol></li><li><p>案例演示：</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br><span class="line"><span class="comment">-- 设置隔离级别</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> uncommitted;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="comment">-- 转账操作</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> balance = balance - <span class="number">500</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> balance = balance + <span class="number">500</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 事务提交</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="comment">-- 事务回滚</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure></li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126164808.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126170106.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126171402.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126172242.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191126172450.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库介绍&quot;&gt;&lt;a href=&quot;#数据库介绍&quot; class=&quot;headerlink&quot; title=&quot;数据库介绍&quot;&gt;&lt;/a&gt;数据库介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;数据库 —– DataBase —– DB&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="数据库" scheme="https://cometorbityh.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MYSQL" scheme="https://cometorbityh.github.io/tags/MYSQL/"/>
    
      <category term="数据库" scheme="https://cometorbityh.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 集合：Collections</title>
    <link href="https://cometorbityh.github.io/2019/11/24/JAVA-%E9%9B%86%E5%90%88%EF%BC%9ACollections/"/>
    <id>https://cometorbityh.github.io/2019/11/24/JAVA-集合：Collections/</id>
    <published>2019-11-24T15:48:11.000Z</published>
    <updated>2019-11-24T16:03:44.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"AAA"</span>);</span><br><span class="line">        list.add(<span class="string">"DDD"</span>);</span><br><span class="line">        <span class="comment">// addAll()后面可跟可变参数</span></span><br><span class="line">        Collections.addAll(list,<span class="string">"CCC"</span>,<span class="string">"BBB"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"><span class="comment">// 二分查找</span></span><br><span class="line">        <span class="keyword">int</span> index = Collections.binarySearch(list, <span class="string">"BBB"</span>);</span><br><span class="line">        System.out.println(index);</span><br><span class="line">        <span class="comment">// 打乱</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">int</span> index1 = Collections.binarySearch(list, <span class="string">"BBB"</span>);</span><br><span class="line">        System.out.println(index1);</span><br><span class="line">        <span class="comment">// 反转</span></span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">int</span> index2 = Collections.binarySearch(list, <span class="string">"BBB"</span>);</span><br><span class="line">        System.out.println(index2);</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">int</span> index3 = Collections.binarySearch(list, <span class="string">"BBB"</span>);</span><br><span class="line">        System.out.println(index3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------</span><br><span class="line">[AAA, DDD, CCC, BBB]</span><br><span class="line">[DDD, CCC, AAA, BBB]</span><br><span class="line">[BBB, AAA, CCC, DDD]</span><br><span class="line">[AAA, BBB, CCC, DDD]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Collections&quot;&gt;&lt;a href=&quot;#Collections&quot; class=&quot;headerlink&quot; title=&quot;Collections&quot;&gt;&lt;/a&gt;Collections&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IDEA 快捷键：逐步更新</title>
    <link href="https://cometorbityh.github.io/2019/11/23/IDEA-%E5%BF%AB%E6%8D%B7%E9%94%AE%EF%BC%9A%E9%80%90%E6%AD%A5%E6%9B%B4%E6%96%B0/"/>
    <id>https://cometorbityh.github.io/2019/11/23/IDEA-快捷键：逐步更新/</id>
    <published>2019-11-23T06:29:39.000Z</published>
    <updated>2019-11-23T06:57:16.773Z</updated>
    
    <content type="html"><![CDATA[<p>191123</p><hr><h1 id="查看源码的继承关系：Ctrl-H"><a href="#查看源码的继承关系：Ctrl-H" class="headerlink" title="查看源码的继承关系：Ctrl+H"></a>查看源码的继承关系：Ctrl+H</h1><p>随意进入源码的一个类，按住Ctrl+H可以查看该类的继承关系</p><img style="zoom: 50%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191123143052.png" class="lozad"><h1 id="查看类的所有方法：Alt-7"><a href="#查看类的所有方法：Alt-7" class="headerlink" title="查看类的所有方法：Alt + 7"></a>查看类的所有方法：Alt + 7</h1><img style="zoom: 67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191123145250.png" class="lozad">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;191123&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;查看源码的继承关系：Ctrl-H&quot;&gt;&lt;a href=&quot;#查看源码的继承关系：Ctrl-H&quot; class=&quot;headerlink&quot; title=&quot;查看源码的继承关系：Ctrl+H&quot;&gt;&lt;/a&gt;查看源码的继承关系：Ctrl+H&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA 集合：Map接口概述</title>
    <link href="https://cometorbityh.github.io/2019/11/23/JAVA-%E9%9B%86%E5%90%88%EF%BC%9AMap%E6%8E%A5%E5%8F%A3%E6%A6%82%E8%BF%B0/"/>
    <id>https://cometorbityh.github.io/2019/11/23/JAVA-集合：Map接口概述/</id>
    <published>2019-11-23T06:17:08.000Z</published>
    <updated>2019-11-24T14:49:20.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h1><p><code>java.util.Map</code></p><p>按照<code>&lt;键，值&gt;对</code>的形式存储数据，是双列集合</p><p>如身份证（&lt;身份证号，名字&gt;），QQ（&lt;QQ号，网名&gt;）这种一一对应的关系，称为“映射”</p><p>Map就是用来存储这种映射对象的集合。</p><p>HashMap的key无法重复，但是可以为null</p><h1 id="Map接口的继承体系"><a href="#Map接口的继承体系" class="headerlink" title="Map接口的继承体系"></a>Map接口的继承体系</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191123142611.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191123144559.png" class="lozad"></p><h1 id="Map接口的常用方法"><a href="#Map接口的常用方法" class="headerlink" title="Map接口的常用方法"></a>Map接口的常用方法</h1><p>由于Map是一个接口，因此我们使用HashMap类来测试Map接口的常用方法</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191123145848.png" class="lozad"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Person)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Person person = (Person) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id != <span class="keyword">null</span> ? !id.equals(person.id) : person.id != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(person.name) : person.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = id != <span class="keyword">null</span> ? id.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + (name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Person&gt; persons = <span class="keyword">new</span> HashMap&lt;String,Person&gt;();</span><br><span class="line">        persons.put(<span class="string">"01"</span>,<span class="keyword">new</span> Person(<span class="number">01</span>,<span class="string">"刘备"</span>));</span><br><span class="line">        persons.put(<span class="string">"02"</span>,<span class="keyword">new</span> Person(<span class="number">02</span>,<span class="string">"关羽"</span>));</span><br><span class="line">        persons.put(<span class="string">"03"</span>,<span class="keyword">new</span> Person(<span class="number">03</span>,<span class="string">"张飞"</span>));</span><br><span class="line">        persons.put(<span class="string">"04"</span>,<span class="keyword">new</span> Person(<span class="number">01</span>,<span class="string">"赵云"</span>));</span><br><span class="line">        persons.put(<span class="string">"04"</span>,<span class="keyword">new</span> Person(<span class="number">01</span>,<span class="string">"诸葛"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(persons.size()); <span class="comment">// 4</span></span><br><span class="line">        Person p04 = persons.get(<span class="string">"04"</span>);</span><br><span class="line">        System.out.println(p04);    <span class="comment">// Person&#123;id=1, name='诸葛'&#125;</span></span><br><span class="line">        System.out.println(<span class="string">"移除："</span>+persons.remove(<span class="string">"04"</span>).getName());   <span class="comment">// 移除：诸葛</span></span><br><span class="line">        System.out.println(persons.size()); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//persons.clear();</span></span><br><span class="line">        <span class="comment">//System.out.println(persons.size()); // o</span></span><br><span class="line"></span><br><span class="line">        String num = <span class="string">"01"</span>;</span><br><span class="line">        <span class="keyword">if</span>(persons.containsKey(num))&#123;</span><br><span class="line">            System.out.println(persons.get(num).getName()+ <span class="string">"已存在！"</span>); <span class="comment">//刘备已存在！</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(persons.get(num).getName()+ <span class="string">"不存在！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 原本是根据equals和hashCode方法同时相等才算相等</span></span><br><span class="line"><span class="comment">         * 但这不符合现实的规则，因此我们重写了这2个方法</span></span><br><span class="line"><span class="comment">         * 使得只要对象内容一样就算一致！*/</span></span><br><span class="line">        <span class="keyword">if</span>(persons.containsValue(<span class="keyword">new</span> Person(<span class="number">02</span>,<span class="string">"关羽"</span>)))&#123;</span><br><span class="line">            System.out.println(<span class="string">"存在！"</span>);  <span class="comment">//  存在！</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"不存在！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*--------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = persons.keySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代key</span></span><br><span class="line">        <span class="keyword">for</span>(String key:keys)&#123;</span><br><span class="line">            System.out.printf(<span class="string">"%s %s  "</span>, key, persons.get(key).getName());  <span class="comment">//01 刘备  02 关羽  03 张飞</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代key（迭代器）</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = keys.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            String key = iterator.next();</span><br><span class="line">            String name = persons.get(key).getName();</span><br><span class="line">            System.out.printf(<span class="string">"%s %s  "</span>, key, name);  <span class="comment">//01 刘备  02 关羽  03 张飞</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//迭代value</span></span><br><span class="line">        Collection&lt;Person&gt; values = persons.values();</span><br><span class="line">        <span class="keyword">for</span> (Person p:values)&#123;</span><br><span class="line">            System.out.print(p + <span class="string">" "</span>);</span><br><span class="line">            <span class="comment">// Person&#123;id=1, name='刘备'&#125; Person&#123;id=2, name='关羽'&#125; Person&#123;id=3, name='张飞'&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Person&gt;&gt; entries = persons.entrySet();</span><br><span class="line">        <span class="comment">//迭代 Entry&lt;key,value&gt;</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Person&gt; entry:entries)&#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Person value = entry.getValue();</span><br><span class="line">            System.out.printf(<span class="string">"%s---%s  "</span>,key,value);</span><br><span class="line">            <span class="comment">// 01---Person&#123;id=1, name='刘备'&#125;  02---Person&#123;id=2, name='关羽'&#125;  03---Person&#123;id=3, name='张飞'&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//迭代 Entry&lt;key,value&gt;（迭代器）</span></span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Person&gt;&gt; iterator1 = entries.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator1.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, Person&gt; ent = iterator1.next();</span><br><span class="line">            String key = ent.getKey();</span><br><span class="line">            Person value = ent.getValue();</span><br><span class="line">            System.out.printf(<span class="string">"%s---%s  "</span>,key,value);</span><br><span class="line">            <span class="comment">// 01---Person&#123;id=1, name='刘备'&#125;  02---Person&#123;id=2, name='关羽'&#125;  03---Person&#123;id=3, name='张飞'&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><p>HashMap是Map接口的子类</p><p>Hash：音译为哈希，实际翻译为散列，杂凑</p><p>Hash算法可将一个数据转换成一个标志，该标志和原数据的每个字节都有十分紧密的关系</p><p>Hash算法很难找到逆向规律</p><p>Hash算法没有一个固定的公式，只要符合散列思想的算法都可以称为Hash算法</p><p>典型的Hash算法：MD5  SHA-1</p><p><strong>Hash碰撞（hash冲突）</strong></p><p>Hash算法可以算出几乎唯一的hashCode，若出现重复的hashCode，则称之为 “哈希碰撞” 或 “哈希冲突” </p><p>HashMap的数据结构</p><p>底层：散列表（哈希表），是基于快速存取的角度设计的，也是一种典型的“空间换时间”的做法。</p><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191123161812.png" class="lozad"><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191123231137.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191124181907.png" class="lozad"></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>在线HashMap图解操作： <a href="https://www.cs.usfca.edu/~galles/visualization/OpenHash.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/OpenHash.html</a> </p><ul><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空参构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 负载因子赋值 0.75f</span></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义容量的构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自定义容量&lt;0 抛异常</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="comment">// 自定义容量 &gt; 最大容量(2^30) </span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="comment">// 负载因子&lt;0 或 负载因子为空 抛异常</span></span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">// 把传入的自定义容量强行转化为2^n-1</span></span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把传入的自定义容量强行转化为2^n-1</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//传入的集合大小</span></span><br><span class="line">    <span class="keyword">int</span> s = m.size();</span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//判断Node&lt;K,V&gt;[] table 即线性表数组是否为null</span></span><br><span class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">            <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">            <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">            <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取key的hash值 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">// key的hash值 异或 key的hash值的高16位</span></span><br><span class="line">    <span class="comment">//目的：提高hashcode的随机性</span></span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">例如：某个key对象的hashcode为 <span class="number">1101</span> <span class="number">1001</span>，数组容量为<span class="number">16</span>，最大下标为<span class="number">15</span>（<span class="number">0000</span> <span class="number">1111</span>），真实实例为<span class="number">32</span>位，此处仅用<span class="number">8</span>位来举例</span><br><span class="line"> <span class="number">1101</span> <span class="number">1001</span>    hash值  </span><br><span class="line"> <span class="number">0000</span> <span class="number">1101</span>    hash值右移四位  </span><br><span class="line">----------    异或（^） ----&gt; key的hash值        </span><br><span class="line"> <span class="number">1101</span> <span class="number">0100</span>   </span><br><span class="line"> <span class="number">0000</span> <span class="number">1111</span>  数组大小-<span class="number">1</span>（<span class="number">16</span>-<span class="number">1</span>）</span><br><span class="line">----------  与（&amp;）----&gt; 该node最终存储在数组的位置</span><br><span class="line"> <span class="number">0000</span> <span class="number">0100</span>  最终存储的位置</span><br></pre></td></tr></table></figure></li><li><p>put</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">table:当前的数组（全局变量）</span></span><br><span class="line"><span class="comment">tab：当前的数组（局部变量）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 若table数组为空 或 长度为0</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 初始化table，并且获取数组长度n</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 用hash和（数组长度-1）进行与运算（本质就是取余运算），算出put的数据应该插在数组的哪个位置</span></span><br><span class="line">    <span class="comment">// 那为什么不直接用取余？ 因为与运算的速度更快，因此使用与运算的目的就是优化计算速度</span></span><br><span class="line">   <span class="comment">// 若p=tab[i]为空，即p链表为null</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">// 将put进来的数据放到tab[i]中</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 若p=tab[i]不为空，就是数组上该位置有元素了</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">// 若tab[i]上的元素和put进来的hash值和键都相等（2个对象指向的地址一致，但是值不同）</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">// 把p=tab[i]的值保存在e中，等待旧值换成新值</span></span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">// 若p=tab[i]是树节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">// 调用红黑树的插入逻辑</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="comment">// 若是链表插入元素</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="comment">// 若p=tab[i]指向的下一个元素e为null</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// p=tab[i]的下一个元素就是put进来的数据</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">// 若当前链表节点的数量&gt; 树结构的阈值（默认8）</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            <span class="comment">//树化：转换成红黑树结构（红黑树可以优化查询性能）</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 若当前链表包含要插入的值e=p.next，结束遍历，等待新值覆盖旧值</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">//p=tab[i+1]，为了遍历</span></span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断插入的值是否存在hashmap中，若是则替换成新值</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="comment">// 保存e的旧值</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="comment">// 将e的旧值替换为新值（覆盖）</span></span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//修改次数+1</span></span><br><span class="line">        ++modCount;</span><br><span class="line">    <span class="comment">//若当前数组大小 &gt; 阈值</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            <span class="comment">//扩容</span></span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p> 是拿<strong>size的大小和threshold进行比较来决定是否需要扩容</strong> </p><p><strong>loadFactor负载因子是可以大于1的</strong>，因为构造函数没有限制，而且从结构上看size的大小是可以大于数组长度的（由于树节点和链表节点的存在）。</p></blockquote><ul><li><p>扩容：resize()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">//旧数组</span></span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">//旧数组容量</span></span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="comment">// newCap：初始化新数组的容量</span></span><br><span class="line">   <span class="comment">// newThr：初始化新数组的阈值</span></span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*--------------------1.新容量和阀值的计算---------------------*/</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            使用不同的构造方法初始化数组时，其容量和阈值不相同，因此以下对不同的情况进行初始化</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="comment">// 情况1：若旧数组有容量</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 当容量达到最大值时，无法扩容</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当新容量（2倍旧容量）&lt; 最大容量 并且 旧容量 &gt;= 默认容量</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                <span class="comment">// 新阈值 = 2 * 旧阈值</span></span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 情况2：若旧阈值 &gt; 0 （使用自定义容量的构造方法创建的数组的初始化）</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            <span class="comment">//新容量 = 旧阈值</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 情况3：若旧数组无容量（使用无参构造方法创建的数组的初始化）</span></span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            <span class="comment">// 初始化新容量 = 16</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            <span class="comment">// 初始化新阈值 = 负载因子 * 初始容量 </span></span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当新阈值为0时给新阈值赋值（上述情况2没有新阈值）</span></span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// threshold就是新阈值</span></span><br><span class="line">        threshold = newThr;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*--------------------2.扩容---------------------*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    对数组进行扩容，扩容时注意：</span></span><br><span class="line"><span class="comment">    由于元素位置时有hashcode计算得出的，当数组长度发生变化时，</span></span><br><span class="line"><span class="comment">    各个元素的位置也可能随机发生变化，因此要重新对元素进行定位</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    <span class="comment">//创建一个新数组，长度为新容量</span></span><br><span class="line">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重新对元素位置进行定位</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//遍历旧数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="comment">// 若旧数组的该位置上有数据，先保存在e中，再将旧数组的该位置进行清空</span></span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// 当该元素的next指针没有值时（没有指向下一个）</span></span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="comment">// 重新计算位置，位置下标为 ：旧数组元素的hash值 &amp; (新数组容量-1)</span></span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="comment">// 当该元素的next指针有值时（指向了树节点，e本身也是树节点）</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="comment">// 当该元素的next指针有值时（指向链表的下一个元素）</span></span><br><span class="line">                    <span class="keyword">else</span> &#123; </span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="comment">// 遍历链表 将链表节点按照顺序进行分组（2组）</span></span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="comment">// 如果原有元素再扩容后，还在原位置</span></span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="comment">//旧链表数据添加在一组</span></span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// 如果原有元素再扩容后，不在原位置（位置发生变化，放在其他位置了）</span></span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">//新链表数据添加在一组</span></span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">//把还在以前位置的元素链起来</span></span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//把不再以前位置的元素放在新的位置</span></span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="comment">//新的位置 = 原位置J + 原容量</span></span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//返回扩容后的数组</span></span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>删除：remove（）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果存在key则删除并返回value，如果不存在则返回null</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">        <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定key并返回node</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">    <span class="comment">// 当前数组不能为空 &amp;&amp; 数组长度不能为0 &amp;&amp; 要删除的元素不能为空</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// hash没有冲突时（就在数组上，单个元素的桶节点）</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// hash有冲突时（不只是1个元素在同一位置，在链表或红黑树上）</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果该节点是树的桶节点</span></span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">// 定位要删除的元素</span></span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">// 如果该节点是链表</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="comment">// 遍历下一个链表节点</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        <span class="comment">// 定位要删除的元素</span></span><br><span class="line">                        node = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拿到要删除的元素node</span></span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="comment">// 如果node是树的桶节点，删除该节点，并调整红黑树使得保持平衡</span></span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">            <span class="comment">// node在数组上（单个元素的桶节点）</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            <span class="comment">// node在链表上（使数组上的元素指向 被删除节点的下一个元素）</span></span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">                p.next = node.next;</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> remove方法删除键值对并不会将数组的大小缩小，按照不同类型的待删除的节点有不同的处理方式： </p><ol><li>单元素桶节点：则将当前桶节点设置为null。</li><li>链表的桶节点：则断开被删除的键值对节点，然后重新连接</li><li>红黑树桶节点：删除键值对节点并调整树结构保持平衡，如果有必要则将红黑树缩减为链表</li></ol></li></ul><p>找到几篇文章，写的很好! </p><p><a href="https://blog.csdn.net/zjxxyz123/article/details/81111627" target="_blank" rel="noopener">https://blog.csdn.net/zjxxyz123/article/details/81111627</a> </p><p><a href="https://www.jianshu.com/p/e826d38d04d8" target="_blank" rel="noopener">https://www.jianshu.com/p/e826d38d04d8</a> </p><p> <a href="https://www.toutiao.com/i6693789706628366862/" target="_blank" rel="noopener">https://www.toutiao.com/i6693789706628366862/</a> </p><h1 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h1><p><img alt="image-20191124001839334" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191124001839334.png" class="lozad"></p><p>LinkedHashMap 继承自HashMap，是基于 HashMap 和双向链表来实现的</p><p>HashMap 有一个不足之处就是在<strong>迭代</strong>元素时与<strong>插入顺序不一致</strong>。而大多数人都喜欢按顺序做某些事情，所以，LinkedHashMap 就是针对这一点对 HashMap 进行扩展，主要新增了<strong>「两种迭代方式」</strong>：</p><ul><li><strong>按插入顺序</strong> - 保证迭代元素的顺序与插入顺序一致</li><li><strong>按访问顺序</strong> - 一种特殊的迭代顺序，从最近最少访问到最多访问的元素访问顺序，非常适合构建 <strong>LRU</strong> 缓存</li></ul><p>HashMap 无序 而 LinkedHashMap 有序，可分为<code>插入顺序（有序）</code>和<code>访问顺序</code>两种</p><p>LinkedHashMap 存取数据，还是和HashMap一样使用Entry方式，双向链表只是为了保证顺序</p><p>LinkedHashMap 是线性不安全的</p><p>底层：双向链表</p><p>​    访问顺序：当访问一个链表的某个元素时，该元素会被移动到链表的最前面（置顶），这样子循环下去，排位越靠前的访问次数越多，越靠后的访问次数越少。这种思路也被称为“最近最少访问（LRU）”</p><blockquote><p>作用领域：缓存，假定该缓存规定每条链表只能拥有10个元素，其中有1条有12个元素，那么根据排序来看，前面的元素都是最近访问的，越靠后的访问次数就越少，那被删除的这2条就是没有经常访问的了，价值不大，因此LinkedHashMap非常适用于缓存。</p></blockquote><p>TreeMap</p><p>没有继承自HashMap</p><p>底层：红黑树</p><p>TreeMap的元素默认按照key的自然顺序进行排序</p><p>使用TreeMap的前提</p><ul><li>key的类实现了Comparable接口<ul><li>Integer：数组升序，实现了Comparable接口</li><li>String：按照字母表排序。实现了Comparable接口</li></ul></li><li>若key的类没有实现Comparable接口，那么需要使用Comparator比较器</li><li>若即实现了Comparable接口，又使用Comparator，则Comparator的优先级更高</li></ul><h1 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h1><p>特点：无序 不可重复</p><p>通过阅读源码：</p><ul><li><p>HashSet底层实现就是HashMap的key集合</p></li><li><p>LinkedHashSet底层实现就是LinkedHashMap的key集合</p></li><li><p>TreeSet底层实现就是TreeMap的key集合</p></li></ul><h1 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">案例：消除重复元素</span></span><br><span class="line"><span class="comment">注意：必须重写 equals()、hashcode()，否则无法比较2个对象相同</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Book&gt; list = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Book(<span class="number">1001</span>,<span class="string">"java"</span>,<span class="number">13</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Book(<span class="number">1001</span>,<span class="string">"java"</span>,<span class="number">13</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Book(<span class="number">1002</span>,<span class="string">"java"</span>,<span class="number">13</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Book(<span class="number">1003</span>,<span class="string">"java"</span>,<span class="number">13</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Book(<span class="number">1003</span>,<span class="string">"java"</span>,<span class="number">13</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="keyword">for</span>(Book book:list)&#123;</span><br><span class="line">            System.out.println(book);</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Book&gt; books = getBooks(list);</span><br><span class="line">        System.out.println(books.size());</span><br><span class="line">        <span class="keyword">for</span>(Book book:books)&#123;</span><br><span class="line">            System.out.println(book);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个方法清除重复元素，返回一个没有重复元素元素的集合对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Book&gt; <span class="title">getBooks</span><span class="params">(List&lt;Book&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"list is null!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Book&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;(list);</span><br><span class="line">        <span class="keyword">return</span> set;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法（有参、无参）</span></span><br><span class="line">    <span class="comment">// getter、setter</span></span><br><span class="line">    <span class="comment">// 重写 equals()、hashcode()、toString()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------</span><br><span class="line"><span class="number">5</span></span><br><span class="line">Book&#123;id=<span class="number">1001</span>, name=<span class="string">'java'</span>, price=<span class="number">13</span>&#125;</span><br><span class="line">Book&#123;id=<span class="number">1001</span>, name=<span class="string">'java'</span>, price=<span class="number">13</span>&#125;</span><br><span class="line">Book&#123;id=<span class="number">1002</span>, name=<span class="string">'java'</span>, price=<span class="number">13</span>&#125;</span><br><span class="line">Book&#123;id=<span class="number">1003</span>, name=<span class="string">'java'</span>, price=<span class="number">13</span>&#125;</span><br><span class="line">Book&#123;id=<span class="number">1003</span>, name=<span class="string">'java'</span>, price=<span class="number">13</span>&#125;</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Book&#123;id=<span class="number">1003</span>, name=<span class="string">'java'</span>, price=<span class="number">13</span>&#125;</span><br><span class="line">Book&#123;id=<span class="number">1001</span>, name=<span class="string">'java'</span>, price=<span class="number">13</span>&#125;</span><br><span class="line">Book&#123;id=<span class="number">1002</span>, name=<span class="string">'java'</span>, price=<span class="number">13</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h1><p><strong>底层</strong>：TreeMap 的 key 集合</p><p><strong>特点</strong>：TreeSet 的元素默认按照 key 的自然顺序进行排序，不可重复</p><p><strong>使用TreeSet的前提</strong></p><ul><li>key 的类实现了 Comparable 接口<ul><li>Integer：数组升序，实现了 Comparable 接口</li><li>String：按照字母表排序。实现了 Comparable 接口</li></ul></li><li>若 key 的类没有实现 Comparable 接口，那么需要使用 Comparator 比较器</li><li>若即实现了 Comparable 接口，又使用 Comparator，则 Comparator 的优先级更高</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法1：通过实现Comparable接口，并重写compareTo方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Emp</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法（有参、无参）</span></span><br><span class="line">    <span class="comment">// getter、setter</span></span><br><span class="line">    <span class="comment">// 重写 equals()、hashcode()、toString()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Emp o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)<span class="keyword">this</span>.salary - o.salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TreeSet&lt;Emp&gt; emps = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    emps.add(<span class="keyword">new</span> Emp(<span class="number">1001</span>,<span class="string">"AAA"</span>,<span class="number">4000</span>));</span><br><span class="line">    emps.add(<span class="keyword">new</span> Emp(<span class="number">1002</span>,<span class="string">"BBB"</span>,<span class="number">2900</span>));</span><br><span class="line">    emps.add(<span class="keyword">new</span> Emp(<span class="number">1003</span>,<span class="string">"CCC"</span>,<span class="number">3800</span>));</span><br><span class="line">    emps.add(<span class="keyword">new</span> Emp(<span class="number">1004</span>,<span class="string">"DDD"</span>,<span class="number">4500</span>));</span><br><span class="line">    emps.add(<span class="keyword">new</span> Emp(<span class="number">1005</span>,<span class="string">"EEE"</span>,<span class="number">2800</span>));</span><br><span class="line">    emps.add(<span class="keyword">new</span> Emp(<span class="number">1006</span>,<span class="string">"FFF"</span>,<span class="number">5000</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Emp emp:emps)&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------</span><br><span class="line">Emp&#123;id=<span class="number">1005</span>, name=<span class="string">'EEE'</span>, salary=<span class="number">2800</span>&#125;</span><br><span class="line">Emp&#123;id=<span class="number">1002</span>, name=<span class="string">'BBB'</span>, salary=<span class="number">2900</span>&#125;</span><br><span class="line">Emp&#123;id=<span class="number">1003</span>, name=<span class="string">'CCC'</span>, salary=<span class="number">3800</span>&#125;</span><br><span class="line">Emp&#123;id=<span class="number">1001</span>, name=<span class="string">'AAA'</span>, salary=<span class="number">4000</span>&#125;</span><br><span class="line">Emp&#123;id=<span class="number">1004</span>, name=<span class="string">'DDD'</span>, salary=<span class="number">4500</span>&#125;</span><br><span class="line">Emp&#123;id=<span class="number">1006</span>, name=<span class="string">'FFF'</span>, salary=<span class="number">5000</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法2：通过新建Comparator对象，并重写compare方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TreeSet&lt;Emp&gt; emps = <span class="keyword">new</span> TreeSet&lt;Emp&gt;(<span class="keyword">new</span> Comparator&lt;Emp&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Emp o1, Emp o2)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 降序</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)o2.getSalary()-o1.getSalary();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    emps.add(<span class="keyword">new</span> Emp(<span class="number">1001</span>,<span class="string">"AAA"</span>,<span class="number">4000</span>));</span><br><span class="line">    emps.add(<span class="keyword">new</span> Emp(<span class="number">1002</span>,<span class="string">"BBB"</span>,<span class="number">2900</span>));</span><br><span class="line">    emps.add(<span class="keyword">new</span> Emp(<span class="number">1003</span>,<span class="string">"CCC"</span>,<span class="number">3800</span>));</span><br><span class="line">    emps.add(<span class="keyword">new</span> Emp(<span class="number">1004</span>,<span class="string">"DDD"</span>,<span class="number">4500</span>));</span><br><span class="line">    emps.add(<span class="keyword">new</span> Emp(<span class="number">1005</span>,<span class="string">"EEE"</span>,<span class="number">2800</span>));</span><br><span class="line">    emps.add(<span class="keyword">new</span> Emp(<span class="number">1006</span>,<span class="string">"FFF"</span>,<span class="number">5000</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Emp emp:emps)&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line">Emp&#123;id=<span class="number">1006</span>, name=<span class="string">'FFF'</span>, salary=<span class="number">5000</span>&#125;</span><br><span class="line">Emp&#123;id=<span class="number">1004</span>, name=<span class="string">'DDD'</span>, salary=<span class="number">4500</span>&#125;</span><br><span class="line">Emp&#123;id=<span class="number">1001</span>, name=<span class="string">'AAA'</span>, salary=<span class="number">4000</span>&#125;</span><br><span class="line">Emp&#123;id=<span class="number">1003</span>, name=<span class="string">'CCC'</span>, salary=<span class="number">3800</span>&#125;</span><br><span class="line">Emp&#123;id=<span class="number">1002</span>, name=<span class="string">'BBB'</span>, salary=<span class="number">2900</span>&#125;</span><br><span class="line">Emp&#123;id=<span class="number">1005</span>, name=<span class="string">'EEE'</span>, salary=<span class="number">2800</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Map接口&quot;&gt;&lt;a href=&quot;#Map接口&quot; class=&quot;headerlink&quot; title=&quot;Map接口&quot;&gt;&lt;/a&gt;Map接口&lt;/h1&gt;&lt;p&gt;&lt;code&gt;java.util.Map&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;按照&lt;code&gt;&amp;lt;键，值&amp;gt;对&lt;/co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA 数据结构：栈+队列+数组+链表</title>
    <link href="https://cometorbityh.github.io/2019/11/22/JAVA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%88-%E9%98%9F%E5%88%97-%E6%95%B0%E7%BB%84-%E9%93%BE%E8%A1%A8/"/>
    <id>https://cometorbityh.github.io/2019/11/22/JAVA-数据结构：栈-队列-数组-链表/</id>
    <published>2019-11-22T09:20:10.000Z</published>
    <updated>2019-11-23T06:15:05.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>计算机存储、组织数据的方式</p><p>数据结构可以编写出更优雅、更有效率的代码S</p><h1 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h1><p>特点：后进先出（弹夹、书箱）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191122173146.png" class="lozad"></p><p>查看源码，Stack类继承Vector，而Vector的底层是线程安全的数组。因此推断出Stack的底层也是数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="入栈出栈操作"><a href="#入栈出栈操作" class="headerlink" title="入栈出栈操作"></a>入栈出栈操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个栈对象（后进先出）</span></span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;String&gt;();</span><br><span class="line">        <span class="comment">// 压栈操作 push()</span></span><br><span class="line">        stack.push(<span class="string">"刘备"</span>);</span><br><span class="line">        stack.push(<span class="string">"关羽"</span>);</span><br><span class="line">        stack.push(<span class="string">"张飞"</span>);</span><br><span class="line">        System.out.println(stack);  <span class="comment">// [刘备, 关羽, 张飞]</span></span><br><span class="line">        <span class="comment">//弹栈操作 pop()</span></span><br><span class="line">        String s1 = stack.pop();</span><br><span class="line">        System.out.println(s1); <span class="comment">//张飞</span></span><br><span class="line">        System.out.println(stack);  <span class="comment">// [刘备, 关羽]</span></span><br><span class="line">        stack.pop();</span><br><span class="line">        stack.pop();</span><br><span class="line">        stack.pop();    <span class="comment">//EmptyStackException,空栈异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h1><p>特点：先进先出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        LinkedList&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        queue.add(<span class="string">"刘备"</span>);</span><br><span class="line">        queue.add(<span class="string">"关羽"</span>);</span><br><span class="line">        queue.add(<span class="string">"张飞"</span>);</span><br><span class="line">        System.out.println(queue);</span><br><span class="line">        String pop = queue.pop();</span><br><span class="line">        System.out.println(pop);</span><br><span class="line">        queue.pop();</span><br><span class="line">        queue.pop();</span><br><span class="line">        queue.pop(); <span class="comment">//NoSuchElementException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h1><p>数组是有序的元素队列，是在内存中开辟了一段连续的空间，在此段空间存放元素</p><p>特点：长度固定，查询快，增删慢</p><p>为什么增删慢？</p><p>因为数组是一个固定的长度，增加和删除的话，都要重新创建一个新数组，并将旧数组中还保留的元素都复制到新数组，还要考虑删除或增加中间元素时，后面元素都要往前挪或往后挪，之后垃圾系统会回收旧数组，因此数组增删元素效率很低。</p><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191122194311.png" class="lozad"></p><h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><p>size()</p><p>isEmpty()</p><p>clear</p><p>add(E e)</p><p>add(int index,E e)</p><p>E get(int index)</p><p>remove(int index)</p><h2 id="编写思路"><a href="#编写思路" class="headerlink" title="编写思路"></a>编写思路</h2><p>构建类LinkedList<e>（底层：双向链表（Node））</e></p><ul><li><p>构造器（无参）</p></li><li><p>属性：size</p></li><li><p>内部类Node<e></e></p><ul><li>Node prev</li><li>E e(data)</li><li>Node next</li></ul><p>声明第一节点（Node first)</p><p>声明最后节点（Node last）</p></li></ul><p>  size():return size</p><p>  isEmpty()：return size==0</p><ul><li><p><strong>clear()：从头到尾遍历，</strong></p><ul><li>保存遍历节点</li><li>释放节点资源<ul><li>node.prev=null;</li><li>node.e=null;</li><li>node.next=null;</li></ul></li><li>通过保存节点找到下个节点<ul><li>node=oldNode.next</li></ul></li><li>size置为0</li><li>first=null,last=null</li></ul></li></ul><p><strong>E get(int index)</strong></p><p>判断index是否在范围内</p><p>​    checkElementIndex(index)</p><p>​    index&gt;0&amp;&amp;index&lt;size（合理）</p><p>​    index&lt;0||index》=size（不合理）</p><p>​    假如不可理抛异常</p><p>查找节点</p><ul><li><p>Node node = node(index)</p></li><li><p>二分查找思路：</p></li><li><p>index&lt;&lt;(Size-1)</p></li><li><p>Node node = first(从左到右)</p></li><li><p>for(int i=0;i&lt;index;i++){</p></li><li><p>node = node.next}</p><p>Node node = last（从右到左）</p><p>for(inr i=size-1;i&gt;index;i–){ node=node.prev}</p><p>return node</p></li></ul><p><strong>boolean add(E e):默认时添加到链表尾部</strong></p><p>linkLast</p><p>将变量保存临时list–f</p><p>构建新节点，等着被添加</p><p>​    Node newNode = new Node(last,e,null)</p><p>判断f是否为null</p><p>​    若f为null,newNode就要作为第一个节点 first = newNode </p><p>​    若f不为null  last.next=newNode;newNode作为最后节点 last = newNode</p><p>size++</p><p>return true</p><p><strong>add(int index,E e)</strong></p><p>检测该下标能否被添加</p><ul><li>index&gt;0 &amp;&amp; index&lt;=size</li><li>index&lt;0 || index&gt;size</li></ul><p>找到需要添加节点·下标</p><p>添加有3种情况</p><ul><li><p>添加到末尾</p><ul><li>if(index==size){linkLast(index)}</li></ul><p>else{</p><p>​    找到需要添加的节点下标</p><p>​        Node node = node(index)</p><p>​        linkBefore(index,node)</p><p>​            Node pre = node.prev    //前一个节点</p><p>​            Node next = node.next    //后一个节点</p><p>​            Node newNode = Node(prev,e,next)    //创建新节点</p><p>node.prev = newNode；找到的节点的前一个添加新节点</p><p>​    if(prev == null){        //要添加到第一个节点（即头节点指向的节点）</p><p>​        first = newNode</p><p>​        </p><p>}    else{prev.next = newNode}</p><p>}</p></li></ul><p><strong>E remove(int index)</strong></p><p>检测下标</p><p>找到需要删除的节点</p><p>​    Node node = node(index)</p><p>​    Node prev = node.prev’</p><p>Node next = node.next</p><p>if(prev==null) //要删除的节点是第一个</p><p>{first=next}    //第二个就变成第一个</p><p>else{prev.next=next;node.prev = null }    //前一个节点denext指针指向类删除的节点的下一个,并且清空被删除节点的prev</p><p>if(next==null)    //要删除的节点是最后一个</p><p>{last = prev; }    //前一个就变成最后一个</p><p>else{next.prev=prev;node.next =null}    //…</p><p>node.e=null</p><p>size–;</p><p>return e;</p><p><strong>有错误，等待订正！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListDemo</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;   <span class="comment">//链表长度</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;  <span class="comment">//链表首节点</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;   <span class="comment">//链表尾节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedListDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部类 Node</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">        E e;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;E&gt; prev, E e, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.e = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Node&lt;E&gt; node=first;node!=<span class="keyword">null</span>;)&#123;</span><br><span class="line">            Node&lt;E&gt; nd = node;</span><br><span class="line">            node.prev =<span class="keyword">null</span>;</span><br><span class="line">            node.e = <span class="keyword">null</span>;</span><br><span class="line">            node.next =<span class="keyword">null</span>;</span><br><span class="line">            node = nd.next;</span><br><span class="line">        &#125;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">        size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="comment">//检查下标范围是否合法</span></span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="comment">//找到该下标所对应的节点</span></span><br><span class="line">        <span class="keyword">return</span> node(index).e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到下标对应节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用二分法遍历</span></span><br><span class="line">        <span class="keyword">if</span>(index&lt;(size&gt;&gt;<span class="number">1</span>))&#123;</span><br><span class="line">            Node&lt;E&gt; node=first;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Node&lt;E&gt; node = last;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=size-<span class="number">1</span>;i&gt;index;i--)&#123;</span><br><span class="line">                node=node.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查下标</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isExistIndex(index))&#123;<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"下标不存在！"</span>);&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下标是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isExistIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;=<span class="number">0</span> &amp;&amp; index &lt;size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加结点（默认添加到最后）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        listLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加元素到链表最后</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线保存原来最后一个结点的信息</span></span><br><span class="line">        Node&lt;E&gt; f = last;</span><br><span class="line">        Node&lt;E&gt; newNode =<span class="keyword">new</span> Node&lt;E&gt;(last,e,<span class="keyword">null</span>);   <span class="comment">//创建新结点</span></span><br><span class="line">        <span class="keyword">if</span>(f==<span class="keyword">null</span>)&#123;    <span class="comment">//如果last是空的</span></span><br><span class="line">            first = newNode;    <span class="comment">//那么这个新节点就是第一个</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            last.next= newNode; <span class="comment">//原本链表的next指针指向新结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        last = newNode; <span class="comment">//现在新结点就是最后一个结点</span></span><br><span class="line">        size++;     <span class="comment">//结点长度加一</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line">        <span class="comment">//检查下标是否存在</span></span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        <span class="comment">//判断添加的位置</span></span><br><span class="line">        <span class="keyword">if</span>(index==size)&#123;    <span class="comment">//添加到尾部</span></span><br><span class="line">            listLast(e);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;              <span class="comment">//添加到非尾部</span></span><br><span class="line">            Node&lt;E&gt; node = node(index);    <span class="comment">//查找到下标对应的结点</span></span><br><span class="line">            linkBefore(e,node);  <span class="comment">//添加到该节点之前</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e,Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; prev = node.prev;   <span class="comment">//该结点的前一个</span></span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; next = node.next;   <span class="comment">//该结点的前一个</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建要添加进来的新结点</span></span><br><span class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(prev,e,node);</span><br><span class="line">        <span class="keyword">if</span>(prev==<span class="keyword">null</span>)&#123; <span class="comment">//如果该结点时第一个</span></span><br><span class="line">            first=newNode;  <span class="comment">//那么新结点就是第一个</span></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;     <span class="comment">//该节点不是第一个</span></span><br><span class="line">            prev.next=newNode;  <span class="comment">//那么前一个结点的next指针指向新结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        node.prev=newNode;</span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="comment">//检测下标是否存在</span></span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        Node&lt;E&gt; node = node(index); <span class="comment">//要删除的结点</span></span><br><span class="line">        Node prev = node.prev;  <span class="comment">//前一个结点</span></span><br><span class="line">        E e = node.e;</span><br><span class="line">        Node next = node.next;  <span class="comment">//后一个结点</span></span><br><span class="line">        <span class="keyword">if</span>(prev==<span class="keyword">null</span>)&#123; <span class="comment">//如果要清除的是第一个结点</span></span><br><span class="line">            first = next;   <span class="comment">//那第二个结点就编程第一个</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            node.prev =<span class="keyword">null</span>;    <span class="comment">//清空该结点的prev指针</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(next ==<span class="keyword">null</span>)&#123;    <span class="comment">//如果要清除的是最后一个结点</span></span><br><span class="line">            last = prev;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            node.next = <span class="keyword">null</span>;   <span class="comment">//清空该结点的next指针</span></span><br><span class="line">        &#125;</span><br><span class="line">        node.e = <span class="keyword">null</span>;  <span class="comment">//清空该结点的值</span></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isPositionIndex(index))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"下标不存在！"</span>);        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index&gt;=<span class="number">0</span> &amp;&amp; index&lt;=size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedListDemo&lt;String&gt; l1 = <span class="keyword">new</span> LinkedListDemo&lt;String&gt;();</span><br><span class="line">        l1.add(<span class="string">"张三"</span>);</span><br><span class="line">        l1.add(<span class="string">"李四"</span>);</span><br><span class="line">        l1.add(<span class="string">"王五"</span>);</span><br><span class="line">        System.out.println(l1.size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l1.size();i++)&#123;</span><br><span class="line">            System.out.print(l1.get(i)+ <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        l1.add(<span class="number">2</span>,<span class="string">"赵玉"</span>);</span><br><span class="line">        System.out.println(l1.size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l1.size();i++)&#123;</span><br><span class="line">            System.out.print(l1.get(i)+ <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        l1.remove(<span class="number">3</span>);</span><br><span class="line">        System.out.println(l1.size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l1.size();i++)&#123;</span><br><span class="line">            System.out.print(l1.get(i)+ <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        l1.clear();</span><br><span class="line">        System.out.println(l1.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line"><span class="number">3</span></span><br><span class="line">张三 李四 王五 </span><br><span class="line"><span class="number">4</span></span><br><span class="line">张三 李四 赵玉 王五 </span><br><span class="line"><span class="number">3</span></span><br><span class="line">张三 李四 赵玉 </span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;p&gt;计算机存储、组织数据的方式&lt;/p&gt;
&lt;p&gt;数据结构可以编写出更优雅、更有效率的代码S&lt;/p&gt;
&lt;h1 id=&quot;栈（Stack
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA 集合-1</title>
    <link href="https://cometorbityh.github.io/2019/11/20/JAVA-%E9%9B%86%E5%90%88-1/"/>
    <id>https://cometorbityh.github.io/2019/11/20/JAVA-集合-1/</id>
    <published>2019-11-20T13:42:57.000Z</published>
    <updated>2019-11-24T15:12:44.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191124224923.png" class="lozad"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>集合——用来存储引用类型数据的<strong>容器</strong>，只能<strong>存储对象</strong>。</p><p> 所有集合类都位于 <code>java.util</code> 包下，但支持多线程的集合类位于 java.util.concurrent 包下 </p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>Collection集合（单列集合）：存储数据时单个存储</li><li>Map集合（双列集合）：存储数据时按键值对形式存储</li></ul><h2 id="集合与数组的区别与联系"><a href="#集合与数组的区别与联系" class="headerlink" title="集合与数组的区别与联系"></a>集合与数组的区别与联系</h2><ul><li>数组长度固定，集合长度可变</li><li>数组元素可以是基本类型，也可以是对象，集合只能保存对象</li><li>集合底层是数组</li></ul><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><ul><li>Java 集合类主要由两个根接口 <strong>Collection</strong> 和 <strong>Map</strong> 派生出来的，Collection 派生出了三个子接口：List、Set、Queue（Java5新增的队列），因此 Java 集合大致也可分成 List、Set、Queue、Map 四种接口体系，（注意： Map 不是 Collection 的子接口）。</li><li>其中<ul><li>List 代表了有序可重复集合，可直接根据元素的索引来访问；</li><li>Set 代表无序不可重复集合，只能根据元素本身来访问；</li><li>Queue 是队列集合；</li><li>Map代表的是存储 key-value 对的集合，可根据元素的 key 来访问 value 。</li></ul></li><li>图中淡绿色背景覆盖的是集合体系中常用的实现类，分别是<code>ArrayList、LinkedList、ArrayQueue、HashSet、TreeSet、HashMap、TreeMap</code>等实现类。</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191120224248.png" class="lozad"></p><p> <img alt="img" data-src="https://img2018.cnblogs.com/blog/1362965/201901/1362965-20190118095106326-273814633.png" class="lozad"> </p><h1 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h1><p>Collection 是一个接口，因此无法直接创建对象，所以使用它的实现类 ArrayList 来创建对象，进而用来举例。</p><h2 id="常用方法（掌握10个）"><a href="#常用方法（掌握10个）" class="headerlink" title="常用方法（掌握10个）"></a>常用方法（掌握10个）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;String&gt; container = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    Collection&lt;String&gt; container2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add() remove() size() contains() </span></span><br><span class="line">    container.add(<span class="string">"东邪"</span>);</span><br><span class="line">    container.add(<span class="string">"西毒"</span>);</span><br><span class="line">    container.add(<span class="string">"南帝"</span>);</span><br><span class="line">    container.add(<span class="string">"北丐"</span>);</span><br><span class="line">    container.add(<span class="string">"中神通"</span>);</span><br><span class="line">    System.out.println(container);  <span class="comment">// [东邪, 西毒, 南帝, 北丐, 中神通]</span></span><br><span class="line"></span><br><span class="line">    container.remove(<span class="string">"西毒"</span>);</span><br><span class="line">    System.out.println(container);  <span class="comment">// [东邪, 南帝, 北丐, 中神通]</span></span><br><span class="line"></span><br><span class="line">    System.out.println(container.size());   <span class="comment">// 4</span></span><br><span class="line">    System.out.println(container.contains(<span class="string">"西毒"</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    container2.add(<span class="string">"AAA"</span>);</span><br><span class="line">    container2.add(<span class="string">"BBB"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// addAll()  removeAll() containsAll()</span></span><br><span class="line">    container.addAll(container2);</span><br><span class="line">    System.out.println(container);  <span class="comment">//[东邪, 南帝, 北丐, 中神通, AAA, BBB]</span></span><br><span class="line">    System.out.println(container.containsAll(container2));  <span class="comment">//true</span></span><br><span class="line">    container.removeAll(container2);</span><br><span class="line">    System.out.println(container);  <span class="comment">//[东邪, 南帝, 北丐, 中神通]</span></span><br><span class="line">    System.out.println(container.containsAll(container2));  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// clear() isEmpty()</span></span><br><span class="line">    container.clear();</span><br><span class="line">    System.out.println(container.isEmpty());    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将集合转为数组，并遍历</span></span><br><span class="line">    <span class="comment">// (1) 普通for循环</span></span><br><span class="line">    <span class="keyword">for</span> (String c : container2)&#123;</span><br><span class="line">            System.out.print(c + <span class="string">" "</span>);  <span class="comment">//AAA BBB</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    Object[] objects = container2.toArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;objects.length;i++)&#123;</span><br><span class="line">        System.out.print(objects[i] + <span class="string">" "</span>); <span class="comment">//AAA BBB</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// (2) 增强for循环</span></span><br><span class="line">    <span class="keyword">for</span> (Object obj:objects)&#123;</span><br><span class="line">        System.out.print(obj + <span class="string">" "</span>);    <span class="comment">//AAA BBB</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (3) 迭代器遍历</span></span><br><span class="line">        Iterator&lt;String&gt; ite = container2.iterator();</span><br><span class="line">        <span class="keyword">while</span> (ite.hasNext())&#123;</span><br><span class="line">            String next = ite.next();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"BBB"</span>.equals(next))&#123;</span><br><span class="line">                ite.remove();   <span class="comment">//删除BBB</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(container2); <span class="comment">//[AAA]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶方法（）"><a href="#进阶方法（）" class="headerlink" title="进阶方法（）"></a>进阶方法（）</h2><h2 id="⭐迭代器-Iterator-原理简介"><a href="#⭐迭代器-Iterator-原理简介" class="headerlink" title="⭐迭代器 Iterator 原理简介"></a>⭐迭代器 Iterator 原理简介</h2><p>在上面代码中，遍历集合元素用到了迭代器。</p><p> Iterator 是一个接口，它是集合的迭代器。集合可以通过 Iterator 去遍历集合和数组中的元素。</p><p> 注意：<strong>Iterator只能单向移动</strong> 。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;<span class="comment">//Collection接口的iterator方法</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>介绍</th></tr></thead><tbody><tr><td><strong>hasNext( )</strong></td><td>如果迭代器中还有元素，则返回 true</td></tr><tr><td><strong>next( )</strong></td><td>返回迭代器中的下一个元素</td></tr><tr><td><strong>remove( )</strong></td><td>删除集合里上一次 next 方法返回的元素</td></tr></tbody></table><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191120223510.png" class="lozad"></p><h1 id="集合与泛型"><a href="#集合与泛型" class="headerlink" title="集合与泛型"></a>集合与泛型</h1><p>前面发现，创建集合对象时加入了泛型，为什么需要泛型？我们先来看个例子：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">list.add(<span class="string">"My is none T"</span>);</span><br><span class="line"></span><br><span class="line">list.add(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line"></span><br><span class="line">  String name = (String) list.get(i); <span class="comment">//取出Integer时，运行时出现异常，因此类型不安全</span></span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">"name:"</span> + name)；</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不加泛型，List默认是Object，所以加一个String和Integer值是合法的，但是在取数据用的时候，忽略之前的兼容，会出现ClassCastException。</p><p>Collection 虽然可以存储各种对象，但是通常只存储同一类型的对象，例如String</p><p>因此在KDK5之后，加入了泛型，使我们在设计方法或类时支持泛型，在编译期进行语法检查，运行时擦除泛型</p><h2 id="泛型是什么？"><a href="#泛型是什么？" class="headerlink" title="泛型是什么？"></a>泛型是什么？</h2><p>泛型，即“<strong>参数化类型</strong>”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。</p><p>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p><p>将数据类型作为参数进行传递，应用到方法、类或接口上。</p><h2 id="泛型的好处"><a href="#泛型的好处" class="headerlink" title="泛型的好处"></a>泛型的好处</h2><ul><li>泛型的主要目标是<strong>提高 Java 程序的类型安全</strong>。 </li><li>消除强制类型转换。避免类型转换的麻烦。储存的是什么类型，取出的就是什么类型</li><li>将运行期异常（ClassCastException） 提升到 编译期 （不加泛型时，编译时就可以看到黄色波浪线警告）</li><li>潜在的性能收益 </li></ul><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191122160322.png" class="lozad"></p><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>格式：</p><ul><li>修饰符  &lt;代表泛型的变量&gt;  返回值类型  方法名（参数）{ }</li></ul><p>特点：调用方法时，确定泛型的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        System.out.println(e + <span class="string">"---"</span> + e.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Container container = <span class="keyword">new</span> Container();</span><br><span class="line">        container.insert(<span class="string">"你好"</span>);</span><br><span class="line">        container.insert(<span class="number">11</span>);</span><br><span class="line">        container.insert(<span class="number">11.90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">你好---java.lang.String</span><br><span class="line"><span class="number">11</span>---java.lang.Integer</span><br><span class="line"><span class="number">11.9</span>---java.lang.Double</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>格式 ： <code>修饰符 interface 接口名 &lt;代表泛型的变量&gt; {}</code></p><p>实现接口时旧确定泛型的类型。创建对象时只能创建该泛型类型的对象。这种方式适合确定性的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ContainerImpl</span> &lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">getinfo</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Container</span> <span class="keyword">implements</span> <span class="title">ContainerImpl</span> &lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s + <span class="string">"---"</span> + s.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getinfo</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ContainerImpl&lt;String&gt; container = <span class="keyword">new</span> Container();</span><br><span class="line">        container.insert(<span class="string">"你好"</span>);</span><br><span class="line">        <span class="comment">//container.insert(11);   //报错Error int无法转换为String</span></span><br><span class="line">        <span class="comment">//container.insert(11.90);    //报错Error double无法转换为String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">你好---java.lang.String</span><br></pre></td></tr></table></figure><p>实现类不确定泛型的类型，直到创建对象时，才确定泛型的类型。这种方式更加灵活，适合范围较广的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ContainerImpl</span> &lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">getinfo</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Container</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ContainerImpl</span> &lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        System.out.println(e + <span class="string">"---"</span> + e.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getinfo</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ContainerImpl&lt;String&gt; container = <span class="keyword">new</span> Container&lt;String&gt;();</span><br><span class="line">        container.insert(<span class="string">"你好"</span>);</span><br><span class="line"></span><br><span class="line">        Container&lt;Integer&gt; container2 = <span class="keyword">new</span> Container&lt;&gt;();</span><br><span class="line">        container2.insert(<span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型的通配符"><a href="#泛型的通配符" class="headerlink" title="泛型的通配符"></a>泛型的通配符</h2><p>当使用泛型类或接口时，传递的数据中泛型类型不确定，可以通过通配符 &lt;?&gt; 来确定</p><p>注意：泛型没有继承关系。如：</p><p><code>Collection&lt;Object&gt; list  = new ArrayList&lt;String&gt;();</code>这种写法是错误的，</p><p><code>ArrayList&lt;Object&gt;</code>和 <code>ArrayList&lt;String&gt;</code>没有任何关系。 </p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191122164957.png" class="lozad"></p><h2 id="通配符的上下限"><a href="#通配符的上下限" class="headerlink" title="通配符的上下限"></a>通配符的上下限</h2><p>那么有时候我们也不想让所有类都能作为泛型的类型怎么办？</p><p>这时候，就要了解通配符的上下限了。</p><p>Java的泛型可以使用通配符指定一个泛型的上限和下限</p><p>上限：只能接收该类型及其子类</p><ul><li>格式：<code>类型名称 &lt;? extends 类&gt; 对象名称</code></li></ul><p>下限；只能接收该类型及其父类</p><ul><li>格式：<code>类型名称 &lt;? super 类&gt; 对象名称</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PairDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getNumber</span><span class="params">(Collection&lt;? extends Number&gt; collection)</span> </span>&#123;</span><br><span class="line">        System.out.println(collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getString</span><span class="params">(Collection&lt;? <span class="keyword">super</span> String&gt; collection)</span> </span>&#123;</span><br><span class="line">        System.out.println(collection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        Collection&lt;Integer&gt; c1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        Collection&lt;Float&gt; c2 = <span class="keyword">new</span> ArrayList&lt;Float&gt;();</span><br><span class="line">        Collection&lt;String&gt; c3 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        Collection&lt;Number&gt; c4 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">        Collection&lt;Object&gt; c5 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试上限</span></span><br><span class="line">        getNumber(c1);</span><br><span class="line">        getNumber(c2);</span><br><span class="line">        <span class="comment">//getNumber(c3);  //编译报错。String不是Number的子类</span></span><br><span class="line">        getNumber(c4);</span><br><span class="line">        <span class="comment">//getNumber(c5);  //编译报错。Object不是Number的子类</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 测试下限</span></span><br><span class="line">        getString(c3);</span><br><span class="line">        <span class="comment">//getString(c4);  //编译报错。Number不是String的父类</span></span><br><span class="line">        getString(c5);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>统计一个数组中大于某个元素的个数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集合概述&quot;&gt;&lt;a href=&quot;#集合概述&quot; class=&quot;headerlink&quot; title=&quot;集合概述&quot;&gt;&lt;/a&gt;集合概述&lt;/h1&gt;&lt;p&gt;&lt;img alt data-src=&quot;https://yanghanblog.oss-cn-hangzhou.aliyunc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA 异常</title>
    <link href="https://cometorbityh.github.io/2019/11/20/JAVA-%E5%BC%82%E5%B8%B8/"/>
    <id>https://cometorbityh.github.io/2019/11/20/JAVA-异常/</id>
    <published>2019-11-20T10:52:27.000Z</published>
    <updated>2019-11-20T15:38:35.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h1><p><code>java.lang.RunTime</code> 类代表Java程序的运行时环境 。</p><p> 在<strong>每一个JVM进程</strong>里面都会存在有一个<strong>Runtime类的对象</strong>，这个类的主要功能是取得一些与运行时有关时环境的属性或者创建新的进程等操作。 </p><p>Runtime只有一个对象，在其它类无法使用new关键字来创建Runtime对象，该对象我们称之为“”单例对象”。</p><p>同时Runtime的设计模式称之为单例模式，是23种设计模式的其中一种。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191120190401.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191120190814.png" class="lozad"></p><h2 id="初识-单例模式"><a href="#初识-单例模式" class="headerlink" title="初识 单例模式"></a>初识 单例模式</h2><p>从Runtime的源码来看 ，我们可以总结出单例模式的设计思路了：</p><ol><li>创建一个私有的静态的对象（只加载一次）</li><li>构造器私有化（防止外部类创建对象）</li><li>写一个静态方法（可直接调用方法获得对象）</li></ol><p>现在模仿Runtime类来创建一个单例对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建一个私有的静态的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.写一个静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line">        System.out.println(instance == instance2);  <span class="comment">//true，证明是同一个对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Runtime-常见方法"><a href="#Runtime-常见方法" class="headerlink" title="Runtime 常见方法"></a>Runtime 常见方法</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Process exec(String command) throws IOException</td><td>执行 可以打开应用 或执行命令</td></tr><tr><td>native long freeMemory()</td><td>JVM虚拟机当前可用的内存，单位字节</td></tr><tr><td>native long totalMemory()</td><td>此电脑最多为JVM分配的内存，单位字节</td></tr><tr><td>native long maxMemory()</td><td>JVM总内存，单位字节</td></tr><tr><td>native int availableProcessors()</td><td>获得JVM运行的可用核数</td></tr><tr><td>void gc()</td><td>释放掉垃圾空间<br>  *  GC（Garbage Collector）垃圾收集器，指的是释放无用的内存空间。<br>  *  GC 会由系统不定期进行自动的回收，或者调用Runtime类中的 gc() 方法 手动回收</td></tr></tbody></table><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="异常的继承体系结构"><a href="#异常的继承体系结构" class="headerlink" title="异常的继承体系结构"></a>异常的继承体系结构</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191120200111.png" class="lozad"></p><h2 id="异常的5个关键字"><a href="#异常的5个关键字" class="headerlink" title="异常的5个关键字"></a>异常的5个关键字</h2><p><code>throws</code>：用在方法签名中，声明该方法可能抛出的异常</p><p><code>throw</code>：抛出异常</p><p><code>try</code>：将被监听的代码放在try代码块中</p><p><code>catch</code>：捕获异常</p><p><code>finally</code>:无论是否捕获到异常，都会执行其中的代码。主要用于<strong>回收</strong>在try块中打开的<strong>资源</strong>(如数据库连接、网络连接、磁盘文件)</p><p><strong>只有finally块执行完成后。才会回来执行try块或catch块中的return或throw语句。若finally块中使用了return或throw等种植方法的语句，则不会跳回执行，直接停止。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = divide(<span class="number">6</span>,<span class="number">3</span>);</span><br><span class="line">    System.out.println(result);     <span class="comment">//finally...  2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> result = a/b;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"finally..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = divide(<span class="number">6</span>,<span class="number">3</span>);</span><br><span class="line">    System.out.println(result);     <span class="comment">//finally...  66666</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> result = a/b;</span><br><span class="line">        <span class="keyword">return</span> result;  <span class="comment">//未执行</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> IllegalArgumentException(<span class="string">"b can not be zero"</span>);   <span class="comment">//未执行</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"finally..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">66666</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JAVA中try、catch、finally带return的执行顺序总结"><a href="#JAVA中try、catch、finally带return的执行顺序总结" class="headerlink" title="JAVA中try、catch、finally带return的执行顺序总结"></a>JAVA中try、catch、finally带return的执行顺序总结</h2><p>转载自：<a href="https://www.cnblogs.com/pcheng/p/10968841.html" target="_blank" rel="noopener">https://www.cnblogs.com/pcheng/p/10968841.html</a></p><p>　　</p><p>异常处理中，try、catch、finally的执行顺序，大家都知道是按顺序执行的。即，</p><ul><li>如果try中没有异常，则顺序为try→finally，</li><li>如果try中有异常，则顺序为try→catch→finally。</li></ul><p>但是当try、catch、finally中加入return之后，就会有几种不同的情况出现。</p><p>下面分别来说明一下。也可以跳到最后直接看总结。</p><p><strong>一、try中带有return</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">testReturn1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(<span class="string">"try:"</span> + i);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(<span class="string">"catch:"</span> + i);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(<span class="string">"finally:"</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------输出-------------</span><br><span class="line"><span class="keyword">try</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">finally</span>:<span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>因为当try中带有return时，会先执行return前的代码，然后暂时保存需要return的信息，再执行finally中的代码，最后再通过return返回之前保存的信息。所以，这里方法返回的值是try中计算后的2，而非finally中计算后的3。</p><p>但有一点需要注意，再看另外一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">testReturn2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"try:"</span> + list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"catch:"</span> + list);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"finally:"</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------输出-------------</span><br><span class="line"><span class="keyword">try</span>:[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">finally</span>:[<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>看完这个例子，可能会发现问题，刚提到return时会临时保存需要返回的信息，不受finally中的影响，为什么这里会有变化？其实问题出在参数类型上，上一个例子用的是基本类型，这里用的引用类型。list里存的不是变量本身，而是变量的地址，所以当finally通过地址改变了变量，还是会影响方法返回值的。</p><p><strong>二、catch中带有return</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">testReturn3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(<span class="string">"try:"</span> + i);</span><br><span class="line">        <span class="keyword">int</span> x = i / <span class="number">0</span> ;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(<span class="string">"catch:"</span> + i);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(<span class="string">"finally:"</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------输出-------------</span><br><span class="line"><span class="keyword">try</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">catch</span>:<span class="number">3</span></span><br><span class="line"><span class="keyword">finally</span>:<span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>catch中return与try中一样，会先执行return前的代码，然后暂时保存需要return的信息，再执行finally中的代码，最后再通过return返回之前保存的信息。所以，这里方法返回的值是try、catch中累积计算后的3，而非finally中计算后的4。</p><p><strong>三、finally中带有return</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">testReturn4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(<span class="string">"try:"</span> + i);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(<span class="string">"catch:"</span> + i);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(<span class="string">"finally:"</span> + i);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------输出-------------</span><br><span class="line"><span class="keyword">try</span>:<span class="number">2</span></span><br><span class="line"><span class="keyword">finally</span>:<span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>当finally中有return的时候，try中的return会失效，在执行完finally的return之后，就不会再执行try中的return。这种写法，编译是可以编译通过的，但是编译器会给予警告，所以不推荐在finally中写return，这会破坏程序的完整性，而且一旦finally里出现异常，会导致catch中的异常被覆盖。</p><p><strong>总结：</strong></p><p>1、finally中的代码总会被执行。</p><p>2、当try、catch中有return时，也会执行finally。return的时候，要注意返回值的类型，是否受到finally中代码的影响。</p><p>3、finally中有return时，会直接在finally中退出，导致try、catch中的return失效。</p><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191120195955.png" class="lozad"></p><h3 id="编译异常"><a href="#编译异常" class="headerlink" title="编译异常"></a>编译异常</h3><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191120195736.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191120195400.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191120195540.png" class="lozad"></p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><h1 id="日志框架-log4j-和-log4j2"><a href="#日志框架-log4j-和-log4j2" class="headerlink" title="日志框架 log4j 和 log4j2"></a>日志框架 log4j 和 log4j2</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Runtime&quot;&gt;&lt;a href=&quot;#Runtime&quot; class=&quot;headerlink&quot; title=&quot;Runtime&quot;&gt;&lt;/a&gt;Runtime&lt;/h1&gt;&lt;p&gt;&lt;code&gt;java.lang.RunTime&lt;/code&gt; 类代表Java程序的运行时环境 。&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA 日期相关类 概述</title>
    <link href="https://cometorbityh.github.io/2019/11/19/JAVA-%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3%E7%B1%BB-%E6%A6%82%E8%BF%B0/"/>
    <id>https://cometorbityh.github.io/2019/11/19/JAVA-日期相关类-概述/</id>
    <published>2019-11-19T02:52:11.000Z</published>
    <updated>2019-12-01T17:01:39.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日期相关类"><a href="#日期相关类" class="headerlink" title="日期相关类"></a>日期相关类</h1><h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h1><p>java.util.Date</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Date():获取当前系统的日期和时间</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date1);  <span class="comment">//Mon Dec 02 00:40:12 CST 2019</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Date(Long date):毫秒值 ---&gt; Date日期（自1970年开始）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">0L</span>);</span><br><span class="line">        System.out.println(date2);  <span class="comment">//Thu Jan 01 08:00:00 CST 1970</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Long getTime():Date日期 ---&gt; 毫秒值（自1970年开始到现在）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Date date3 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date3.getTime());    <span class="comment">//1575218690179</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="DateFormat"><a href="#DateFormat" class="headerlink" title="DateFormat"></a>DateFormat</h1><p>java.text.DateFormat 是日期/时间格式化子类的抽象类，其父类为java.text.Format.   DateFormat可以完成日期和文本之间的转换（Date对象 &lt;—-&gt; String对象）</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>Date对象 —-&gt; String对象：格式化</p><p>Date对象 &lt;—- String对象：解析</p><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><p>String format(Date date)  按照指定的模式,把Date日期,格式化为符合模式的字符串<br>Date parse(String source)  把符合模式的字符串,解析为Date日期<br>DateFormat类是一个抽象类,无法直接创建对象使用,可以使用DateFormat类的子类</p><h2 id="子类SimpleDateFormat"><a href="#子类SimpleDateFormat" class="headerlink" title="子类SimpleDateFormat"></a>子类SimpleDateFormat</h2><p>DateFormat是抽象类，需要用到子类：java.text.SimpleDateFormat，需要传入一个【自定义格式】来指定格式化或解析后的标准</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p><code>SimpleDateFormat(String pattern)</code>——用给定的模式和默认语言环境的日期格式符号构造 SimpleDateFormat。</p><ul><li>String pattern：传递指定的模式</li><li>模式（区分大小写）：y年，M月，d日，H时，m分，s秒</li></ul><p> 使用DateFormat类中的方法format,把日期格式化为文本<br>        使用步骤:<br>            1.创建SimpleDateFormat对象,构造方法中传递指定的模式<br>            2.调用SimpleDateFormat对象中的方法format,按照构造方法中指定的模式,把Date日期格式化为符合模式的字符串(文本)</p><h1 id="1-DecimalFormat"><a href="#1-DecimalFormat" class="headerlink" title="1 DecimalFormat"></a>1 DecimalFormat</h1><p>DecimalFormat可以对数字进行格式化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">3333333.666666</span>;</span><br><span class="line">    DecimalFormat df = <span class="keyword">new</span> DecimalFormat();</span><br><span class="line">    System.out.println(df.format(d));   <span class="comment">// 3,333,333.667</span></span><br><span class="line"></span><br><span class="line">    df.setGroupingSize(<span class="number">2</span>);      <span class="comment">//每2位一个分隔符</span></span><br><span class="line">    df.setGroupingUsed(<span class="keyword">true</span>);</span><br><span class="line">    df.setMaximumFractionDigits(<span class="number">6</span>); <span class="comment">//设置小数部分最大位数（默认3位）</span></span><br><span class="line">    df.setMinimumIntegerDigits(<span class="number">5</span>); <span class="comment">//设置整数部分最大位数</span></span><br><span class="line"></span><br><span class="line">    DecimalFormatSymbols dfs = df.getDecimalFormatSymbols();</span><br><span class="line">    dfs.setGroupingSeparator(<span class="string">'-'</span>);  <span class="comment">//设置分隔符</span></span><br><span class="line">    dfs.setDecimalSeparator(<span class="string">'*'</span>);   <span class="comment">//设置小数点</span></span><br><span class="line">    df.setDecimalFormatSymbols(dfs);</span><br><span class="line">    String d1 = df.format(d);</span><br><span class="line">    System.out.println(d1);     <span class="comment">//3-33-33-33*666666</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-BigInteger"><a href="#2-BigInteger" class="headerlink" title="2 BigInteger"></a>2 BigInteger</h1><p>当我们定义一个数超出这个数的范围时会报错，但是我们却必须使用这个数值和类型时该怎么办？</p><p>Java中有一个类 java.math.BigInteger 可以表示任意长度，就是用来<code>处理数值溢出问题</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(Integer.MAX_VALUE);  <span class="comment">//2147483647</span></span><br><span class="line">    BigInteger bi1 = <span class="keyword">new</span> BigInteger(<span class="string">"2147483648"</span>);  <span class="comment">//超出Int范围</span></span><br><span class="line">    BigInteger bi2 = <span class="keyword">new</span> BigInteger(<span class="string">"1"</span>);</span><br><span class="line">    System.out.println(<span class="string">"bi1-bi2="</span>+(bi1.subtract(bi2).intValue()));   <span class="comment">//此时结果范围在Integer之内</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(Long.MAX_VALUE);  <span class="comment">//9223372036854775807</span></span><br><span class="line">    BigInteger bi3 = <span class="keyword">new</span> BigInteger(<span class="string">"9223372036854775807"</span>);  <span class="comment">//超出Long范围</span></span><br><span class="line">    BigInteger bi4 = <span class="keyword">new</span> BigInteger(<span class="string">"1"</span>);</span><br><span class="line">    System.out.println(<span class="string">"bi3-bi4="</span>+(bi3.subtract(bi4).longValue()));   <span class="comment">//此时结果范围在Long之内</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-BigDecimal"><a href="#3-BigDecimal" class="headerlink" title="3 BigDecimal"></a>3 BigDecimal</h1><p>用double进行数值计算时，会出现精度问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> d1=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">double</span> d2=<span class="number">1.1</span>;</span><br><span class="line">    <span class="keyword">double</span> d3=<span class="number">0.9</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"d1-d2="</span>+(d1-d2));   <span class="comment">//0.8999999999999999</span></span><br><span class="line">    System.out.println(<span class="string">"d1-d3="</span>+(d1-d3));   <span class="comment">//1.1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们在进行科学计算/财务计算时，一般使用另一个类：BigDecimal来表示任意精度，可以用来<code>处理精度问题</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal bd1 = <span class="keyword">new</span> BigDecimal(<span class="string">"2"</span>);</span><br><span class="line">    BigDecimal bd2 = <span class="keyword">new</span> BigDecimal(<span class="string">"1.2"</span>);</span><br><span class="line">    BigDecimal bd3 = <span class="keyword">new</span> BigDecimal(<span class="string">"1.1"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"bd1-bd2="</span>+(bd1.subtract(bd2).doubleValue()));   <span class="comment">//减法 0.8</span></span><br><span class="line">    System.out.println(<span class="string">"bd1-bd3="</span>+(bd1.subtract(bd3).doubleValue()));   <span class="comment">//0.9</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日期相关类&quot;&gt;&lt;a href=&quot;#日期相关类&quot; class=&quot;headerlink&quot; title=&quot;日期相关类&quot;&gt;&lt;/a&gt;日期相关类&lt;/h1&gt;&lt;h1 id=&quot;Date&quot;&gt;&lt;a href=&quot;#Date&quot; class=&quot;headerlink&quot; title=&quot;Date&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA Object:常见方法概述</title>
    <link href="https://cometorbityh.github.io/2019/11/19/JAVA-Object-%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
    <id>https://cometorbityh.github.io/2019/11/19/JAVA-Object-常见方法概述/</id>
    <published>2019-11-19T02:51:49.000Z</published>
    <updated>2019-11-19T12:35:48.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><p>java.lang.Object类是所有类的根，即所有类都直接或间接继承Object类，每个类都将Object当作超类。</p><p><strong><font color="red">所有的对象，数组都实现了 Object 的方法</font></strong></p><p>native关键字：Java具体是由C写的代码，native可以调用这些代码协助完成源码编写。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>getClass( )</td><td>获得java.lang.Class对象，在反射时会用（该类用final修饰，<strong>不可重写</strong>）</td><td></td></tr><tr><td>hashCode( )</td><td>hashSet集合确保对象唯一性</td><td></td></tr><tr><td><strong>equals( )</strong></td><td>判断是否是同一个对象，默认比较引用的地址（可重写）</td><td></td></tr><tr><td><strong>toString( )</strong></td><td>代表这类字符串【格式：<code>全限定类名@十六进制hashcode</code>】（可重写）</td><td></td></tr><tr><td><font color="red">clone( )</font></td><td>克隆对象（深拷贝 、 浅拷贝）</td><td></td></tr><tr><td>finalize( )</td><td>gc回收对象时会调用的方法</td><td></td></tr><tr><td>notify( )</td><td>（多线程相关）线程等待唤醒机制</td><td></td></tr><tr><td>notifyAll( )</td><td>（多线程相关）</td><td></td></tr><tr><td>wait( )</td><td>（多线程相关）</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="clone"><a href="#clone" class="headerlink" title="clone( )"></a>clone( )</h2><p> 克隆就是依据已经有的数据，创造一份新的完全一样的数据拷贝。 </p><p> 在<a href="http://lib.csdn.net/base/java" target="_blank" rel="noopener">Java</a>中对象的克隆有深克隆和浅克隆之分。有这种区分的原因是Java中分为基本数据类型和引用数据类型，对于不同的数据类型在内存中的存储的区域是不同的。基本数据类型存储在栈中，引用数据类型存储在堆中。 </p><p>clone的步骤：</p><ol><li>对象的类实现Cloneable接口；</li><li>覆盖Object类的clone()方法 （<strong>覆盖clone()方法，访问修饰符设为public，默认是protected</strong>）；</li><li>在clone()方法中调用super.clone()；</li></ol><p>clone( ) 的浅拷贝</p><p> 指拷贝对象时仅仅拷贝对象本身（包括对象中的基本变量），而不拷贝对象包含的引用指向的对象 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">(String country, String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.country = country;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//getter , setter , toString()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 实现Cloneable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 重写clone方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter , setter , toString()</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Address address = <span class="keyword">new</span> Address(<span class="string">"中国"</span>,<span class="string">"北京"</span>);</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"XiaoHei"</span>,address);</span><br><span class="line">        User u2 = (User)u1.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(u1 == u2);</span><br><span class="line">        System.out.println(u1);</span><br><span class="line">        System.out.println(u2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改u1的Address的city属性</span></span><br><span class="line">        u1.getAddress().setCity(<span class="string">"上海"</span>);</span><br><span class="line">        System.out.println(u1 == u2);</span><br><span class="line">        System.out.println(u1);</span><br><span class="line">        System.out.println(u2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">User&#123;id=<span class="number">1</span>, name=<span class="string">'XiaoHei'</span>, address=Address&#123;country=<span class="string">'中国'</span>, city=<span class="string">'北京'</span>&#125;&#125;</span><br><span class="line">User&#123;id=<span class="number">1</span>, name=<span class="string">'XiaoHei'</span>, address=Address&#123;country=<span class="string">'中国'</span>, city=<span class="string">'北京'</span>&#125;&#125;</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">User&#123;id=<span class="number">1</span>, name=<span class="string">'XiaoHei'</span>, address=Address&#123;country=<span class="string">'中国'</span>, city=<span class="string">'上海'</span>&#125;&#125;</span><br><span class="line">User&#123;id=<span class="number">1</span>, name=<span class="string">'XiaoHei'</span>, address=Address&#123;country=<span class="string">'中国'</span>, city=<span class="string">'上海'</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以看出，克隆前后的对象不相等，因为他们本来就不是同一个对象，因此不相等</p><p>但是当u1修改属性值时，为什么u2也跟着修改？</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191119165826.png" class="lozad"></p><p>原来，这2个对象的address都指向同一个引用，但这个address引用的内容发生变化时，这2个对象的address的值也就随之发生变化了，这就是浅拷贝。</p><p>那么如何使克隆后的对象不受影响呢？这就要用到深拷贝了</p><p>clone( ) 的深拷贝</p><p> 不仅拷贝对象本身，而且拷贝对象包含的引用指向的所有对象。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 实现Cloneable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">(String country, String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.country = country;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. clone方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//getter , setter , toString()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 实现Cloneable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 重写clone方法</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = (User)<span class="keyword">super</span>.clone();</span><br><span class="line">        Address address = (Address) user.address.clone();</span><br><span class="line">        user.setAddress(address);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter , setter , toString()</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Address address = <span class="keyword">new</span> Address(<span class="string">"中国"</span>,<span class="string">"北京"</span>);</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"XiaoHei"</span>,address);</span><br><span class="line">        User u2 = (User)u1.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(u1 == u2);</span><br><span class="line">        System.out.println(u1);</span><br><span class="line">        System.out.println(u2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改u1的Address的city属性</span></span><br><span class="line">        u1.getAddress().setCity(<span class="string">"上海"</span>);</span><br><span class="line">        System.out.println(u1 == u2);</span><br><span class="line">        System.out.println(u1);</span><br><span class="line">        System.out.println(u2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------------------------------</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">User&#123;id=<span class="number">1</span>, name=<span class="string">'XiaoHei'</span>, address=Address&#123;country=<span class="string">'中国'</span>, city=<span class="string">'北京'</span>&#125;&#125;</span><br><span class="line">User&#123;id=<span class="number">1</span>, name=<span class="string">'XiaoHei'</span>, address=Address&#123;country=<span class="string">'中国'</span>, city=<span class="string">'北京'</span>&#125;&#125;</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">User&#123;id=<span class="number">1</span>, name=<span class="string">'XiaoHei'</span>, address=Address&#123;country=<span class="string">'中国'</span>, city=<span class="string">'上海'</span>&#125;&#125;</span><br><span class="line">User&#123;id=<span class="number">1</span>, name=<span class="string">'XiaoHei'</span>, address=Address&#123;country=<span class="string">'中国'</span>, city=<span class="string">'北京'</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>首先给Address类重写clone方法，然后修改User类中的clone方法，使其克隆User对象时同时克隆Address对象。</p><p>这样克隆后的对象就不会受到前对象修改数据时的影响了。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191119165719.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Object类&quot;&gt;&lt;a href=&quot;#Object类&quot; class=&quot;headerlink&quot; title=&quot;Object类&quot;&gt;&lt;/a&gt;Object类&lt;/h1&gt;&lt;p&gt;java.lang.Object类是所有类的根，即所有类都直接或间接继承Object类，每个类都将O
      
    
    </summary>
    
    
  </entry>
  
</feed>
