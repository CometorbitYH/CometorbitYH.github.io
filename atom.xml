<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MY</title>
  
  <subtitle>IT IS MY LIFE</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cometorbityh.github.io/"/>
  <updated>2020-01-13T06:11:08.728Z</updated>
  <id>https://cometorbityh.github.io/</id>
  
  <author>
    <name>杨涵</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://cometorbityh.github.io/2020/01/13/Untitled/"/>
    <id>https://cometorbityh.github.io/2020/01/13/Untitled/</id>
    <published>2020-01-13T06:11:08.728Z</published>
    <updated>2020-01-13T06:11:08.728Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux 实操篇</title>
    <link href="https://cometorbityh.github.io/2020/01/13/Linux-%E5%AE%9E%E6%93%8D%E7%AF%87/"/>
    <id>https://cometorbityh.github.io/2020/01/13/Linux-实操篇/</id>
    <published>2020-01-13T04:20:42.000Z</published>
    <updated>2020-01-16T11:22:40.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-远程登录——-Xshell-6"><a href="#3-1-远程登录——-Xshell-6" class="headerlink" title="3.1. 远程登录—— Xshell 6"></a>3.1. 远程登录—— Xshell 6</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114102250.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200113181226.png" class="lozad"></p><p>在终端输入setup打开服务，进入工具界面，选择系统服务</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114101504.png" class="lozad"></p><p>找到sshd，这个服务就是XShell连接Linux需要打开的服务了，默认是开启的。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114101315.png" class="lozad"></p><p>使用ifconfig查看Linux的IP地址</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114101323.png" class="lozad"></p><p>在Xshell中创建连接，并输入Linux的用户名和密码。即可远程连接Linux了。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114101328.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114101807.png" class="lozad"></p><h2 id="3-2-远程上传下载文件——-XFtp-6"><a href="#3-2-远程上传下载文件——-XFtp-6" class="headerlink" title="3.2. 远程上传下载文件—— XFtp 6"></a>3.2. 远程上传下载文件—— XFtp 6</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114102342.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114102949.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114102930.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114104506.gif" class="lozad"></p><p>vi 和 vim </p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114115754.png" class="lozad"></p><p>进入正常模式</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114121131.png" class="lozad"></p><p>进入编辑模式</p><p>进入命令行模式，使用命令行保存退出</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114121204.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114120207.png" class="lozad"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114141528.png" class="lozad"></p><p>用户和用户组的相关文件</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114144800.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114145112.png" class="lozad"></p><h2 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114165642.png" class="lozad"></p><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><h3 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h3><h4 id="pwd-指令"><a href="#pwd-指令" class="headerlink" title="pwd 指令"></a>pwd 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114183331.png" class="lozad"></p><h4 id="ls-指令"><a href="#ls-指令" class="headerlink" title="ls 指令"></a>ls 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114184442.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114184559.png" class="lozad"></p><h4 id="cd-指令"><a href="#cd-指令" class="headerlink" title="cd 指令"></a>cd 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114185946.png" class="lozad"></p><h4 id="touch-指令"><a href="#touch-指令" class="headerlink" title="touch 指令"></a>touch 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114191538.png" class="lozad"></p><h4 id="cp-指令"><a href="#cp-指令" class="headerlink" title="cp 指令"></a>cp 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114192816.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114193213.png" class="lozad"></p><h4 id="rm-指令"><a href="#rm-指令" class="headerlink" title="rm 指令"></a>rm 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114194152.png" class="lozad"></p><h4 id="mv-指令"><a href="#mv-指令" class="headerlink" title="mv 指令"></a>mv 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114194522.png" class="lozad"></p><h4 id="cat-指令"><a href="#cat-指令" class="headerlink" title="cat 指令"></a>cat 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114195512.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114195529.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114195539.png" class="lozad"></p><h4 id="more-指令"><a href="#more-指令" class="headerlink" title="more 指令"></a>more 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114195649.png" class="lozad"></p><h4 id="less指令"><a href="#less指令" class="headerlink" title="less指令"></a>less指令</h4><h4 id="输出重定向和追加指令"><a href="#输出重定向和追加指令" class="headerlink" title="输出重定向和追加指令"></a>输出重定向和追加指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114201143.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114201416.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114201627.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114201858.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114202101.png" class="lozad"></p><h4 id="echo-指令"><a href="#echo-指令" class="headerlink" title="echo 指令"></a>echo 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114202502.png" class="lozad"></p><h4 id="head-指令"><a href="#head-指令" class="headerlink" title="head 指令"></a>head 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114202912.png" class="lozad"></p><h4 id="tail-指令"><a href="#tail-指令" class="headerlink" title="tail 指令"></a>tail 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114203524.png" class="lozad"></p><h4 id="ln-指令"><a href="#ln-指令" class="headerlink" title="ln 指令"></a>ln 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114205021.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114205234.png" class="lozad"></p><h4 id="history-指令"><a href="#history-指令" class="headerlink" title="history 指令"></a>history 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114205546.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114205717.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114205846.png" class="lozad"></p><h3 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h3><h4 id="date-指令"><a href="#date-指令" class="headerlink" title="date 指令"></a>date 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114230614.png" class="lozad"></p><h4 id="cal-指令"><a href="#cal-指令" class="headerlink" title="cal 指令"></a>cal 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114230825.png" class="lozad"></p><h4 id="find-指令"><a href="#find-指令" class="headerlink" title="find 指令"></a>find 指令</h4><h4 id="locate-指令"><a href="#locate-指令" class="headerlink" title="locate 指令"></a>locate 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114234131.png" class="lozad"></p><h4 id="grep-指令"><a href="#grep-指令" class="headerlink" title="grep 指令"></a>grep 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200114235254.png" class="lozad"></p><h3 id="压缩文件类"><a href="#压缩文件类" class="headerlink" title="压缩文件类"></a>压缩文件类</h3><h4 id="gzip-gunzip-指令"><a href="#gzip-gunzip-指令" class="headerlink" title="gzip  gunzip 指令"></a>gzip  gunzip 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200115000243.png" class="lozad"></p><h4 id="zip-unzip-指令"><a href="#zip-unzip-指令" class="headerlink" title="zip unzip 指令"></a>zip unzip 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200115001030.png" class="lozad"></p><h4 id="tar-指令"><a href="#tar-指令" class="headerlink" title="tar 指令"></a>tar 指令</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200115002523.png" class="lozad"></p><h2 id="组管理-和-权限管理"><a href="#组管理-和-权限管理" class="headerlink" title="组管理 和 权限管理"></a>组管理 和 权限管理</h2><p>查看文件所有者</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116135342.png" class="lozad"></p><h4 id="改变文件的所有者"><a href="#改变文件的所有者" class="headerlink" title="改变文件的所有者"></a>改变文件的所有者</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116134052.png" class="lozad"></p><p>改变文件所在组</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116135609.png" class="lozad"></p><p>修改用户所在组</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116140201.png" class="lozad"></p><p>权限</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116142104.png" class="lozad"></p><p>修改文件权限</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116150120.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116162224.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116162600.png" class="lozad"></p><p>挂载案例——给虚拟机添加硬盘</p><p>永久挂载</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116164816.png" class="lozad"></p><p>重启后挂载成功，并可卸载。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116165920.png" class="lozad"></p><p>查询系统磁盘使用情况</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116171014.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116171413.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116171940.png" class="lozad"></p><p>查看 “虚拟网络编辑器”    —— VM ，点击 “编辑”，点击“虚拟网络编辑器”</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116173027.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116173331.png" class="lozad"></p><p>设置静态IP   【vim /etc/sysconfig/network-scripts/ifcfg-eth0】</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116175041.png" class="lozad"></p><p>进程</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116191223.png" class="lozad"></p><p>查看sshd进程是否在运行</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116191443.png" class="lozad"></p><p>查看父进程（父进程ID为0表示该进程无父进程）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116191841.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200116192231.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3-1-远程登录——-Xshell-6&quot;&gt;&lt;a href=&quot;#3-1-远程登录——-Xshell-6&quot; class=&quot;headerlink&quot; title=&quot;3.1. 远程登录—— Xshell 6&quot;&gt;&lt;/a&gt;3.1. 远程登录—— Xshell 6&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux 基础篇</title>
    <link href="https://cometorbityh.github.io/2020/01/13/Linux-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://cometorbityh.github.io/2020/01/13/Linux-基础篇/</id>
    <published>2020-01-13T04:20:31.000Z</published>
    <updated>2020-01-13T10:12:31.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-1-Linux-入门"><a href="#2-1-Linux-入门" class="headerlink" title="2.1. Linux 入门"></a>2.1. Linux 入门</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200113140409.png" class="lozad"></p><h2 id="2-2-Linux-安装"><a href="#2-2-Linux-安装" class="headerlink" title="2.2. Linux 安装"></a>2.2. Linux 安装</h2><center>Windows 和 vm 和 CentOS 的关系</center>![](https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200113140233.png)<h3 id="安装VM和CentOS"><a href="#安装VM和CentOS" class="headerlink" title="安装VM和CentOS"></a>安装VM和CentOS</h3><center>安装成功的界面</center><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200113163344.png" class="lozad"></p><h3 id="安装vmtools"><a href="#安装vmtools" class="headerlink" title="安装vmtools"></a>安装vmtools</h3><center>vmtools实现的功能</center><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200113164443.png" class="lozad"></p><hr><h2 id="2-3-Linux-目录结构"><a href="#2-3-Linux-目录结构" class="headerlink" title="2.3. Linux 目录结构"></a>2.3. Linux 目录结构</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200113170922.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200113170727.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2-1-Linux-入门&quot;&gt;&lt;a href=&quot;#2-1-Linux-入门&quot; class=&quot;headerlink&quot; title=&quot;2.1. Linux 入门&quot;&gt;&lt;/a&gt;2.1. Linux 入门&lt;/h2&gt;&lt;p&gt;&lt;img alt data-src=&quot;https://y
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JVM基础（1）</title>
    <link href="https://cometorbityh.github.io/2020/01/12/JVM%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89/"/>
    <id>https://cometorbityh.github.io/2020/01/12/JVM基础（1）/</id>
    <published>2020-01-12T11:55:02.000Z</published>
    <updated>2020-01-13T08:29:01.787Z</updated>
    
    <content type="html"><![CDATA[<p>JVM 简述</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200112222933.png" class="lozad"></p><h1 id="JVM的内存结构"><a href="#JVM的内存结构" class="headerlink" title="JVM的内存结构"></a>JVM的内存结构</h1><h2 id="1-程序计数器（PC）"><a href="#1-程序计数器（PC）" class="headerlink" title="1. 程序计数器（PC）"></a>1. 程序计数器（PC）</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200112224609.png" class="lozad"></p><center><font color="#dd00dd">【程序计数器在JVM中的作用】</font></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java源代码 --（jvm指令）---&gt; 二进制字节码 -- (解释器) ---&gt; 机器码 ---&gt; CPU</span><br><span class="line">当解释器解释完该行字节码后，回到程序计数器中取出下一条指令的地址，继续执行。</span><br></pre></td></tr></table></figure><p><strong>为什么程序计数器是【线程私有】的?</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">程序计数器是线程私有的，1个线程对应1个程序计数器</span><br><span class="line">因为程序计数器是用来记录执行地址的，若多个线程共用同一个程序计数器，会导致程序运行出错，造成混乱。</span><br></pre></td></tr></table></figure><h2 id="2-虚拟机栈"><a href="#2-虚拟机栈" class="headerlink" title="2. 虚拟机栈"></a>2. 虚拟机栈</h2><center><font color="#dd00dd">【栈与栈帧】</font></center>![](https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200112223626.png)<ol><li><p>垃圾回收是否涉及栈内存？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不涉及。</span><br><span class="line">栈内存主要是一次次的方法调用而产生的栈帧内存，</span><br><span class="line">而栈帧内存在每次方法调用结束后会弹出栈，也就是自动回收，</span><br><span class="line">所以不需要垃圾回收来管理栈内存</span><br></pre></td></tr></table></figure></li><li><p>栈内存分配越大越好吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">不是，栈内存划分得越大，只是可以进行更多的方法调用，而不会增强效率。</span><br><span class="line">例如：</span><br><span class="line">1GB内存，</span><br><span class="line">若每个线程（栈）1MB，可以运行1024个线程</span><br><span class="line">若每个线程（栈）2MB，可以运行512个线程，线程数量变少，栈空间变大，效率不变</span><br><span class="line"></span><br><span class="line">【知识扩充】</span><br><span class="line">使用指令 -Xss size 可以指定线程大小，如-Xss1024k</span><br><span class="line">默认情况下，</span><br><span class="line">Linux/macOS/Oracle Solaris的栈内存为1024KB，</span><br><span class="line">windows的栈内存取决于虚拟内存</span><br></pre></td></tr></table></figure></li><li><p>方法内的局部变量是否线程安全？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">是，因为虚拟机栈是线程私有的，方法中的局部变量只属于某个线程，因此是线性安全的</span><br><span class="line">但是如果该局部变量是静态变量，由于静态变量是被共享的，可被修改，时该局部变量就不是线程安全的</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3. 本地方法栈"></a>3. 本地方法栈</h2><h2 id="4-堆"><a href="#4-堆" class="headerlink" title="4. 堆"></a>4. 堆</h2><p>自定义堆内存大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xmx size, 如 -Xmx8m 表示定义堆内存大小为8MB，默认10MB</span><br></pre></td></tr></table></figure><h2 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5. 方法区"></a>5. 方法区</h2><center>JDK1.8之前与JDK1.8之后的方法区的异同</center><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200113162600.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200113162616.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JVM 简述&lt;/p&gt;
&lt;p&gt;&lt;img alt data-src=&quot;https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200112222933.png&quot; class=&quot;lozad&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;JVM的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>集合框架</title>
    <link href="https://cometorbityh.github.io/2019/12/29/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>https://cometorbityh.github.io/2019/12/29/集合框架/</id>
    <published>2019-12-29T07:28:01.000Z</published>
    <updated>2019-12-29T16:47:55.252Z</updated>
    
    <content type="html"><![CDATA[<p># </p><h1 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p> 数组</p><p>优势：查询快，利用所应可以直接定位到元素</p><p>劣势：增删慢，数据长度固定，添加和删除都需要重新创建一个数组，然后将旧数组的元素移动到新数组中</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191229153120.png" class="lozad"></p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>单向链表<br>优势：增删快，只需要修改前一个节点指向的地址即可</p><p>劣势：查询慢，需要从Head凯斯按照地址依次查询，效率低下</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191229154213.png" class="lozad"></p><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191229155458.png" class="lozad"></p><h3 id="散列表的特点"><a href="#散列表的特点" class="headerlink" title="散列表的特点"></a>散列表的特点</h3><p>结合了【数组和链表】两种数据结构的优势</p><h3 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h3><p>哈希，也称散列，哈希，Hash,</p><p>基本原理：把任意长度的输入。通过Hash算法变更成固定长度的输出</p><p>这个【映射的规则】就是对应的【Hash算法】</p><p>原始数据映射后的二进制串就是【哈希值】</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191229160806.png" class="lozad"></p><p>特点：</p><ul><li><p><strong>不可逆</strong>：hash值无法反向推导出原始数据</p></li><li><p>hash算法的执行效率高，长文本也能快速计算除哈希值</p></li><li><p>不同的数据可能会有一样的哈希值，但hash算法的冲突概率更小</p></li><li><p><strong>hash碰撞/hash冲突</strong>：由于hash算法的原理是将输入空间的值映射成hash空间内，而hash值得空间一般小于输入空间，根据抽屉原理，一定会存在不同得输入被映射成相同输出得情况。这就是hash碰撞/hash冲突</p><blockquote><p>抽屉原理：将十个苹果放在9个抽屉里，结果至少有一个抽屉里面放了至少2个苹果，这就是抽屉原理。</p></blockquote></li></ul><p>tableSizeFor：返回一个大于等于当前cap的一个数字，并且该数字一定是2的次方数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;<span class="comment">// n 或 n右移1位</span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;<span class="comment">// n 或 n右移2位</span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;<span class="comment">// n 或 n右移3位</span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;<span class="comment">// n 或 n右移8位</span></span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;<span class="comment">// n 或 n右移16位</span></span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191229220119.png" class="lozad"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">return putVal(hash(key), key, value, false, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hash() ：让key的hash值的高16位也参与路由运算，<strong>增强散列性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>假设传入一个key，其hash值为：(0b 1100 0011 1010 1101   0011 0101 0110 1101)</p><p>​            0b 1100 0011 1010 1101   0011 0101 0110 1101</p><p>异或    0b 0000 0000 0000 0000   1100 0011 1010 1101</p><p><code>-----------------------------------------------</code></p><p>​            0b 1100 0011 1010 1101   1111 0110 1100 0000</p><p>​                        （高16位）            （低16位 异或 高16位）</p><p>这个结果就是算出来的新的hash。</p></blockquote><p>putVal ( )：将node存入散列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">            tab：引用当前hashmap的散列表</span></span><br><span class="line"><span class="comment">            p：表示当前要插入的元素</span></span><br><span class="line"><span class="comment">            n：散列值数组的长度</span></span><br><span class="line"><span class="comment">            i：路由寻址的结果（索引）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 初始化，第一次调用会初始化hashMap的散列表</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 桶位为空，通过hash值和散列表长度定位到的数组的元素是null,</span></span><br><span class="line">    <span class="comment">// 直接将p元素放在这个桶位</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 桶位不为空</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// k：临时key</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 桶位元素的key与要插入的元素的key一致，需要进行替换</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 桶位元素的key与要插入的元素的key不一致</span></span><br><span class="line">        <span class="comment">// 该桶位元素是树节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//该桶位元素是链表节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历这个链表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 如果这个链表节点是最后一个</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 将要添加的节点添加到链表的末尾</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 如果链表的长度达到树化标准了，进行树化操作</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果这个链表节点的key和要插入的节点的key一致，需要进行替换操作</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// p指向下一个，进行遍历操作</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替换操作（相同key的新节点替换旧节点）</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// modCount：散列表结构被修改的次数。替换node的value不计数</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 插入新元素，size自增，若自增后的size大于扩容阈值，则触发扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;
&lt;h1 id=&quot;概念介绍&quot;&gt;&lt;a href=&quot;#概念介绍&quot; class=&quot;headerlink&quot; title=&quot;概念介绍&quot;&gt;&lt;/a&gt;概念介绍&lt;/h1&gt;&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQL练习</title>
    <link href="https://cometorbityh.github.io/2019/12/29/SQL%E7%BB%83%E4%B9%A0/"/>
    <id>https://cometorbityh.github.io/2019/12/29/SQL练习/</id>
    <published>2019-12-28T16:28:51.000Z</published>
    <updated>2019-12-28T17:16:49.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="练习1：查询工资前三的员工"><a href="#练习1：查询工资前三的员工" class="headerlink" title="练习1：查询工资前三的员工"></a>练习1：查询工资前三的员工</h1><p>查询员工表中工资前三的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for employee</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`employee`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employee`</span> (</span><br><span class="line">  <span class="string">`emp_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`emp_name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`emp_salary`</span> <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">6</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of employee</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`employee`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'AAA'</span>, <span class="string">'5000.00'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`employee`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'BBB'</span>, <span class="string">'6000.00'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`employee`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'CCC'</span>, <span class="string">'4000.00'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`employee`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'DDD'</span>, <span class="string">'10000.00'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`employee`</span> <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'EEE'</span>, <span class="string">'5500.00'</span>);</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191229011123.png" class="lozad"></p><p><strong>伪语句</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">工资最高的人：比他工资高的人数为0</span><br><span class="line">工资第二的人：比他工资高的人数为1</span><br><span class="line">工资第三的人：比他工资高的人数为2</span><br></pre></td></tr></table></figure><p>工资前三的人：比他们工资高的不超过3个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">from</span> employee tb1</span><br><span class="line"><span class="keyword">where</span> (工资比这个人高的人数) &lt; <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>完整语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">from</span> employee tb1</span><br><span class="line"><span class="keyword">where</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(emp_salary)</span><br><span class="line"><span class="keyword">from</span> employee tb2</span><br><span class="line"><span class="keyword">where</span> tb1.emp_salary &gt; tb2.emp_salary</span><br><span class="line">)&lt;<span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> emp_salary <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191229011058.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;练习1：查询工资前三的员工&quot;&gt;&lt;a href=&quot;#练习1：查询工资前三的员工&quot; class=&quot;headerlink&quot; title=&quot;练习1：查询工资前三的员工&quot;&gt;&lt;/a&gt;练习1：查询工资前三的员工&lt;/h1&gt;&lt;p&gt;查询员工表中工资前三的员工&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记录学习python遇到的一些问题(坑)</title>
    <link href="https://cometorbityh.github.io/2019/12/25/%E8%AE%B0%E5%BD%95%E5%AD%A6%E4%B9%A0python%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98-%E5%9D%91/"/>
    <id>https://cometorbityh.github.io/2019/12/25/记录学习python遇到的一些问题-坑/</id>
    <published>2019-12-25T09:46:00.000Z</published>
    <updated>2019-12-25T09:48:12.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装scrapy框架"><a href="#安装scrapy框架" class="headerlink" title="安装scrapy框架"></a>安装scrapy框架</h1><p>跟着视频做了好久，再win环境下安装了scrapy框架，没想到在pycharm中居然识别不到，也安装不了，最后才发现，还需要在win的环境变量的path中，添加scrapy的路径。无语。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装scrapy框架&quot;&gt;&lt;a href=&quot;#安装scrapy框架&quot; class=&quot;headerlink&quot; title=&quot;安装scrapy框架&quot;&gt;&lt;/a&gt;安装scrapy框架&lt;/h1&gt;&lt;p&gt;跟着视频做了好久，再win环境下安装了scrapy框架，没想到在pychar
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot 基础</title>
    <link href="https://cometorbityh.github.io/2019/12/19/SpringBoot-%E5%9F%BA%E7%A1%80/"/>
    <id>https://cometorbityh.github.io/2019/12/19/SpringBoot-基础/</id>
    <published>2019-12-19T06:22:46.000Z</published>
    <updated>2019-12-22T14:20:13.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【重要】SpringBoot的启动分析"><a href="#【重要】SpringBoot的启动分析" class="headerlink" title="【重要】SpringBoot的启动分析"></a>【重要】SpringBoot的启动分析</h1><p>进入<code>@SpringBootApplication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), <span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>（1）<code>@SpringBootConfiguration</code>：配置类，是对Spring的<code>@Controller</code>注解进行包装</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line">&gt; <span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">&gt; <span class="meta">@Documented</span></span><br><span class="line">&gt; <span class="meta">@Configuration</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p>（2）<code>@EnableAutoConfiguration</code>：激活自动装配</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; @Target(&#123;ElementType.TYPE&#125;)//作用在类上</span><br><span class="line">&gt; @Retention(RetentionPolicy.RUNTIME)//运行时有效</span><br><span class="line">&gt; @Documented</span><br><span class="line">&gt; @Inherited</span><br><span class="line">&gt; @AutoConfigurationPackage//自动扫描的包的配置</span><br><span class="line">&gt; @Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li><p><code>@AutoConfigurationPackage</code></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line">&gt;   &gt; <span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">&gt;   &gt; <span class="meta">@Documented</span></span><br><span class="line">&gt;   &gt; <span class="meta">@Inherited</span></span><br><span class="line">&gt;   &gt; <span class="comment">// 引入自动配置包的注册器（相当于：&lt;context:component:scan&gt; ）</span></span><br><span class="line">&gt;   &gt; <span class="meta">@Import</span>(&#123;Registrar.class&#125;</span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li><p>进入<code>Registrar.class</code>：<strong>自动配置包就是启动了所在的包</strong>，把当前启动类所在的包注入到spring中，相当于扫描了当前启动类所在的包</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;     &gt; <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line">&gt;     &gt;         Registrar() &#123;</span><br><span class="line">&gt;     &gt;         &#125;</span><br><span class="line">&gt;     &gt; </span><br><span class="line">&gt;     &gt;         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">&gt;     &gt;             AutoConfigurationPackages.register(registry, (<span class="keyword">new</span> AutoConfigurationPackages.PackageImport(metadata)).getPackageName());</span><br><span class="line">&gt;     &gt;         &#125;</span><br><span class="line">&gt;     &gt; </span><br><span class="line">&gt;     &gt;         <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">&gt;     &gt;             <span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> AutoConfigurationPackages.PackageImport(metadata));</span><br><span class="line">&gt;     &gt;         &#125;</span><br><span class="line">&gt;     &gt;     &#125;</span><br><span class="line">&gt;     &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><pre><code>&gt;&gt; </code></pre><ul><li>@Import({AutoConfigurationImportSelector.class})</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="keyword">protected</span> AutoConfigurationImportSelector.<span class="function">AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">&gt;   &gt;         <span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">&gt;   &gt;             <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">&gt;   &gt;         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&gt;   &gt;             AnnotationAttributes attributes = <span class="keyword">this</span>.getAttributes(annotationMetadata);</span><br><span class="line">&gt;   &gt;             </span><br><span class="line">&gt;   &gt;             <span class="comment">// 读取springboot提供的124个配置类，存放在`List&lt;String&gt; configurations` 中</span></span><br><span class="line">&gt;   &gt;             List&lt;String&gt; configurations = <span class="keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">&gt;   &gt;             configurations = <span class="keyword">this</span>.removeDuplicates(configurations);</span><br><span class="line">&gt;   &gt;             Set&lt;String&gt; exclusions = <span class="keyword">this</span>.getExclusions(annotationMetadata, attributes);</span><br><span class="line">&gt;   &gt;             </span><br><span class="line">&gt;   &gt;             <span class="comment">// 根据项目中pom.xml引入的依赖（启动器starter）检查没有用到的配置类</span></span><br><span class="line">&gt;   &gt;             <span class="keyword">this</span>.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">&gt;   &gt;             </span><br><span class="line">&gt;   &gt;             <span class="comment">// 将没有用到的配置类从`configurations`中移除</span></span><br><span class="line">&gt;   &gt;             configurations.removeAll(exclusions);</span><br><span class="line">&gt;   &gt;             configurations = <span class="keyword">this</span>.filter(configurations, autoConfigurationMetadata);</span><br><span class="line">&gt;   &gt;             <span class="keyword">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">&gt;   &gt;             <span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">&gt;   &gt;         &#125;</span><br><span class="line">&gt;   &gt;     &#125;</span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191219151102.png" class="lozad"><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191219151419.png" class="lozad"><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191219151442.png" class="lozad"><blockquote><p>疑问：这124个自动配置类从哪里来？</p><p>读取了spring.factories配置文件</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191219151735.png" class="lozad"></p><p>将该文件中的这些配置类名放在<code>List&lt;String&gt;  configurations</code>中</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191219151812.png" class="lozad"></p></blockquote></blockquote></blockquote><p>（3）@ComponentScan：自动扫描</p><h1 id="【了解】SpringBoot热部署-Lombok"><a href="#【了解】SpringBoot热部署-Lombok" class="headerlink" title="【了解】SpringBoot热部署 + Lombok"></a>【了解】SpringBoot热部署 + Lombok</h1><p>在创建项目时</p><p>选中热部署启动器，可以不用重复启动项目就可以直接看到结果</p><p>选中Lombok启动器，可以不用在实体类中写getter和setter，直接在类名上加上<code>@Data</code>注解即可。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191219152503.png" class="lozad"></p><h1 id="————————"><a href="#————————" class="headerlink" title="————————-"></a>————————-</h1><h1 id="【掌握】SpringBoot的2种配置文件语法"><a href="#【掌握】SpringBoot的2种配置文件语法" class="headerlink" title="【掌握】SpringBoot的2种配置文件语法"></a>【掌握】SpringBoot的2种配置文件语法</h1><p>环境：</p><blockquote><p>启动器（4个）</p><p>web、Lombok、dev-tool</p><p>configuration-processor：加入properties和yml文件的属性提示依赖，即编写属性值时有提示，提示包</p></blockquote><h2 id="1-properties-yml"><a href="#1-properties-yml" class="headerlink" title="(1) properties + yml"></a>(1) properties + yml</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191219160243.png" class="lozad"></p><p>同一目录下，properties的优先级高于yml文件</p><blockquote><p>当properties配置了就不会去yml取值，没配才会去yml中取值</p><p>2中方式都是互补的（比如：properties中没有配置student.id，但是yml中配置了，此时会去yml中获取该数据）</p></blockquote><h2 id="2-配置文件占位符"><a href="#2-配置文件占位符" class="headerlink" title="(2) 配置文件占位符"></a>(2) 配置文件占位符</h2><p>随机数</p><blockquote><p>${random.int}：生成一个int的随机数</p><p>${random.value}：生成一个随机数</p><p>${random.long}：生成一个long的随机数</p><p>${random.int(10)}：生成0~10的随机int数</p><p>${random.int[10,100]}生成10~100的随机int数</p></blockquote><p>IOC容器对象读取</p><blockquote><p>${student.name}：读取IOC容器中的student对象的name属性</p></blockquote><h1 id="【掌握】常用注解"><a href="#【掌握】常用注解" class="headerlink" title="【掌握】常用注解"></a>【掌握】常用注解</h1><h2 id="1-propertySource"><a href="#1-propertySource" class="headerlink" title="(1) @propertySource"></a>(1) @propertySource</h2><p>可以使用自定义名称的配置文件</p><p>上面的注入都是以默认名的properties文件注入的，</p><p>自己创建配置文件时，需要加上propertySource  注解才能生效，否则无法识别</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191219161604.png" class="lozad"></p><h2 id="2-ImportRouurce"><a href="#2-ImportRouurce" class="headerlink" title="(2) @ImportRouurce"></a>(2) @ImportRouurce</h2><p>springboot没有使用spring的xml配置文件，而是使用properties文件或者yml文件</p><p>如果自己创建了spring的xml配置文件，要使用该文件，只需要在启动类中<code>@ImportSource</code>该文件即可</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191219233041.png" class="lozad"></p><h2 id="3-Bean"><a href="#3-Bean" class="headerlink" title="(3) @Bean"></a>(3) @Bean</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220011000.png" class="lozad"></p><h2 id="4-Value"><a href="#4-Value" class="headerlink" title="(4) @Value"></a>(4) @Value</h2><p>特点：主动向IOC容器中获取对象的值</p><p>而@ConfigurationProperties是对象被动的接收IOC容器注入的值</p><blockquote><p>使用@Value只能注入普通的属性【基本数据类型、String、Date、数组、List、Set】</p><p>无法注入复杂的属性【获取到Map 和 自定义对象】</p><p>如果属性是使用驼峰命名法，则不能使用属性名注入</p><ul><li>@Value(“$(student.user-name)”)可以注入</li><li>@Value(“$(student.useName)”)无法注入</li></ul></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220015715.png" class="lozad"></p><p><strong>@Value和COnfigurationProperties的比较</strong></p><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><h1 id="【掌握】profiles配置详解【切换环境】"><a href="#【掌握】profiles配置详解【切换环境】" class="headerlink" title="【掌握】profiles配置详解【切换环境】"></a>【掌握】profiles配置详解【切换环境】</h1><h2 id="1-开发环境与生产环境"><a href="#1-开发环境与生产环境" class="headerlink" title="(1) 开发环境与生产环境"></a>(1) 开发环境与生产环境</h2><p>开发中，通常有2种环境：</p><ul><li>生产环境：项目上线，客户在使用中</li><li>开发环境：程序员在开发</li></ul><p>有时候开发环境和生产环境的配置方法是不一样的，</p><p>如何快速切换？需要用到profiles文件</p><h2 id="2-application-profile-properties：作用在全局"><a href="#2-application-profile-properties：作用在全局" class="headerlink" title="(2) application-{profile}.properties：作用在全局"></a>(2) application-{profile}.properties：作用在全局</h2><p>通过spring.profiles.active激活指定文件</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220110520.png" class="lozad"></p><h2 id="3-Profile：作用在类或方法上"><a href="#3-Profile：作用在类或方法上" class="headerlink" title="(3) @Profile：作用在类或方法上"></a>(3) @Profile：作用在类或方法上</h2><p>测试时会将<strong>当前激活的profile文件对应的Bean</strong>加入到<strong>IOC容器</strong>中</p><blockquote><p>以下例子激活的profile是pro，那么加入到IOC容器中的Bean就是getUser2</p><p>此时自动注入的user也就是 getUser2 了</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220111533.png" class="lozad"></p><h2 id="4-yml文件的多配置块的集成切换"><a href="#4-yml文件的多配置块的集成切换" class="headerlink" title="(4) yml文件的多配置块的集成切换"></a>(4) yml文件的多配置块的集成切换</h2><p>我们也可以不配置profile文件，直接在yml文件中配置</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220131707.png" class="lozad"></p><blockquote><p>注意：<strong>同名profile的优先级高于yml多配置快的集成</strong></p><p>当yml和同名profile文件同时配置（该profile已被激活）时，优先执行properties激活的profile文件</p><p>因此使用yml的多配置快时，需要删除对应的profile文件。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220131117.png" class="lozad"></p></blockquote><h1 id="【掌握】配置文件的优先级-和-外部配置文件加载"><a href="#【掌握】配置文件的优先级-和-外部配置文件加载" class="headerlink" title="【掌握】配置文件的优先级 和 外部配置文件加载"></a>【掌握】配置文件的优先级 和 外部配置文件加载</h1><h2 id="1-项目内部配置文件的优先级"><a href="#1-项目内部配置文件的优先级" class="headerlink" title="(1) 项目内部配置文件的优先级"></a>(1) 项目内部配置文件的优先级</h2><p>springboot默认扫描的配置文件路径：</p><blockquote><p>file:/config/ application.properties（当前项目路径config目录下）</p><p>file:/application.properties（当前项目路径下）</p><p>classpath:/config/application.properties（类路径config目录下）</p><p>classpath:/application.properties（类路径下）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">覆盖：</span><br><span class="line">** 优先级从高到低，高优先级的内容会覆盖低优先级的内容</span><br><span class="line"></span><br><span class="line">互补：</span><br><span class="line">** spring boot会从这四个位置全部加载配置文件</span><br><span class="line">** 当高优先级配置文件属性与低优先级配置文件有【不冲突的属性】</span><br><span class="line">** 则会互补配置</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220132722.png" class="lozad"></p><p>源码：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220133537.png" class="lozad"></p><h2 id="2-外部配置文件"><a href="#2-外部配置文件" class="headerlink" title="(2) 外部配置文件"></a>(2) 外部配置文件</h2><h1 id="————————-1"><a href="#————————-1" class="headerlink" title="————————-"></a>————————-</h1><h1 id="【重点】自动配置原理-Conditional"><a href="#【重点】自动配置原理-Conditional" class="headerlink" title="【重点】自动配置原理 + @Conditional"></a>【重点】自动配置原理 + @Conditional</h1><h2 id="1-自动配置原理"><a href="#1-自动配置原理" class="headerlink" title="(1) 自动配置原理"></a>(1) 自动配置原理</h2><blockquote><p>springboot启动会加载大量的自动配置类</p><p>我们看需要的功能有没有spring boot默认写好的自动配置类</p><p>在来看这个自动配置类配置的组件（只要有我们需要的组件，就无需再配置）</p><p>给容器中自动配置类添加组件时，会从properties类中获取某些属性</p><p>我们就可以在配置文件中指定这些属性的值：</p><ul><li>xxxAutoConfiguration：自动配置类，向容器中添加组件</li><li>xxxProperties：封装配置文件中的默认配置，即修改配置</li></ul></blockquote><h2 id="2-Conditional"><a href="#2-Conditional" class="headerlink" title="(2) @Conditional"></a>(2) @Conditional</h2><p>条件</p><h1 id="————————-2"><a href="#————————-2" class="headerlink" title="————————-"></a>————————-</h1><h1 id="【掌握】Web静态资源的访问规则【直接访问】"><a href="#【掌握】Web静态资源的访问规则【直接访问】" class="headerlink" title="【掌握】Web静态资源的访问规则【直接访问】"></a>【掌握】Web静态资源的访问规则【直接访问】</h1><h2 id="1-静态资源的访问优先级"><a href="#1-静态资源的访问优先级" class="headerlink" title="(1) 静态资源的访问优先级"></a>(1) 静态资源的访问优先级</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220140711.png" class="lozad"></p><h2 id="2-静态资源加载原理"><a href="#2-静态资源加载原理" class="headerlink" title="(2) 静态资源加载原理"></a>(2) 静态资源加载原理</h2><p>打开WebMvcAutoConfiguration类，找到AddRourceHandler方法，然后…找到ResourceProperties（过程太多）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">        <span class="string">"classpath:/META-INF/resources/"</span>, <span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-自定义静态资源路径"><a href="#3-自定义静态资源路径" class="headerlink" title="(3) 自定义静态资源路径"></a>(3) 自定义静态资源路径</h2><p>springboot除了上述4种路径配置的静态资源外，其他路劲的静态资源无法生效</p><p>如何使其生效？</p><blockquote><p> 创建配置类，使用注册器来注册该静态资源文件。</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220142015.png" class="lozad"></p><h2 id="4-webjars的访问配置"><a href="#4-webjars的访问配置" class="headerlink" title="(4) webjars的访问配置"></a>(4) webjars的访问配置</h2><p>网站： <a href="https://www.webjars.org/" target="_blank" rel="noopener">https://www.webjars.org/</a> </p><p>导入依赖：pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.webjars&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jquery&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>资源导入</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220143705.png" class="lozad"></p><p>资源访问</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220143630.png" class="lozad"></p><p><strong>原理：</strong></p><p>与前面的静态资源一样，</p><p>当你的url包含<code>/webjars/**</code>时，会自动访问到<code>classpath:/META-INF/resources/webjars/</code>下的资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">               logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">               CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">               <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">                   <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">               <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">                   <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h1 id="【掌握】thymeleaf【间接访问-跳转】"><a href="#【掌握】thymeleaf【间接访问-跳转】" class="headerlink" title="【掌握】thymeleaf【间接访问_跳转】"></a>【掌握】thymeleaf【间接访问_跳转】</h1><p>thymeleaf是一个模板引擎，可以完全替代JSP（SpringBoot不支持JSP）</p><h2 id="1-thymeleaf的文件存放位置-访问"><a href="#1-thymeleaf的文件存放位置-访问" class="headerlink" title="(1) thymeleaf的文件存放位置 + 访问"></a>(1) thymeleaf的文件存放位置 + 访问</h2><p>环境搭建</p><p>引入thymeleaf的依赖（启动器）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220144507.png" class="lozad"></p><h3 id="1-1-thymeleaf-包在-SpringBoot-的位置"><a href="#1-1-thymeleaf-包在-SpringBoot-的位置" class="headerlink" title="(1-1) thymeleaf 包在 SpringBoot 的位置"></a>(1-1) thymeleaf 包在 SpringBoot 的位置</h3><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220144955.png" class="lozad"></p><h3 id="1-2-访问静态资源"><a href="#1-2-访问静态资源" class="headerlink" title="(1-2) 访问静态资源"></a>(1-2) 访问静态资源</h3><p>thymeleaf必须放在 templates 目录下，而如何访问到templates 下的静态资源</p><p>在之前，我们自己创建的静态资源文件夹mystatic，只需要注册就行</p><p>但是templates 不一样，templates 就像以前的WEB-INF一样，直接访问其中的文件是访问不到的，需要通过控制器来请求转发才能访问到</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220145934.png" class="lozad"></p><h3 id="1-3-原理"><a href="#1-3-原理" class="headerlink" title="(1-3) 原理"></a>(1-3) 原理</h3><p>打开ThymeleafAutoConfiguration类，打开ThymeleafProperties.class</p><blockquote><p>默认前缀  <code>classpath:/templates/</code></p><p>默认后缀  <code>.html</code></p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220150045.png" class="lozad"></p><h3 id="1-4-yml修改thymeleaf的文件位置"><a href="#1-4-yml修改thymeleaf的文件位置" class="headerlink" title="(1-4) yml修改thymeleaf的文件位置"></a>(1-4) yml修改thymeleaf的文件位置</h3><p>也可以通过配置文件修改thymeleaf的文件的前后缀</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220151529.png" class="lozad"></p><h2 id="2-thymeleaf的基本使用"><a href="#2-thymeleaf的基本使用" class="headerlink" title="(2) thymeleaf的基本使用"></a>(2) thymeleaf的基本使用</h2><h3 id="2-1-引入命名空间"><a href="#2-1-引入命名空间" class="headerlink" title="(2-1) 引入命名空间"></a>(2-1) 引入命名空间</h3><p>在静态页面引入命名空间：<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code></p><h3 id="2-2-使用占位符获取数据"><a href="#2-2-使用占位符获取数据" class="headerlink" title="(2-2) 使用占位符获取数据"></a>(2-2) 使用占位符获取数据</h3><p>链接URL表达式：@{}   访问url</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; th:href=&quot;@&#123;/layui/css/layui.css&#125;&quot;</span><br><span class="line">&gt; &lt;img th:src=&quot;@&#123;/layui/images/a.jpg&#125;&quot;&gt;</span><br><span class="line">&gt; &lt;form th:action=&quot;@&#123;/user/getuser&#125;&quot;&gt;&lt;/form&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>变量表达式：${}   访问变量（比如model中的）</p><p>信息表达式：#{}   访问常量（比如在配置文件中的）</p><blockquote><p> 访问带参数的消息：#{page.welcome(‘1’,’2’)}</p></blockquote><h3 id="2-3-实例"><a href="#2-3-实例" class="headerlink" title="(2-3) 实例"></a>(2-3) 实例</h3><blockquote><p>读取配置文件中的常量</p><p>读取控制器中的model的数据（变量 + list）</p></blockquote><p>引入layui</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220163259.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220163756.png" class="lozad"></p><p>国际化配置（防止获取不到数据）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">I18NConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResourceBundleMessageSource <span class="title">messageSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        <span class="comment">// 是否加载消息</span></span><br><span class="line">        messageSource.setUseCodeAsDefaultMessage(<span class="keyword">true</span>);</span><br><span class="line">        messageSource.setFallbackToSystemLocale(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 设置spring读取的配置文件的名字，前缀名为user的</span></span><br><span class="line">        messageSource.setBasename(<span class="string">"user"</span>);</span><br><span class="line">        messageSource.setDefaultEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        messageSource.setCacheSeconds(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/show"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"admin"</span>,<span class="string">"超级管理员"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"place"</span>,<span class="string">"人员管理系统"</span>);</span><br><span class="line"></span><br><span class="line">        student student = <span class="keyword">new</span> student(<span class="number">10002</span>, <span class="string">"老王"</span>, <span class="keyword">true</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        model.addAttribute(<span class="string">"student"</span>,student);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">4</span> ; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> student(<span class="number">1000</span>*(i+<span class="number">1</span>),<span class="string">"小明"</span>+i,<span class="keyword">true</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"show"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//res.layui.com/layui/dist/css/layui.css"</span>  <span class="attr">th:href</span>=<span class="string">"@&#123;/layui/css/layui.css&#125;"</span> <span class="attr">media</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--获取常量，访问带参数的消息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;page.welcome('1','2')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;admin&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> |</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;place&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--获取常量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-card"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-card-header"</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-card-body"</span>&gt;</span></span><br><span class="line">            用户ID：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"#&#123;user.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-card-body"</span>&gt;</span></span><br><span class="line">            用户姓名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"#&#123;user.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--获取Model，变量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-card"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-card-header"</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-card-body"</span>&gt;</span></span><br><span class="line">            学生ID：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;student.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-card-body"</span>&gt;</span></span><br><span class="line">            学生姓名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;student.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-card-body"</span>&gt;</span></span><br><span class="line">            学生性别：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;student.sex?'男':'女'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-card-body"</span>&gt;</span></span><br><span class="line">            学生生日：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(student.date,'yyyy-MM-dd HH:mm:ss')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--获取list--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"layui-table"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">colgroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">col</span> <span class="attr">width</span>=<span class="string">"150"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">col</span> <span class="attr">width</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>昵称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"stu:$&#123;list&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;stu.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;stu.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;stu.sex?'男':'女'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(stu.date,'yyyy-MM-dd HH:mm:ss')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取数据</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> admin = <span class="string">'[[$&#123;admin&#125;]]'</span>;</span></span><br><span class="line">        alert(admin);</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> place = [[$&#123;place&#125;]];</span></span><br><span class="line">        alert(place);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220164643.png" class="lozad"></p><h1 id="【掌握】AOP开发"><a href="#【掌握】AOP开发" class="headerlink" title="【掌握】AOP开发"></a>【掌握】AOP开发</h1><p><strong>环境</strong></p><p>加入AOP依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220170859.png" class="lozad"></p><h1 id="【掌握】管理-扩展-SpringMVC组件"><a href="#【掌握】管理-扩展-SpringMVC组件" class="headerlink" title="【掌握】管理 + 扩展 SpringMVC组件"></a>【掌握】管理 + 扩展 SpringMVC组件</h1><h2 id="1-管理SpringMVC组件"><a href="#1-管理SpringMVC组件" class="headerlink" title="(1) 管理SpringMVC组件"></a>(1) 管理SpringMVC组件</h2><h3 id="1-1-使用springmvc时要配置的组件"><a href="#1-1-使用springmvc时要配置的组件" class="headerlink" title="(1-1) 使用springmvc时要配置的组件"></a>(1-1) 使用springmvc时要配置的组件</h3><ol><li><strong>前端控制器</strong></li><li><strong>控制器映射器 + 适配器</strong><ol><li>映射器 Map&lt;Set<string>,Object&gt;<ol><li>Set<string> 存放资源地址  ： @RequestMapping (value={“hello1”,”hello2”})</string></li><li>Object 存放方法对象和方法所在的对象的对象<ol><li>执行方法 method.invoke(obj,args)</li></ol></li></ol></string></li><li>适配器<ol><li>@Controller</li><li>实现Controller接口</li><li>实现 HttpRequestHandler 接口</li></ol></li></ol></li><li><strong>视图解析器</strong><ol><li>InternalResourceViewResolver</li></ol></li><li><strong>文件上传</strong></li><li><strong>拦截器</strong></li></ol><h3 id="1-2-springboot自动管理springmvc的源码分析"><a href="#1-2-springboot自动管理springmvc的源码分析" class="headerlink" title="(1-2) springboot自动管理springmvc的源码分析"></a>(1-2) springboot自动管理springmvc的源码分析</h3><h4 id="lt-1-gt-前端控制器的自动管理"><a href="#lt-1-gt-前端控制器的自动管理" class="headerlink" title="&lt;1&gt;  前端控制器的自动管理"></a>&lt;1&gt;  前端控制器的自动管理</h4><h5 id="找到WebMvcAutoConfiguration"><a href="#找到WebMvcAutoConfiguration" class="headerlink" title="找到WebMvcAutoConfiguration"></a>找到WebMvcAutoConfiguration</h5><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220172824.png" class="lozad"></p><h5 id="打开DispatcherServletAutoConfiguration"><a href="#打开DispatcherServletAutoConfiguration" class="headerlink" title="打开DispatcherServletAutoConfiguration"></a>打开DispatcherServletAutoConfiguration</h5><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220173038.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220173107.png" class="lozad"></p><h4 id="lt-2-gt-控制器的自动管理【自定义的-Controller】"><a href="#lt-2-gt-控制器的自动管理【自定义的-Controller】" class="headerlink" title="&lt;2&gt; 控制器的自动管理【自定义的 Controller】"></a>&lt;2&gt; 控制器的自动管理【自定义的 Controller】</h4><h5 id="自动扫描"><a href="#自动扫描" class="headerlink" title="自动扫描"></a><strong>自动扫描</strong></h5><p>​    |– 默认扫描路径：启动类所在的包及其自子包</p><h5 id="若不在启动类所在包及其子包下"><a href="#若不在启动类所在包及其子包下" class="headerlink" title="若不在启动类所在包及其子包下"></a><strong>若不在启动类所在包及其子包下</strong></h5><p>​    |– 自定义扫描路径：使用@ComponentScan(basePackage={“com.yang.controller”})可以自定义添加扫描路径</p><h4 id="lt-3-gt-视图解析器的自动管理"><a href="#lt-3-gt-视图解析器的自动管理" class="headerlink" title="&lt;3&gt; 视图解析器的自动管理"></a>&lt;3&gt; 视图解析器的自动管理</h4><h5 id="找到WebMvcAutoConfiguration-1"><a href="#找到WebMvcAutoConfiguration-1" class="headerlink" title="找到WebMvcAutoConfiguration"></a>找到WebMvcAutoConfiguration</h5><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220173648.png" class="lozad"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 配置 InternalResourceViewResolver 视图解析器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> InternalResourceViewResolver <span class="title">defaultViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">          resolver.setPrefix(<span class="keyword">this</span>.mvcProperties.getView().getPrefix());</span><br><span class="line">          resolver.setSuffix(<span class="keyword">this</span>.mvcProperties.getView().getSuffix());</span><br><span class="line">          <span class="keyword">return</span> resolver;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 配置 BeanNameViewResolver 视图解析器</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="meta">@ConditionalOnBean</span>(&#123;View.class&#125;)</span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> BeanNameViewResolver <span class="title">beanNameViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          BeanNameViewResolver resolver = <span class="keyword">new</span> BeanNameViewResolver();</span><br><span class="line">          resolver.setOrder(<span class="number">2147483637</span>);</span><br><span class="line">          <span class="keyword">return</span> resolver;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置真正的试图解析器【作用：收集容器中拥有的试图解析器】</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="meta">@ConditionalOnBean</span>(&#123;ViewResolver.class&#125;)</span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean</span>(</span><br><span class="line">          name = &#123;<span class="string">"viewResolver"</span>&#125;,</span><br><span class="line">          value = &#123;ContentNegotiatingViewResolver.class&#125;</span><br><span class="line">      )</span><br><span class="line">      <span class="function"><span class="keyword">public</span> ContentNegotiatingViewResolver <span class="title">viewResolver</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">          ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> ContentNegotiatingViewResolver();</span><br><span class="line">          resolver.setContentNegotiationManager((ContentNegotiationManager)beanFactory.getBean(ContentNegotiationManager.class));</span><br><span class="line">          resolver.setOrder(-<span class="number">2147483648</span>);</span><br><span class="line">          <span class="keyword">return</span> resolver;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h5 id="进入-ContentNegotiatingViewResolver"><a href="#进入-ContentNegotiatingViewResolver" class="headerlink" title="进入 ContentNegotiatingViewResolver"></a>进入 ContentNegotiatingViewResolver</h5><p>​    |– ContentNegotiatingViewResolver是一个<strong>视图解析器的收集器</strong></p><p>​    |– 默认有4个视图解析器</p><p>​    |– 只要IOC容器中实现了ViewResolver接口的对象，都会被收集起来，如之前配置的ThymeleafViewResolver</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221133917.png" class="lozad"></p><h5 id="自定义前缀和后缀"><a href="#自定义前缀和后缀" class="headerlink" title="自定义前缀和后缀"></a>自定义前缀和后缀</h5><p>默认的前缀和后缀均为空，因此为欧盟可以在主配值文件中，自定义前缀和后缀</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span> <span class="comment"># 开启thymeleaf</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  mvc:</span>            </span><br><span class="line"><span class="attr">    view:</span><span class="comment"># 配置前缀后缀</span></span><br><span class="line"><span class="attr">      prefix:</span> <span class="string">/WEB-INF/views/</span></span><br><span class="line"><span class="attr">      suffix:</span> <span class="string">.html</span></span><br></pre></td></tr></table></figure><h4 id="lt-4-gt-文件上传"><a href="#lt-4-gt-文件上传" class="headerlink" title="&lt;4&gt; 文件上传"></a>&lt;4&gt; 文件上传</h4><h5 id="打开-MultipartAutoConfiguration"><a href="#打开-MultipartAutoConfiguration" class="headerlink" title="打开 MultipartAutoConfiguration"></a>打开 MultipartAutoConfiguration</h5><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221135515.png" class="lozad"></p><h5 id="打开-MultipartProperties"><a href="#打开-MultipartProperties" class="headerlink" title="打开 MultipartProperties"></a>打开 MultipartProperties</h5><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221135655.png" class="lozad"></p><h4 id="lt-5-gt-静态资源的访问"><a href="#lt-5-gt-静态资源的访问" class="headerlink" title="&lt;5&gt; 静态资源的访问"></a>&lt;5&gt; 静态资源的访问</h4><p>见 【Web静态资源的访问规则】</p><h4 id="lt-6-gt-欢迎页面"><a href="#lt-6-gt-欢迎页面" class="headerlink" title="&lt;6&gt; 欢迎页面"></a>&lt;6&gt; 欢迎页面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">            WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(<span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, <span class="keyword">this</span>.getWelcomePage(), <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">            welcomePageHandlerMapping.setInterceptors(<span class="keyword">this</span>.getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">            <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            String[] locations = WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">            <span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml).filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">"index.html"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>默认访问静态资源下的 <strong>static文件的index.html</strong>页面</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220140711.png" class="lozad"></p><h4 id="lt-7-gt-消息转化"><a href="#lt-7-gt-消息转化" class="headerlink" title="&lt;7&gt; 消息转化"></a>&lt;7&gt; 消息转化</h4><p>接收页面参数并格式化</p><p>找到 <strong>WebMvcAutoConfiguration</strong> 中的 addFormatters ()</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221140411.png" class="lozad"></p><p>进入addBean</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221140349.png" class="lozad"></p><p>这些注册器能自动将页面表单提交过来的数据，进行自动转换和封装</p><h4 id="lt-8-gt-格式化转化"><a href="#lt-8-gt-格式化转化" class="headerlink" title="&lt;8&gt; 格式化转化"></a>&lt;8&gt; 格式化转化</h4><p>接收页面参数并按照某种格式格式化，如日期</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span> <span class="comment"># 开启thymeleaf</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 配置日期格式化，指从前台到后台的格式化</span></span><br><span class="line">  <span class="comment"># 一般不使用</span></span><br><span class="line"><span class="attr">  mvc:</span></span><br><span class="line"><span class="attr">    date-format:</span> <span class="string">yyy-MM-dd</span> <span class="attr">HH:mm:ss</span></span><br></pre></td></tr></table></figure><h2 id="2-扩展SpringMVC组件"><a href="#2-扩展SpringMVC组件" class="headerlink" title="(2) 扩展SpringMVC组件"></a>(2) 扩展SpringMVC组件</h2><p>环境搭建：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221142945.png" class="lozad"></p><h3 id="2-1-在容器中注册视图控制器【页面跳转】"><a href="#2-1-在容器中注册视图控制器【页面跳转】" class="headerlink" title="(2-1) 在容器中注册视图控制器【页面跳转】"></a>(2-1) 在容器中注册视图控制器【页面跳转】</h3><p>当页面跳转时，按照之前的做法，应当是在Controller中创建一个空方法跳转，</p><p>现在我们可以创建一个MvcConfig类，实现WebMvcConfigurer，重写AddViewController方法来跳转。</p><h4 id="通过控制器跳转"><a href="#通过控制器跳转" class="headerlink" title="通过控制器跳转"></a>通过控制器跳转</h4><p>之前我们通过控制器来请求转发和重定向，写的都是空方法，很消耗内存</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191220145934.png" class="lozad"></p><h4 id="通过配置类跳转"><a href="#通过配置类跳转" class="headerlink" title="通过配置类跳转"></a>通过配置类跳转</h4><p>可以都定义在一个配置类中，进行请求转发和重定向</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221144835.png" class="lozad"></p><h3 id="2-2-日期格式化"><a href="#2-2-日期格式化" class="headerlink" title="(2-2) 日期格式化"></a>(2-2) 日期格式化</h3><p>yml中配置的事件格式是全局有效的，若类型中也配置了时间格式，则以类型本身为准</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221150917.png" class="lozad"></p><h3 id="2-3-自定义格式化器"><a href="#2-3-自定义格式化器" class="headerlink" title="(2-3) 自定义格式化器"></a>(2-3) 自定义格式化器</h3><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221151813.png" class="lozad"></p><p><strong>普通写法</strong></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221152644.png" class="lozad"></p><p><strong>JackSon 写法（常用）</strong></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221152815.png" class="lozad"></p><p><strong>fastJson 写法 （了解）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（未完）</p><h3 id="2-4-拦截器"><a href="#2-4-拦截器" class="headerlink" title="(2-4) 拦截器"></a>(2-4) 拦截器</h3><ol><li><strong>创建拦截器</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"preHandle..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postHandle..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterCompletion..."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>注册拦截器</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        MyInterceptor myInterceptor = <span class="keyword">new</span> MyInterceptor();</span><br><span class="line">        registry.addInterceptor(myInterceptor)  <span class="comment">// 注册拦截器&lt;bean&gt;</span></span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>)         <span class="comment">// 拦截的路径，可配置多个</span></span><br><span class="line">                .excludePathPatterns(<span class="string">"/getUser1"</span>);  <span class="comment">// 放行的路径，可配置多个</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>测试</strong></li></ol><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221154333.png" class="lozad"></p><h1 id="【难点】内嵌web服务器的加载原理"><a href="#【难点】内嵌web服务器的加载原理" class="headerlink" title="【难点】内嵌web服务器的加载原理"></a>【难点】内嵌web服务器的加载原理</h1><p>springboot内嵌了tomcat，那么springboot是如何管理内置的服务器的？</p><h2 id="1-tomcat启动分析"><a href="#1-tomcat启动分析" class="headerlink" title="(1) tomcat启动分析"></a>(1) tomcat启动分析</h2><p>进入 ServletWebServerFactoryAutoConfiguration</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221160127.png" class="lozad"></p><p>进入EmbeddedTomcat</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221155558.png" class="lozad"></p><p>进入 TomcatServletWebServerFactory ，找到 getWebServer</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221155731.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221155801.png" class="lozad"></p><p>进入 TomcatWebServer</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221155437.png" class="lozad"></p><h2 id="2-启动内嵌Jetty服务器"><a href="#2-启动内嵌Jetty服务器" class="headerlink" title="(2) 启动内嵌Jetty服务器"></a>(2) 启动内嵌Jetty服务器</h2><p>springboot中可将默认使用的内嵌服务器tomcat改为jetty</p><h3 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h3><p>在pom.xml中排除tomcat依赖，添加Jetty的启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191221160701.png" class="lozad"></p><h1 id="【掌握】Web三大组件的注册"><a href="#【掌握】Web三大组件的注册" class="headerlink" title="【掌握】Web三大组件的注册"></a>【掌握】Web三大组件的注册</h1><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h3><blockquote><p>@WebServlet()</p><p><servlet></servlet></p><p><servlet-mapping></servlet-mapping></p></blockquote><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><blockquote><p>@WebFilter()</p><p><filter></filter></p><p><filter-mapping></filter-mapping></p></blockquote><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><blockquote><p>@WebListener</p><listener>    <p><listener-class>    </listener-class></p></listener></blockquote><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><h3 id="注册Servlet"><a href="#注册Servlet" class="headerlink" title="注册Servlet"></a>注册Servlet</h3><p>创建Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        String message1 = config.getInitParameter(<span class="string">"m1"</span>);</span><br><span class="line">        String message2 = config.getInitParameter(<span class="string">"m2"</span>);</span><br><span class="line">        System.out.println(message1 + <span class="string">""</span> + message2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello UserServlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserWebConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建UserServlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"userServlet"</span>)</span><br><span class="line">    <span class="meta">@ConditionalOnClass</span>(value = &#123;UserServlet.class&#125;)    <span class="comment">//项目中要有UserServlet类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserServlet <span class="title">userServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserServlet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册UserServlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean</span>(value = &#123;UserServlet.class&#125;) <span class="comment">//IOC容器中要有UserServlet类型的bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;UserServlet&gt; <span class="title">servletServletRegistrationBeanUserServlet</span><span class="params">(UserServlet userServlet)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建注册器对象</span></span><br><span class="line">        ServletRegistrationBean&lt;UserServlet&gt; registrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;();</span><br><span class="line">        <span class="comment">// 注入Servlet</span></span><br><span class="line">        registrationBean.setServlet(userServlet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"m1"</span>,<span class="string">"你好，我是m1"</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"m2"</span>,<span class="string">"你好，我是m2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置映射</span></span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">"/user1.action"</span>,<span class="string">"/user2.action"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191222150703.png" class="lozad"></p><h3 id="注册Filter"><a href="#注册Filter" class="headerlink" title="注册Filter"></a>注册Filter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        String m1 = filterConfig.getInitParameter(<span class="string">"m1"</span>);</span><br><span class="line">        String m2 = filterConfig.getInitParameter(<span class="string">"m2"</span>);</span><br><span class="line">        System.out.println(m1 + <span class="string">"---"</span> + m2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doFilter..."</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse); <span class="comment">//放行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建AppFilter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"appFilter"</span>)</span><br><span class="line">    <span class="meta">@ConditionalOnClass</span>(value = &#123;AppFilter.class&#125;)    <span class="comment">//项目中要有AppFilter类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AppFilter <span class="title">AppFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册UserServlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean</span>(value = &#123;AppFilter.class&#125;) <span class="comment">//IOC容器中要有UserServlet类型的bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;AppFilter&gt; <span class="title">filterFilterRegistrationBeanAppFilter</span><span class="params">(AppFilter appFilter)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建注册器对象</span></span><br><span class="line">        FilterRegistrationBean&lt;AppFilter&gt; registrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        <span class="comment">// 注入filter</span></span><br><span class="line">        registrationBean.setFilter(appFilter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"m1"</span>,<span class="string">"filter -- m1"</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"m2"</span>,<span class="string">"filter -- m2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置映射</span></span><br><span class="line">        registrationBean.addServletNames(<span class="string">"userServlet"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191222151827.png" class="lozad"></p><h3 id="注册Listener"><a href="#注册Listener" class="headerlink" title="注册Listener"></a>注册Listener</h3><p>作用：监听三大作用域</p><h4 id="监听器的分类"><a href="#监听器的分类" class="headerlink" title="监听器的分类"></a>监听器的分类</h4><p><strong>ServletContext</strong></p><p>​    |– ServletContextListener    ServletContextAttributeListener</p><p><strong>HttpSession</strong></p><p>​    |– HttpSessionListener    HttpSessionAttributeListener</p><p><strong>ServletRequest</strong></p><p>​    |– ServletRequestListener    ServletRequestAttributeListener</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>以ServletContextListener为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        String m1 = filterConfig.getInitParameter(<span class="string">"m1"</span>);</span><br><span class="line">        String m2 = filterConfig.getInitParameter(<span class="string">"m2"</span>);</span><br><span class="line">        System.out.println(m1 + <span class="string">"---"</span> + m2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doFilter..."</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse); <span class="comment">//放行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"web"</span>)</span><br><span class="line"><span class="meta">@Data</span>   <span class="comment">//提供获取appListenerEnabled的get方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserWebConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean appListenerEnable = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建UserServlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"userServlet"</span>)</span><br><span class="line">    <span class="meta">@ConditionalOnClass</span>(value = &#123;UserServlet.class&#125;)    <span class="comment">//项目中要有UserServlet类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserServlet <span class="title">userServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserServlet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册UserServlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean</span>(value = &#123;UserServlet.class&#125;) <span class="comment">//IOC容器中要有UserServlet类型的bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;UserServlet&gt; <span class="title">servletServletRegistrationBeanUserServlet</span><span class="params">(UserServlet userServlet)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建注册器对象</span></span><br><span class="line">        ServletRegistrationBean&lt;UserServlet&gt; registrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;();</span><br><span class="line">        <span class="comment">// 注入Servlet</span></span><br><span class="line">        registrationBean.setServlet(userServlet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"m1"</span>,<span class="string">"你好，我是m1"</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"m2"</span>,<span class="string">"你好，我是m2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置映射</span></span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">"/user1.action"</span>,<span class="string">"/user2.action"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建AppFilter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"appFilter"</span>)</span><br><span class="line">    <span class="meta">@ConditionalOnClass</span>(value = &#123;AppFilter.class&#125;)    <span class="comment">//项目中要有AppFilter类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AppFilter <span class="title">AppFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册UserServlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean</span>(value = &#123;AppFilter.class&#125;) <span class="comment">//IOC容器中要有UserServlet类型的bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;AppFilter&gt; <span class="title">filterFilterRegistrationBeanAppFilter</span><span class="params">(AppFilter appFilter)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建注册器对象</span></span><br><span class="line">        FilterRegistrationBean&lt;AppFilter&gt; registrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        <span class="comment">// 注入filter</span></span><br><span class="line">        registrationBean.setFilter(appFilter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"m1"</span>,<span class="string">"filter -- m1"</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"m2"</span>,<span class="string">"filter -- m2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置映射</span></span><br><span class="line">        registrationBean.addServletNames(<span class="string">"userServlet"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建AppListener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"appListener"</span>)</span><br><span class="line">    <span class="meta">@ConditionalOnClass</span>(value = &#123;AppListener.class&#125;)    <span class="comment">//项目中要有AppListener类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AppListener <span class="title">appFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册UserServlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean</span>(value = &#123;AppListener.class&#125;) <span class="comment">//IOC容器中要有UserServlet类型的bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean&lt;AppListener&gt; <span class="title">servletListenerRegistrationBean</span> <span class="params">(AppListener appListener)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建注册器对象</span></span><br><span class="line">        ServletListenerRegistrationBean&lt;AppListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;();</span><br><span class="line">        <span class="comment">// 注入listener</span></span><br><span class="line">        registrationBean.setListener(appListener);</span><br><span class="line">        registrationBean.setEnabled(appListenerEnable);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191222153610.png" class="lozad"></p><p>数据源配置 及 自动管理</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191222154151.png" class="lozad"></p><p>配置url：</p><p>使用DriverManagerDataSource</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191222155550.png" class="lozad"></p><p>使用DBCP</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191222155944.png" class="lozad"></p><p>使用druid【使用官方提供的】</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置数据源</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jbdc:mysql://127.0.0.1:3306/boot_demo</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        initial-size:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">        validation-query:</span> <span class="string">select</span> <span class="string">l</span></span><br><span class="line"><span class="attr">      stat-view-servlet:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        login-username:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">        login-password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">        allow:</span></span><br><span class="line"><span class="attr">        deny:</span></span><br><span class="line"><span class="attr">        url-pattern:</span> <span class="string">"/druid/*"</span></span><br></pre></td></tr></table></figure><p>排除默认数据源【启动类中】</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191222163647.png" class="lozad"></p><p>测试【运行启动类】</p><p>输入 <a href="http://localhost:8080/druid" target="_blank" rel="noopener">http://localhost:8080/druid</a></p><p>输入账号密码：admin  admin</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191222163754.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;【重要】SpringBoot的启动分析&quot;&gt;&lt;a href=&quot;#【重要】SpringBoot的启动分析&quot; class=&quot;headerlink&quot; title=&quot;【重要】SpringBoot的启动分析&quot;&gt;&lt;/a&gt;【重要】SpringBoot的启动分析&lt;/h1&gt;&lt;p&gt;进入
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MYSQL高级篇</title>
    <link href="https://cometorbityh.github.io/2019/12/18/MYSQL%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
    <id>https://cometorbityh.github.io/2019/12/18/MYSQL高级篇/</id>
    <published>2019-12-17T17:03:51.000Z</published>
    <updated>2019-12-17T17:07:48.158Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式——工厂模式</title>
    <link href="https://cometorbityh.github.io/2019/12/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://cometorbityh.github.io/2019/12/16/设计模式——工厂模式/</id>
    <published>2019-12-16T07:46:48.000Z</published>
    <updated>2019-12-16T08:29:46.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂模式的作用"><a href="#工厂模式的作用" class="headerlink" title="工厂模式的作用"></a>工厂模式的作用</h1><p>实现了创建者和调用者的分离</p><h1 id="核心本质"><a href="#核心本质" class="headerlink" title="核心本质"></a>核心本质</h1><p>实例化对象不用new，使用工厂方法代替</p><p>将选择实现类，创建对象统一管理和控制，从而将调用者和实现类解耦</p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>简单工厂模式</p><ul><li>用来生产统一等级结构中的任意产品（对于增加新产品，需要修改已有代码）</li></ul><p>工厂方法模式</p><ul><li>用来生产统一等级结构中的固定产品（ 支持增加任意产品）</li></ul><p>抽象工厂模式</p><ul><li>围绕一个超级工厂创建其他工厂，该超级工厂被称为其他工厂的工厂</li></ul><h1 id="遵循的原则（OOP七大原则）"><a href="#遵循的原则（OOP七大原则）" class="headerlink" title="遵循的原则（OOP七大原则）"></a>遵循的原则（OOP七大原则）</h1><p>1）开闭原则：一个软件的实体应当对扩展开放，对修改关闭（不修改原有类，只扩展新类）</p><p>2）依赖倒转原则：要针对接口编程，不针对实现编程</p><p>3）迪米特法则：只与你直接的朋友通信，避免和陌生人通信</p><h2 id="简单工厂模式-静态工厂模式"><a href="#简单工厂模式-静态工厂模式" class="headerlink" title="简单工厂模式/静态工厂模式"></a>简单工厂模式/静态工厂模式</h2><p>对于增加新产品，需要修改已有代码</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216161122.png" class="lozad"></p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>优点：不破坏原有代码，就可增加新产品</p><p>缺点：复杂度提高，每添加一个新产品就要写更多类</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216162616.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;工厂模式的作用&quot;&gt;&lt;a href=&quot;#工厂模式的作用&quot; class=&quot;headerlink&quot; title=&quot;工厂模式的作用&quot;&gt;&lt;/a&gt;工厂模式的作用&lt;/h1&gt;&lt;p&gt;实现了创建者和调用者的分离&lt;/p&gt;
&lt;h1 id=&quot;核心本质&quot;&gt;&lt;a href=&quot;#核心本质&quot; cl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式——单例模式</title>
    <link href="https://cometorbityh.github.io/2019/12/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://cometorbityh.github.io/2019/12/16/设计模式——单例模式/</id>
    <published>2019-12-16T06:26:59.000Z</published>
    <updated>2019-12-16T07:46:22.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式的核心作用"><a href="#单例模式的核心作用" class="headerlink" title="单例模式的核心作用"></a>单例模式的核心作用</h1><ul><li>保证一个类只有一个实例，并提供一个访问该实例的全局访问点</li></ul><h1 id="单例模式的优点"><a href="#单例模式的优点" class="headerlink" title="单例模式的优点"></a>单例模式的优点</h1><p>1）只生成一个实例，减少了系统性能开销</p><p>2）可以在系统设置全局的访问点，优化共享资源访问</p><h1 id="常见单例模式的实现方法"><a href="#常见单例模式的实现方法" class="headerlink" title="常见单例模式的实现方法"></a>常见单例模式的实现方法</h1><p><strong>饿汉式（线程安全，调用效率高，不可延时加载）</strong></p><p><strong>懒汉式（线程安全，调用效率不高，可延时加载）</strong></p><p>DCL懒汉式（因JVM底层内部模型原因，该方法可能会出现问题，不推荐）</p><p>饿汉式改进：静态内部类式（线程安全，调用效率高，可延时加载）</p><p>枚举单例（线程安全，调用效率高，不可延时加载）</p><h1 id="举例实现"><a href="#举例实现" class="headerlink" title="举例实现"></a>举例实现</h1><h2 id="（1）饿汉式"><a href="#（1）饿汉式" class="headerlink" title="（1）饿汉式"></a>（1）饿汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器私有化，使外部无法创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 私有化实例，加上static后，类初始化时就会加载该对象，因此称为饿汉式单例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo01 instance = <span class="keyword">new</span> SingletonDemo01();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供获取该对象的方法（外部类可以通过这个方法获得实例）</span></span><br><span class="line">    <span class="comment">// 没有 synchronized 关键字，效率更高！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo01 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo01Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取该类对象</span></span><br><span class="line">        <span class="comment">//new SingletonDemo01();  //无法通过new关键字创建对象，因为该类的构造器被私有化</span></span><br><span class="line">        </span><br><span class="line">        SingletonDemo01 instance = SingletonDemo01.getInstance();</span><br><span class="line">        SingletonDemo01 instance1 = SingletonDemo01.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回true，说明获取到的对象是同一个，即单例</span></span><br><span class="line">        System.out.println(instance == instance1); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在的问题</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216145650.png" class="lozad"></p><h2 id="（2）懒汉式：可延时加载"><a href="#（2）懒汉式：可延时加载" class="headerlink" title="（2）懒汉式：可延时加载"></a>（2）懒汉式：可延时加载</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器私有化，使外部无法创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo02</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 私有化实例，加上static后，类初始化时不会加载该对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo02 instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供获取该对象的方法（外部类可以通过这个方法获得实例）</span></span><br><span class="line">    <span class="comment">// 有synchronized关键字，效率较低！(为了防止多线程同时操作该对象)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonDemo02 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在用户调用时才创建并加载对象，即延时加载</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonDemo02();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo02Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取该类对象</span></span><br><span class="line"></span><br><span class="line">        SingletonDemo02 instance = SingletonDemo02.getInstance();</span><br><span class="line">        SingletonDemo02 instance1 = SingletonDemo02.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回true，说明获取到的对象是同一个，即单例</span></span><br><span class="line">        System.out.println(instance == instance1); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（3）DCL懒汉式"><a href="#（3）DCL懒汉式" class="headerlink" title="（3）DCL懒汉式"></a>（3）DCL懒汉式</h2><p>（Double check Lock，双重检测锁）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器私有化，使外部无法创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo03</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有化实例，加上static后，类初始化时不会加载该对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonDemo03 instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供获取该对象的方法（外部类可以通过这个方法获得实例）</span></span><br><span class="line">    <span class="comment">// 有synchronized关键字，效率较低！(为了防止多线程同时操作该对象)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo03 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 只有第一次才会创建对象，后面来的可以直接使用对象，不用走这个判断</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDemo03.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonDemo03();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（4）饿汉式改进：内部类"><a href="#（4）饿汉式改进：内部类" class="headerlink" title="（4）饿汉式改进：内部类"></a>（4）饿汉式改进：内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo04</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo04</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部类，常量是本类的实例，保证不会再创建其他对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonDemo04 instance = <span class="keyword">new</span> SingletonDemo04();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo04 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在的问题：可以通过反射来破坏private关键字，从而达到重新创建对象的效果（前四种都会被反射所破坏）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216152057.png" class="lozad"></p><p>解决</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216153022.png" class="lozad"></p><p>出现新问题：2次都用反射创建对象，依旧会破坏单例！</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216153441.png" class="lozad"></p><h2 id="（5）枚举"><a href="#（5）枚举" class="headerlink" title="（5）枚举"></a>（5）枚举</h2><p>观察反射的newInstance()方法的源码，反射到枚举时，会抛出异常！</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216153910.png" class="lozad"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  SingletonDemo05 &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SingletonDemo05 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo05Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        SingletonDemo05 instance = SingletonDemo05.INSTANCE;</span><br><span class="line">        SingletonDemo05 instance1 = SingletonDemo05.INSTANCE;</span><br><span class="line">        System.out.println(instance == instance1); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举可以很好的规避反射给单例模式带来的破坏。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单例模式的核心作用&quot;&gt;&lt;a href=&quot;#单例模式的核心作用&quot; class=&quot;headerlink&quot; title=&quot;单例模式的核心作用&quot;&gt;&lt;/a&gt;单例模式的核心作用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;保证一个类只有一个实例，并提供一个访问该实例的全局访问点&lt;/li&gt;
&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JSON AJAX</title>
    <link href="https://cometorbityh.github.io/2019/12/15/JSON-AJAX/"/>
    <id>https://cometorbityh.github.io/2019/12/15/JSON-AJAX/</id>
    <published>2019-12-15T07:31:20.000Z</published>
    <updated>2019-12-15T13:13:57.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>什么是JSON</p><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>JSON语法</p><h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`ssmbuild`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> <span class="string">`ssmbuild`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`books`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`books`</span> (</span><br><span class="line">  <span class="string">`bookID`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'书id'</span>,</span><br><span class="line">  <span class="string">`bookName`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书名'</span>,</span><br><span class="line">  <span class="string">`bookCounts`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'数量'</span>,</span><br><span class="line">  <span class="string">`detail`</span> <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'描述'</span>,</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`bookID`</span> (<span class="string">`bookID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> <span class="string">`books`</span>(<span class="string">`bookID`</span>,<span class="string">`bookName`</span>,<span class="string">`bookCounts`</span>,<span class="string">`detail`</span>)<span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">'Java'</span>,<span class="number">1</span>,<span class="string">'从入门到放弃'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'MySQL'</span>,<span class="number">10</span>,<span class="string">'从删库到跑路'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'Linux'</span>,<span class="number">5</span>,<span class="string">'从进门到进牢'</span>);</span><br></pre></td></tr></table></figure><p>搭建环境  导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态资源导出问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h1&gt;&lt;p&gt;什么是JSON&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSON(JavaScript Object Notation, JS 对象标记)
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue语法</title>
    <link href="https://cometorbityh.github.io/2019/12/15/Vue%E8%AF%AD%E6%B3%95/"/>
    <id>https://cometorbityh.github.io/2019/12/15/Vue语法/</id>
    <published>2019-12-15T04:13:28.000Z</published>
    <updated>2019-12-17T04:34:48.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>动态绑定a元素的href属性</p><p>动态绑定img元素的src属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 错误写法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;img src="&#123;&#123;imgURL&#125;&#125;"&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://www.baidu.com/img/bd_logo1.png"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgURL"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"aHref"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                imgURL: <span class="string">'https://www.baidu.com/img/bd_logo1.png'</span>,</span></span><br><span class="line"><span class="javascript">                aHref: <span class="string">'https://www.baidu.com/'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215125754.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215125319.png" class="lozad"></p><h3 id="使用v-bind动态绑定class"><a href="#使用v-bind动态绑定class" class="headerlink" title="使用v-bind动态绑定class"></a>使用v-bind动态绑定class</h3><h4 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            使用v-bind动态绑定class（对象语法）</span></span><br><span class="line"><span class="comment">            v-bind:class="[类名1，类名2]"</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"nihao"</span> <span class="attr">v-bind:class</span>=<span class="string">"['AAAA', 'BBBB']"</span>&gt;</span>使用固定值设置class<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"nihao"</span> <span class="attr">v-bind:class</span>=<span class="string">"[active, full]"</span>&gt;</span>使用属性获取class<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"nihao"</span> <span class="attr">v-bind:class</span>=<span class="string">"getClasses()"</span>&gt;</span>使用方法获取class<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-bind: 的简易写法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"nihao"</span> <span class="attr">:class</span>=<span class="string">"[active, full]"</span>&gt;</span> v-bind 简易写法<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                </span><br><span class="line"><span class="javascript">                active: <span class="string">'AAA'</span>,</span></span><br><span class="line"><span class="javascript">                full: <span class="string">'BBB'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                getClasses: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> [<span class="keyword">this</span>.active, <span class="keyword">this</span>.full];</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215121705.png" class="lozad"></p><h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            使用v-bind动态绑定class（数组语法）</span></span><br><span class="line"><span class="comment">            v-bind:class="[类名1，类名2]"</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"nihao"</span> <span class="attr">v-bind:class</span>=<span class="string">"['AAAA', 'BBBB']"</span>&gt;</span>使用固定值设置class<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"nihao"</span> <span class="attr">v-bind:class</span>=<span class="string">"[active, full]"</span>&gt;</span>使用属性获取class<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"nihao"</span> <span class="attr">v-bind:class</span>=<span class="string">"getClasses()"</span>&gt;</span>使用方法获取class<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-bind: 的简易写法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"nihao"</span> <span class="attr">:class</span>=<span class="string">"[active, full]"</span>&gt;</span> v-bind 简易写法<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                </span><br><span class="line"><span class="javascript">                active: <span class="string">'AAA'</span>,</span></span><br><span class="line"><span class="javascript">                full: <span class="string">'BBB'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                getClasses: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> [<span class="keyword">this</span>.active, <span class="keyword">this</span>.full];</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215121936.png" class="lozad"></p><h3 id="使用v-bind动态绑定style"><a href="#使用v-bind动态绑定style" class="headerlink" title="使用v-bind动态绑定style"></a>使用v-bind动态绑定style</h3><h4 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用v-bind动态绑定style（对象语法）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            v-bind:style="&#123;属性名: '属性值', 属性名: '属性值'&#125;" </span></span><br><span class="line"><span class="comment">            注意：'20px'必须要加上单引号，否则会给当成变量来看待</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;fontSize: '20px', color: 'blue'&#125;"</span>&gt;</span>使用固定值设置style<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;fontSize: finalSize1, color: finalColor&#125;"</span>&gt;</span>使用属性获取style<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;fontSize: finalSize2 + 'px', color: finalColor&#125;"</span>&gt;</span>使用属性获取style<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-bind:style</span>=<span class="string">"getStyle()"</span>&gt;</span>使用方法获取style<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引入vue。js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                finalSize1: <span class="string">'30px'</span>,</span></span><br><span class="line">                finalSize2: 35,</span><br><span class="line"><span class="javascript">                finalColor: <span class="string">'green'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                getStyle:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;<span class="attr">fontSize</span>: <span class="keyword">this</span>.finalSize1, <span class="attr">color</span>: <span class="keyword">this</span>.finalColor&#125;;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;) </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span></span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215123821.png" class="lozad"></p><h4 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用v-bind动态绑定style（数组语法）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-bind:style</span>=<span class="string">"[&#123;fontSize: '20px'&#125;,&#123;color: 'red'&#125;]"</span>&gt;</span>使用固定值设置style<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-bind:style</span>=<span class="string">"[fontStyle,colorStyle]"</span>&gt;</span>使用属性获取style<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引入vue。js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                finalSize1: <span class="string">'30px'</span>,</span></span><br><span class="line"><span class="javascript">                fontStyle: &#123;<span class="attr">fontSize</span>: <span class="string">'20px'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                colorStyle: &#123;<span class="attr">color</span>: <span class="string">'blue'</span>&#125;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;) </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215124521.png" class="lozad"></p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><h3 id="计算属性的基本使用（属性）"><a href="#计算属性的基本使用（属性）" class="headerlink" title="计算属性的基本使用（属性）"></a>计算属性的基本使用（属性）</h3><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217122447.png" class="lozad"></p><h3 id="计算属性的复杂操作（对象）"><a href="#计算属性的复杂操作（对象）" class="headerlink" title="计算属性的复杂操作（对象）"></a>计算属性的复杂操作（对象）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">body&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>总价：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                books: [</span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">'深入理解计算机原理'</span>, <span class="attr">price</span>: <span class="number">110</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">'代码之美'</span>, <span class="attr">price</span>: <span class="number">110</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">'现代操作系统'</span>, <span class="attr">price</span>: <span class="number">110</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="number">104</span>, <span class="attr">name</span>: <span class="string">'编码'</span>, <span class="attr">price</span>: <span class="number">110</span>&#125;,</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">//计算属性中的方法名，一般是名词</span></span></span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="javascript">                totalPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> result = <span class="number">0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="comment">// for(let i=0;i&lt;this.books.length;i++)&#123;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     result += this.books[i].price</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// &#125;</span></span></span><br><span class="line">                    </span><br><span class="line"><span class="javascript">                    <span class="comment">// for(let i in this.books)&#123;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     result += this.books[i].price</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span>(<span class="keyword">let</span> book <span class="keyword">of</span> <span class="keyword">this</span>.books)&#123;</span></span><br><span class="line">                        result += book.price</span><br><span class="line">                    &#125;              </span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> result</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;       </span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217122337.png" class="lozad"></p><h3 id="计算属性的getter和setter（原理）"><a href="#计算属性的getter和setter（原理）" class="headerlink" title="计算属性的getter和setter（原理）"></a>计算属性的getter和setter（原理）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                firstName: <span class="string">'AAA'</span>,</span></span><br><span class="line"><span class="javascript">                lastName: <span class="string">'BBB'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">//计算属性的完整写法，计算属性一般不提供set方法，是只读属性，因此通常写简易写法</span></span></span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="javascript">                <span class="comment">// fullName:function()&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     return this.firstName + ' ' + this.lastName</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line">                fullName: &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">set</span>: function(newVulue)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">const</span> names = newVulue.split(<span class="string">' '</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.firstName = names[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.lastName = names[<span class="number">1</span>];</span></span><br><span class="line">                    &#125;,</span><br><span class="line"><span class="javascript">                    <span class="keyword">get</span>: function()&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217122208.png" class="lozad"></p><h3 id="计算属性和methods的对比"><a href="#计算属性和methods的对比" class="headerlink" title="计算属性和methods的对比"></a>计算属性和methods的对比</h3><p>计算属性有缓存，methods没有</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                firstName: <span class="string">'AAA'</span>,</span></span><br><span class="line"><span class="javascript">                lastName: <span class="string">'BBB'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">//计算属性中的方法名，一般是名词</span></span></span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="javascript">                fullName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'fullName'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                getFullName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'getFullName'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217123112.png" class="lozad">```</p><p>从控制台的输出结果可以看出，在没有进行数值修改的情况下，</p><blockquote><p> 计算属性只会调用一次，效率更高；</p><p>而方法会调用多次，效率更低</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;v-bind&quot;&gt;&lt;a href=&quot;#v-bind&quot; class=&quot;headerlink&quot; title=&quot;v-bind&quot;&gt;&lt;/a&gt;v-bind&lt;/h2&gt;&lt;p&gt;动态绑定a元素的href属性&lt;/p&gt;
&lt;p&gt;动态绑定img元素的src属性&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot 基础冲冲冲1</title>
    <link href="https://cometorbityh.github.io/2019/12/13/SpringBoot-%E5%9F%BA%E7%A1%80%E5%86%B2%E5%86%B2%E5%86%B21/"/>
    <id>https://cometorbityh.github.io/2019/12/13/SpringBoot-基础冲冲冲1/</id>
    <published>2019-12-13T09:58:17.000Z</published>
    <updated>2019-12-17T17:01:13.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1：SpringBoot-入门"><a href="#1：SpringBoot-入门" class="headerlink" title="1：SpringBoot 入门"></a>1：SpringBoot 入门</h1><h2 id="1-1：简介"><a href="#1-1：简介" class="headerlink" title="1.1：简介"></a>1.1：简介</h2><p><strong>什么是SpringBoot?</strong></p><blockquote><p>简化Spring应用开发的一个框架</p><p>整个Spring技术栈的一个大整合</p><p>J2EE开发的一站式解决方案</p></blockquote><p><strong>能做什么？</strong></p><blockquote><p><strong>约定大于配置</strong>，去繁从简，just run就能创建一个独立的产品级别的应用</p></blockquote><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213180917.png" class="lozad"><p>微服务</p><blockquote><p> 2014年 Martin fowler提出的</p><p> 微服务是一种架构风格</p><p> 一个应用应该是一组小型服务，可以通过HTTP的方式进行互通</p><p> 每一个功能元素最终都是一个可独立替换和独立升级的软件单元； </p><p> 总结：模块化开发</p></blockquote><p>提起微服务，就要说起另一个东西了，叫做单体应用</p><p>单体应用：All in One</p><img style="zoom: 50%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213182516.png" class="lozad"><img style="zoom: 50%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213182651.png" class="lozad"><h2 id="1-2：第一个程序"><a href="#1-2：第一个程序" class="headerlink" title="1.2：第一个程序"></a>1.2：第一个程序</h2><p>新建一个MAVEN项目</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213221614.png" class="lozad"></p><p>（1）导入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；(无需安装tomcat)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）编写主程序类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 标注一个主程序类，说明这是一个springboot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动spring应用</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）编写控制器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）测试</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213221524.png" class="lozad"></p><h2 id="1-3：原理分析"><a href="#1-3：原理分析" class="headerlink" title="1.3：原理分析"></a>1.3：原理分析</h2><h2 id="1-4：使用Spring-Initializer快速创建Spring-Boot项目"><a href="#1-4：使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="1.4：使用Spring Initializer快速创建Spring Boot项目"></a>1.4：使用Spring Initializer快速创建Spring Boot项目</h2><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p><p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p><p>默认生成的Spring Boot项目；</p><ul><li>主程序已经生成好了，我们只需要编写自己的逻辑</li><li>resources文件夹中目录结构<ul><li>static：保存所有的静态资源； js css  images；</li><li>templates：<ul><li>保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；</li><li>可以使用模板引擎（freemarker、thymeleaf）；</li></ul></li><li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li></ul></li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213225153.png" class="lozad"></p><p><strong>创建项目</strong></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213221951.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213222104.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213222230.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213222251.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213222506.png" class="lozad"></p><p>此时，可以看到，pom.xml已经帮我们自动导入了需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springboot 进行单元测试的模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且自动生成了主程序类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot01QuickApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Springboot01QuickApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要做的事情就是，创建控制器类，即可完成和  第一个程序 一样的操作，方便快捷</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @ResponseBody</span><br><span class="line">    @RequestMapping(&quot;helloQuick&quot;)</span><br><span class="line">    public String HelloWorldQuick()&#123;</span><br><span class="line">        return &quot;HELLO WORLD！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213225035.png" class="lozad"></p><h1 id="2：SpringBoot-配置"><a href="#2：SpringBoot-配置" class="headerlink" title="2：SpringBoot 配置"></a>2：SpringBoot 配置</h1><h2 id="2-1：配置文件值注入"><a href="#2-1：配置文件值注入" class="headerlink" title="2.1：配置文件值注入"></a>2.1：配置文件值注入</h2><h2 id="2-1-1：yml配置文件"><a href="#2-1-1：yml配置文件" class="headerlink" title="2.1-1：yml配置文件"></a>2.1-1：yml配置文件</h2><h3 id="（1）配置文件"><a href="#（1）配置文件" class="headerlink" title="（1）配置文件"></a>（1）配置文件</h3><h3 id="（2）配置语法"><a href="#（2）配置语法" class="headerlink" title="（2）配置语法"></a>（2）配置语法</h3><h3 id="（3）实例"><a href="#（3）实例" class="headerlink" title="（3）实例"></a>（3）实例</h3><ul><li>导入jar包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入配置文件处理器，配置文件就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.springboot.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//getter setter toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.springboot.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前提：组件，值类必须是容器的组件，才能有容器提供的ConfigurationProperties功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性值，映射到该组件中</span></span><br><span class="line"><span class="comment"> * ConfigurationProperties ：告诉springboot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment"> * prefix = "person"：将配置文件中名为person的所有属性一一映射</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean marriage;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; info;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; subjects;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//getter setter toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  lastName:</span> <span class="string">张三</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">  marriage:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  birth:</span> <span class="number">2019</span><span class="string">/2/29</span></span><br><span class="line"><span class="attr">  info:</span> <span class="string">&#123;name:</span> <span class="string">张三,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">  subjects:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">语文</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">数学</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">英语</span></span><br><span class="line"><span class="attr">  dog:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">小狗</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yang.springboot.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Boot单元测试</span></span><br><span class="line"><span class="comment"> * 可以在测试期间 便捷的进行 自动注入等容器的功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot01QuickApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;</span><br><span class="line">    lastName=&apos;张三&apos;, </span><br><span class="line">    age=18, </span><br><span class="line">    marriage=false, </span><br><span class="line">    birth=Fri Mar 01 00:00:00 CST 2019, </span><br><span class="line">    info=&#123;name=张三, age=18&#125;, </span><br><span class="line">    subject=[语文, 数学, 英语], </span><br><span class="line">    dog=Dog&#123;name=&apos;小狗&apos;, age=&apos;2&apos;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-2：properties配置文件"><a href="#2-1-2：properties配置文件" class="headerlink" title="2.1-2：properties配置文件"></a>2.1-2：properties配置文件</h2><p>只需要修改配置文件即可，其余与yml的配置一致。</p><ul><li>配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person.last-name=李四</span><br><span class="line">person.age=22</span><br><span class="line">person.marriage=true</span><br><span class="line">person.birth=2019/09/10</span><br><span class="line">person.info.name=李四</span><br><span class="line">person.info.age=22</span><br><span class="line">person.subjects=计算机组成原理，数据结构，计算机网络</span><br><span class="line">person.dog.name=狗子</span><br><span class="line">person.dog.age=3</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;lastName=&apos;李四&apos;, age=22, marriage=true, birth=Tue Sep 10 00:00:00 CST 2019, info=&#123;name=李四, age=22&#125;, subject=[计算机组成原理，数据结构，计算机网络], dog=Dog&#123;name=&apos;狗子&apos;, age=&apos;3&apos;&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="解决乱码"><a href="#解决乱码" class="headerlink" title="解决乱码"></a>解决乱码</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191214002118.png" class="lozad"></p><h2 id="2-1-3：属性注入"><a href="#2-1-3：属性注入" class="headerlink" title="2.1-3：属性注入"></a>2.1-3：属性注入</h2><p><strong>@ConfigurationProperties 和 @Value的比较</strong></p><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191214002814.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191214003242.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191214004104.png" class="lozad"></p><blockquote><p>配置文件yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，使用@ConfigurationProperties；</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191214004555.png" class="lozad"></p><h2 id="2-1-4：加载指定配置文件"><a href="#2-1-4：加载指定配置文件" class="headerlink" title="2.1-4：加载指定配置文件"></a>2.1-4：加载指定配置文件</h2><p><strong>@PropertySource 和 @ImportSource</strong></p><p>@PropertySource**：加载指定的配置文件，而不使用默认配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PropertySource:加载名为person.properties的配置文件，而不使用默认配置文件</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean marriage;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; info;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; subjects;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@ImportSource</strong></p><p>导入自定义的Spring配置文件，让配置文件里面的内容生效；</p><blockquote><p>需求：</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring的配置文件生效，并加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p></blockquote><p><strong>@Bean</strong></p><p>SpringBoot推荐：使用<strong>配置类</strong>给容器中<strong>添加组件</strong>的方式；即使用<strong>全注解</strong>的方式</p><p>1、配置类<strong>@Configuration</strong>——&gt;Spring配置文件</p><p>2、使用<strong>@Bean</strong>给容器中添加组件</p><ul><li>普通类（要添加的组件）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>配置类（添加组件）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="comment">// &lt;bean id="HelloService" class="com.yang.HelloService"/&gt;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试（测试是否添加成功）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot01QuickApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext ioc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 判断容器中是否有该组件</span></span><br><span class="line">        <span class="keyword">boolean</span> helloService01 = ioc.containsBean(<span class="string">"helloService01"</span>);</span><br><span class="line">        System.out.println(helloService01); <span class="comment">//true，说明已经成功添加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2：Profile-多环境支持"><a href="#2-2：Profile-多环境支持" class="headerlink" title="2.2：Profile 多环境支持"></a>2.2：Profile 多环境支持</h2><p>编写配置文件时，可以编写多个配置文件</p><p>文件名格式：application-{profile}.properties/yml</p><p>默认使用application.properties的配置。</p><h3 id="修改使用的配置文件"><a href="#修改使用的配置文件" class="headerlink" title="修改使用的配置文件"></a>修改使用的配置文件</h3><p>在配置文件中指定spring.profile.active={profile}，即可修改使用的配置文件，激活指定的profile</p><p><strong>（1）使用properties配置文件指定</strong></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215223912.png" class="lozad"></p><p><strong>（2）使用yml配置文件指定</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活dev配置文件</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># dev配置文件</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># prod配置文件</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tomcat started on port(s): 8083 (http) with context path &apos;&apos;</span><br></pre></td></tr></table></figure><p><strong>（3）使用命令行指定</strong></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215225104.png" class="lozad"></p><p><strong>（4）使用虚拟机参数指定</strong></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215225426.png" class="lozad"></p><p><strong>（5）打包后使用命令行指定</strong></p><h2 id="2-2：加载顺序"><a href="#2-2：加载顺序" class="headerlink" title="2.2：加载顺序"></a>2.2：加载顺序</h2><h2 id="2-3：配置原理"><a href="#2-3：配置原理" class="headerlink" title="2.3：配置原理"></a>2.3：配置原理</h2><h1 id="3：SpringBoot-与-日志"><a href="#3：SpringBoot-与-日志" class="headerlink" title="3：SpringBoot 与 日志"></a>3：SpringBoot 与 日志</h1><h2 id="3-1：市面上的日志框架"><a href="#3-1：市面上的日志框架" class="headerlink" title="3.1：市面上的日志框架"></a>3.1：<strong>市面上的日志框架</strong></h2><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p><table><thead><tr><th>日志门面  （日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta  Commons Logging）</del>    <br>SLF4j（Simple  Logging Facade for Java）   <br> <del>jboss-logging</del></td><td><strong>Log4j</strong>  <strong>Logback</strong><br>JUL（java.util.logging）  Log4j2</td></tr></tbody></table><p>左边选一个门面（抽象层）、右边来选一个实现；</p><ul><li><p>日志门面：  SLF4J；</p></li><li><p>日志实现：Logback；</p></li></ul><blockquote><p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；</p><p>SpringBoot选用 SLF4j和logback</p></blockquote><h2 id="3-2：SLF4j使用"><a href="#3-2：SLF4j使用" class="headerlink" title="3.2：SLF4j使用"></a>3.2：SLF4j使用</h2><p>*<em>如何在系统中使用SLF4j *</em></p><blockquote><p>开发时，日志记录方法的调用，不应该来直接调用日志的实现类，而是<strong>调用日志抽象层</strong>里面的方法；</p></blockquote><p>给系统里面导入slf4j的jar和  logback的实现jar    <a href="https://www.slf4j.org" target="_blank" rel="noopener">https://www.slf4j.org</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3：统一日志"><a href="#3-3：统一日志" class="headerlink" title="3.3：统一日志"></a>3.3：统一日志</h2><p>在一个项目中，使用的日志是 slf4j 和 logback，但是其中使用到的框架的<strong>日志都不一致</strong>。</p><p>比如 Spring (commons-logging)、Hibernate (jboss-logging)、MyBatis …</p><p>因此我们需要<strong>统一日志记录</strong>，即不同框架使用统一的 slf4j 进行输出。</p><blockquote><p><strong>如何让系统中所有的日志都统一到slf4j?</strong>（使用适配器偷天换日）</p><p>1、将系统中其他日志框架先排除出去</p><p>2、用中间包来替换原有的日志框架</p><p>3、我们导入slf4j其他的实现</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191214215742.png" class="lozad"></p><p>源码分析：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot使用它来做日志功能；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</span><br><span class="line">2）、SpringBoot也把其他的日志都替换成了slf4j；</span><br><span class="line">3）、中间替换包</span><br><span class="line">4）、如果我们要引入其他框架,一定要把这个框架的默认日志依赖移除掉？</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 例：移除Spring框架使用的日志依赖，commons-logging --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可==</strong></p><h2 id="3-4：使用日志"><a href="#3-4：使用日志" class="headerlink" title="3.4：使用日志"></a>3.4：使用日志</h2><p>配置：默认已经配置好了，无需配置</p><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot03LoggingApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 记录器</span></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//有了日志就不需要使用sout进行日志记录了</span></span><br><span class="line">       <span class="comment">// System.out.println("日志...");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 日志级别：由低到高</span></span><br><span class="line">        logger.trace(<span class="string">"trace日志..."</span>);</span><br><span class="line">        logger.debug(<span class="string">"debug日志..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// springboot默认使用info及以上的日志级别</span></span><br><span class="line">        logger.info(<span class="string">"info日志..."</span>);</span><br><span class="line">        logger.warn(<span class="string">"warn日志..."</span>);</span><br><span class="line">        logger.error(<span class="string">"error日志..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==========输出结果==========</span><br><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">22</span>:<span class="number">28</span>:<span class="number">43.760</span>  INFO <span class="number">7488</span> --- [           main] .y.s.Springboot03LoggingApplicationTests : info日志...</span><br><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">22</span>:<span class="number">28</span>:<span class="number">43.760</span>  WARN <span class="number">7488</span> --- [           main] .y.s.Springboot03LoggingApplicationTests : warn日志...</span><br><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">22</span>:<span class="number">28</span>:<span class="number">43.760</span> ERROR <span class="number">7488</span> --- [           main] .y.s.Springboot03LoggingApplicationTests : error日志...</span><br></pre></td></tr></table></figure><h3 id="（1）调整输出的日志级别"><a href="#（1）调整输出的日志级别" class="headerlink" title="（1）调整输出的日志级别"></a>（1）调整输出的日志级别</h3><blockquote><p> springboot默认使用info级别，称之为“root级别”，</p></blockquote><ul><li>可以使用配置文件修改输出的日志级别</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.level.com.yang=trace</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2019-12-14 22:32:58.533 TRACE 5640 --- [           main] .y.s.Springboot03LoggingApplicationTests : trace日志...</span><br><span class="line">2019-12-14 22:32:58.533 DEBUG 5640 --- [           main] .y.s.Springboot03LoggingApplicationTests : debug日志...</span><br><span class="line">2019-12-14 22:32:58.534  INFO 5640 --- [           main] .y.s.Springboot03LoggingApplicationTests : info日志...</span><br><span class="line">2019-12-14 22:32:58.534  WARN 5640 --- [           main] .y.s.Springboot03LoggingApplicationTests : warn日志...</span><br><span class="line">2019-12-14 22:32:58.534 ERROR 5640 --- [           main] .y.s.Springboot03LoggingApplicationTests : error日志...</span><br></pre></td></tr></table></figure><h3 id="（2）生成日志文件（统一）"><a href="#（2）生成日志文件（统一）" class="headerlink" title="（2）生成日志文件（统一）"></a>（2）生成日志文件（统一）</h3><blockquote><p> 上面的日志都会默认输出在控制台，那么我们想把日志统一放在一个文件中，如何做？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 不指定路径，在当前项目下生成springboot.log日志</span><br><span class="line">logging.file.path=springboot.log</span><br><span class="line"></span><br><span class="line"># 可以指定本地完整路径；</span><br><span class="line">#logging.file=G:/springboot.log</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191214224228.png" class="lozad"></p><h3 id="（3）修改日志的输出格式"><a href="#（3）修改日志的输出格式" class="headerlink" title="（3）修改日志的输出格式"></a>（3）修改日志的输出格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">日志输出格式：</span><br><span class="line">    %d表示日期时间，</span><br><span class="line">    %thread表示线程名，</span><br><span class="line">    %-5level：级别从左显示5个字符宽度</span><br><span class="line">    %logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span><br><span class="line">    %msg：日志消息，</span><br><span class="line">    %n是换行符</span><br><span class="line">        </span><br><span class="line">例：%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#  在控制台输出的日志的格式</span><br><span class="line">logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br><span class="line"># 指定文件中日志输出的格式</span><br><span class="line">logging.pattern.file=%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191214224515.png" class="lozad"></p><h2 id="3-5：日志配置（未）"><a href="#3-5：日志配置（未）" class="headerlink" title="3.5：日志配置（未）"></a>3.5：日志配置（未）</h2><h3 id="（1）默认配置"><a href="#（1）默认配置" class="headerlink" title="（1）默认配置"></a>（1）默认配置</h3><h3 id="（2）自定义配置"><a href="#（2）自定义配置" class="headerlink" title="（2）自定义配置"></a>（2）自定义配置</h3><h2 id="3-6：切换日志框架（未）"><a href="#3-6：切换日志框架（未）" class="headerlink" title="3.6：切换日志框架（未）"></a>3.6：切换日志框架（未）</h2><h1 id="4：SpringBoot-与-Web开发"><a href="#4：SpringBoot-与-Web开发" class="headerlink" title="4：SpringBoot 与 Web开发"></a>4：SpringBoot 与 Web开发</h1><p>使用SpringBoot</p><p>（1）创建SpringBoot应用，选中需要的场景：web…</p><p>（2）SpringBoot已经默认将这些场景配置好了。只需要在配置文件中指定少量配置就可运行。</p><p>（3）编写业务代码</p><h2 id="4-1：引入静态资源文件"><a href="#4-1：引入静态资源文件" class="headerlink" title="4.1：引入静态资源文件"></a>4.1：引入静态资源文件</h2><p>（方式1）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">        CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码可粗略看出：</p><blockquote><p> 所有 <code>/webjars/**</code>的请求 ，都去<code>classpath:/META-INF/resources/webjars/</code>找资源</p><p>webjars：以jar包的方式引入静态资源；</p></blockquote><p>步骤：</p><p>导入jquery，<a href="http://www.webjars.org/" target="_blank" rel="noopener">http://www.webjars.org/</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入jquery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问 jquery.js</p><p><code>localhost:8080/webjars/jquery/3.1.1/jquery.js</code></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191214232521.png" class="lozad"></p><p>（方式二）</p><p>“/**” ：访问当前项目的任何资源，都去（静态资源的文件夹）找映射==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;classpath:/META-INF/resources/&quot;, </span><br><span class="line">&quot;classpath:/resources/&quot;,</span><br><span class="line">&quot;classpath:/static/&quot;, （√）</span><br><span class="line">&quot;classpath:/public/&quot; </span><br><span class="line">&quot;/&quot;：当前项目的根路径</span><br></pre></td></tr></table></figure><p>localhost:8080/abc ：表示去静态资源文件夹里面找abc</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191214233350.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191214233234.png" class="lozad"></p><p>==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；==</p><pre><code>localhost:8080/   找index页面</code></pre><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191214233753.png" class="lozad"></p><h2 id="4-2：Thymeleaf"><a href="#4-2：Thymeleaf" class="headerlink" title="4.2：Thymeleaf"></a>4.2：Thymeleaf</h2><p>springBoot因为自带的tomcat，因此只支持html不支持jsp，</p><p>这会带来很多麻烦，推荐使用模板引擎来解决这个问题。</p><p>常见模板引擎：JSP、Velocity、Freemarker、Thymeleaf</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191214234717.png" class="lozad"></p><p>SpringBoot推荐的Thymeleaf；语法更简单，功能更强大；</p><h3 id="引入thymeleaf"><a href="#引入thymeleaf" class="headerlink" title="引入thymeleaf"></a>引入thymeleaf</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入thymeleaf 模板引擎 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h3><ul><li>查看源码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package org.springframework.boot.autoconfigure.thymeleaf;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line">import java.util.List;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.util.MimeType;</span><br><span class="line">import org.springframework.util.unit.DataSize;</span><br><span class="line"></span><br><span class="line">@ConfigurationProperties(</span><br><span class="line">    prefix = &quot;spring.thymeleaf&quot;</span><br><span class="line">)</span><br><span class="line">public class ThymeleafProperties &#123;</span><br><span class="line">    private static final Charset DEFAULT_ENCODING;</span><br><span class="line">    public static final String DEFAULT_PREFIX = &quot;classpath:/templates/&quot;;</span><br><span class="line">    public static final String DEFAULT_SUFFIX = &quot;.html&quot;;</span><br><span class="line">    private boolean checkTemplate = true;</span><br><span class="line">    private boolean checkTemplateLocation = true;</span><br><span class="line">    private String prefix = &quot;classpath:/templates/&quot;;</span><br><span class="line">    private String suffix = &quot;.html&quot;;</span><br><span class="line">    private String mode = &quot;HTML&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215001241.png" class="lozad"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/success"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Success</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        map.put(<span class="string">"hello"</span>,<span class="string">"come"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入thymeleaf的名称空间，使用语法在html页面上获得值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    请求成功！</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:id</span>=<span class="string">"$&#123;hello&#125;"</span> <span class="attr">th:class</span>=<span class="string">"$&#123;hello&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span></span><br><span class="line">        我将被替换</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215002615.png" class="lozad"></p><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p>（1）属性</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215232359.png" class="lozad"></p><p>（2）表达式语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">Simple expressions:（表达式语法）</span><br><span class="line">    Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；</span><br><span class="line">    1）、获取对象的属性、调用方法</span><br><span class="line">    2）、使用内置的基本对象：</span><br><span class="line">    #ctx : the context object.</span><br><span class="line">    #vars: the context variables.</span><br><span class="line">                #locale : the context locale.</span><br><span class="line">                #request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">                #response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">                #session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">                #servletContext : (only in Web Contexts) the ServletContext object.</span><br><span class="line">                </span><br><span class="line">                $&#123;session.foo&#125;</span><br><span class="line">            3）、内置的一些工具对象：</span><br><span class="line">                #execInfo : information about the template being processed.</span><br><span class="line">                #messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span><br><span class="line">                #uris : methods for escaping parts of URLs/URIs</span><br><span class="line">                #conversions : methods for executing the configured conversion service (if any).</span><br><span class="line">                #dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br><span class="line">                #calendars : analogous to #dates , but for java.util.Calendar objects.</span><br><span class="line">                #numbers : methods for formatting numeric objects.</span><br><span class="line">                #strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><br><span class="line">                #objects : methods for objects in general.</span><br><span class="line">                #bools : methods for boolean evaluation.</span><br><span class="line">                #arrays : methods for arrays.</span><br><span class="line">                #lists : methods for lists.</span><br><span class="line">                #sets : methods for sets.</span><br><span class="line">                #maps : methods for maps.</span><br><span class="line">                #aggregates : methods for creating aggregates on arrays or collections.</span><br><span class="line">                #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span><br><span class="line"></span><br><span class="line">    Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span><br><span class="line">    补充：配合 th:object=&quot;$&#123;session.user&#125;：</span><br><span class="line">   &lt;div th:object=&quot;$&#123;session.user&#125;&quot;&gt;</span><br><span class="line">    &lt;p&gt;Name: &lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Surname: &lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Nationality: &lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    Message Expressions: #&#123;...&#125;：获取国际化内容</span><br><span class="line">    Link URL Expressions: @&#123;...&#125;：定义URL；</span><br><span class="line">    @&#123;/order/process(execId=$&#123;execId&#125;,execType=&apos;FAST&apos;)&#125;</span><br><span class="line">    Fragment Expressions: ~&#123;...&#125;：片段引用表达式</span><br><span class="line">    &lt;div th:insert=&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">Literals（字面量）</span><br><span class="line">      Text literals: &apos;one text&apos; , &apos;Another one!&apos; ,…</span><br><span class="line">      Number literals: 0 , 34 , 3.0 , 12.3 ,…</span><br><span class="line">      Boolean literals: true , false</span><br><span class="line">      Null literal: null</span><br><span class="line">      Literal tokens: one , sometext , main ,…</span><br><span class="line">Text operations:（文本操作）</span><br><span class="line">    String concatenation: +</span><br><span class="line">    Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">Arithmetic operations:（数学运算）</span><br><span class="line">    Binary operators: + , - , * , / , %</span><br><span class="line">    Minus sign (unary operator): -</span><br><span class="line">Boolean operations:（布尔运算）</span><br><span class="line">    Binary operators: and , or</span><br><span class="line">    Boolean negation (unary operator): ! , not</span><br><span class="line">Comparisons and equality:（比较运算）</span><br><span class="line">    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">    Equality operators: == , != ( eq , ne )</span><br><span class="line">Conditional operators:条件运算（三元运算符）</span><br><span class="line">    If-then: (if) ? (then)</span><br><span class="line">    If-then-else: (if) ? (then) : (else)</span><br><span class="line">    Default: (value) ?: (defaultvalue)</span><br><span class="line">Special tokens:</span><br><span class="line">    No-Operation: _</span><br></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/success"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Success</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        map.put(<span class="string">"hello"</span>,<span class="string">"&lt;h1&gt;你好&lt;h1&gt;"</span>);</span><br><span class="line">        map.put(<span class="string">"users"</span>, Arrays.asList(<span class="string">"AAAA"</span>,<span class="string">"BBBB"</span>,<span class="string">"CCCC"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user&#125;"</span> <span class="attr">th:each</span>=<span class="string">"user:$&#123;users&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:each</span>=<span class="string">"user:$&#123;users&#125;"</span>&gt;</span>[[$&#123;user&#125;]]<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215233803.png" class="lozad"></p><h2 id="4-3：SpringMVC自动配置"><a href="#4-3：SpringMVC自动配置" class="headerlink" title="4.3：SpringMVC自动配置"></a>4.3：SpringMVC自动配置</h2><p>1 </p><h3 id="2-扩展SpringMVC"><a href="#2-扩展SpringMVC" class="headerlink" title="2  扩展SpringMVC"></a>2  扩展SpringMVC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写一个配置类（@Configuration），是WebMvcConfigurer类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过实现 WebMvcConfigurer 来扩展 springMVC 的功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 浏览器发送 /gosuccess 请求来到 success 页面</span></span><br><span class="line">        registry.addViewController(<span class="string">"/gosuccess"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p><h3 id="3-全面接管SpringMVC"><a href="#3-全面接管SpringMVC" class="headerlink" title="3 全面接管SpringMVC"></a>3 全面接管SpringMVC</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 浏览器发送 /gosuccess 请求来到 success 页面</span></span><br><span class="line">        registry.addViewController(<span class="string">"/gosuccess"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、如何修改SpringBoot的默认配置"><a href="#4、如何修改SpringBoot的默认配置" class="headerlink" title="4、如何修改SpringBoot的默认配置"></a>4、如何修改SpringBoot的默认配置</h3><p>模式：</p><pre><code>1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</code></pre><h2 id="4-4：CRUD（web-ThymeLeaf）"><a href="#4-4：CRUD（web-ThymeLeaf）" class="headerlink" title="4.4：CRUD（web+ThymeLeaf）"></a>4.4：CRUD（web+ThymeLeaf）</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>导入静态文件 + 需要的文件</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216164654.png" class="lozad"></p><p>导入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 导入jquery --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 导入bootstrap --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--导入thymeleaf 模板引擎 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改主页地址（不是public中的index.html，而是自己引入的页面：template的login,html）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过实现 WebMvcConfigurer 来扩展 springMVC 的功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有的WebMvcConfigurer组件都会起作用</span></span><br><span class="line">    <span class="meta">@Bean</span>       <span class="comment">//将组件注册在容器中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 使得默认进入的页面不是public的index.html页面，而是template下的login.html页面</span></span><br><span class="line">        WebMvcConfigurer a = <span class="keyword">new</span> WebMvcConfigurer()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主页通过 ThymeLeaf 修改引入的 bootStrap 资源</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.4.1/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/asserts/css/signin.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>&gt;</span> Remember me</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216165040.png" class="lozad"></p><h3 id="国际化配置"><a href="#国际化配置" class="headerlink" title="国际化配置"></a>国际化配置</h3><p>1）编写国际化配置文件，抽取页面需要显示的国际化信息</p><p>在resources文件夹下新建i18n文件夹，用来存放国际化配置文件</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216170123.png" class="lozad"></p><p>2）<del>spring boot自动配置好了管理国际化资源文件的组件，无需配置</del></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>只需要在配置文件中，指定国际化资源文件的位置即可</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216170533.png" class="lozad"></p><p>3）去页面获取国际化信息的值</p><p>原样式</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216171410.png" class="lozad"></p><p>新样式</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216171438.png" class="lozad"></p><p>展示（有点小问题，不管啦）：根据浏览器语言信息显示对应效果</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216171522.png" class="lozad"></p><p>4）点击链接切换国际化</p><ul><li><p>定义链接（login.html）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216173818.png" class="lozad"></p></li></ul><ul><li><p>自定义区域信息解析器（在resources下新建文件夹component，创建类）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216173723.png" class="lozad"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.springboot.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在链接上携带区域信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest Request)</span> </span>&#123;</span><br><span class="line">        String l = Request.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();    <span class="comment">//如果请求中没有l就使用默认的</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(l))&#123;   <span class="comment">//如果请求中有l</span></span><br><span class="line">            String[] split = l.split(<span class="string">"_"</span>);  <span class="comment">//按照_分割，ch_CN ==&gt; ch CN</span></span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);  <span class="comment">//(语言，国家) ==&gt; (ch,CN)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>将组件注册到容器中（myMvcConfig）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使用自定义的区域信息解析器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216174118.gif" class="lozad"></p><h3 id="登录-拦截器"><a href="#登录-拦截器" class="headerlink" title="登录 + 拦截器"></a>登录 + 拦截器</h3><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/user/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 登录密码错误提示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>  <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span> &gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">       <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.btn&#125;"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index.html(l='zh_CN')&#125;"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index.html(l='en_US')&#125;"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建处理器 LoginController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/user/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span>String username,</span></span><br><span class="line"><span class="function">                        @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span>String password,</span></span><br><span class="line"><span class="function">                        Map&lt;String,Object&gt; map,</span></span><br><span class="line"><span class="function">                        HttpSession session)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(username)&amp;&amp; <span class="string">"123456"</span>.equals(password) )&#123;</span><br><span class="line">            <span class="comment">// 登录成功</span></span><br><span class="line">            session.setAttribute(<span class="string">"loginUser"</span>,username);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/main.html"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 登录失败</span></span><br><span class="line">            map.put(<span class="string">"msg"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216220031.gif" class="lozad"></p><p>发现问题：直接输入<code>http://localhost:8080/main.html</code>可以直接进入主页。</p><p>需要使用拦截器来拦截这个请求</p><h4 id="拦截器进行登录检查"><a href="#拦截器进行登录检查" class="headerlink" title="拦截器进行登录检查"></a>拦截器进行登录检查</h4><p>创建自定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 未登录，拦截请求，返回登录界面</span></span><br><span class="line">            request.setAttribute(<span class="string">"msg"</span>,<span class="string">"没有权限，请先登录！"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/index.html"</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 已登录，放行请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册拦截器：在MyMvcConfig.java中注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的WebMvcConfigurer组件都会起作用</span></span><br><span class="line">    <span class="meta">@Bean</span>       <span class="comment">//将组件注册在容器中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 使得默认进入的页面不是public的index.html页面，而是template下的login.html页面</span></span><br><span class="line">        WebMvcConfigurer a = <span class="keyword">new</span> WebMvcConfigurer()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注册拦截器</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// springBoot拦截所有请求，但是放行某些请求和静态资源</span></span><br><span class="line">                registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                        .excludePathPatterns(<span class="string">"/index.html"</span>,<span class="string">"/"</span>,<span class="string">"/user/login"</span>,<span class="string">"/static/**"</span>,<span class="string">"/webjars/**"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191216222545.gif" class="lozad"></p><h4 id="优化首页：抽取相同片段及引入"><a href="#优化首页：抽取相同片段及引入" class="headerlink" title="优化首页：抽取相同片段及引入"></a>优化首页：抽取相同片段及引入</h4><p>将公共的部分单独放在一个html中</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217171718.png" class="lozad"></p><p>bar.html</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217171530.png" class="lozad"></p><p>dashboard.html</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217171606.png" class="lozad"></p><p>list.html（员工添加页面）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217171633.png" class="lozad"></p><h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><p>新建EmployeeController（员工控制器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeDao employeeDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有员工，跳转到员工列表页面</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/emps"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Collection&lt;Employee&gt; employees = employeeDao.getAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放在请求域中</span></span><br><span class="line">        model.addAttribute(<span class="string">"emps"</span>,employees);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"emp/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取数据到 list.html</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217172047.png" class="lozad"></p><p>此时访问页面就读取到员工数据了</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217172115.png" class="lozad"></p><h4 id="添加员工"><a href="#添加员工" class="headerlink" title="添加员工"></a>添加员工</h4><p>在EmployeeController.java加上   跳转到添加员工页面  的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/emp"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toAddPage</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询部门信息</span></span><br><span class="line">        Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class="line">        model.addAttribute(<span class="string">"depts"</span>,departments);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"emp/add"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>点击list.html页面的员工添加按钮，可以跳转到add.html页面</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217173740.png" class="lozad"></p><p>新建add.html，读取部门数据</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217173524.png" class="lozad"></p><p>在EmployeeController.java加上   添加员工  的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/emp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addEmp</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    System.out.println(employee);</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add.html 表单页面提交（注意各项的name要和Employee对象的属性一致）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217175230.png" class="lozad"></p><p>需要在application.properties页面加上 date类数据的统一格式</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217222818.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217175358.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217175335.png" class="lozad"></p><h4 id="修改员工"><a href="#修改员工" class="headerlink" title="修改员工"></a>修改员工</h4><p>点击编辑按钮，来到修改页面</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217215951.png" class="lozad"></p><p>控制器中添加方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 来到修改页面，查出当前员工并回显</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/emp/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toEditPage</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id,Model model)</span>&#123;</span><br><span class="line">    Employee employee = employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">"emp"</span>,employee);</span><br><span class="line">    <span class="comment">// 查询部门信息</span></span><br><span class="line">    Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class="line">    model.addAttribute(<span class="string">"depts"</span>,departments);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"emp/edit"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改员工(需要id)</span></span><br><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/emp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateEmployee</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"修改后的数据："</span> + employee);</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建修改页面edit.html</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217220229.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217220338.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217220541.gif" class="lozad"></p><h4 id="删除员工"><a href="#删除员工" class="headerlink" title="删除员工"></a>删除员工</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217222505.png" class="lozad"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除员工</span></span><br><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/emp/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmployee</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在application.pproperties页面加上</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217222724.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191217222545.png" class="lozad"></p><p>好了，基本的步骤就这些了。一个简单的模拟增删改查就做好了。</p><h2 id="4-5：错误处理机制"><a href="#4-5：错误处理机制" class="headerlink" title="4.5：错误处理机制"></a>4.5：错误处理机制</h2><h3 id="定制错误的页面"><a href="#定制错误的页面" class="headerlink" title="定制错误的页面"></a>定制错误的页面</h3><p>当我们发出一个错误的404请求时，</p><p>SpringBoot默认错误页面是这样的：</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191218004930.png" class="lozad"><p>我们可以自定义异常页面：</p><p>（1）静态资源文件夹下新建error文件夹，新建4xx.html</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191218005203.png" class="lozad"><p>（2）模板引擎Template下新建error文件夹，新建4xx.html</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191218005217.png" class="lozad"><blockquote><p>可以看出：</p><p>优先级为：Template &gt; static &gt; 默认错误页面</p><p>并且：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191218005557.png" class="lozad"></p></blockquote><h3 id="定制错误数据"><a href="#定制错误数据" class="headerlink" title="定制错误数据"></a>定制错误数据</h3><h2 id="容器定制"><a href="#容器定制" class="headerlink" title="容器定制"></a>容器定制</h2><h1 id="5：SpringBoot-与-Docker"><a href="#5：SpringBoot-与-Docker" class="headerlink" title="5：SpringBoot 与 Docker"></a>5：SpringBoot 与 Docker</h1><h1 id="6：SpringBoot-与-数据访问"><a href="#6：SpringBoot-与-数据访问" class="headerlink" title="6：SpringBoot 与 数据访问"></a>6：SpringBoot 与 数据访问</h1><h1 id="7：SpringBoot-启动配置原理"><a href="#7：SpringBoot-启动配置原理" class="headerlink" title="7：SpringBoot 启动配置原理"></a>7：SpringBoot 启动配置原理</h1><h1 id="8：SpringBoot-自定义-starters"><a href="#8：SpringBoot-自定义-starters" class="headerlink" title="8：SpringBoot 自定义 starters"></a>8：SpringBoot 自定义 starters</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1：SpringBoot-入门&quot;&gt;&lt;a href=&quot;#1：SpringBoot-入门&quot; class=&quot;headerlink&quot; title=&quot;1：SpringBoot 入门&quot;&gt;&lt;/a&gt;1：SpringBoot 入门&lt;/h1&gt;&lt;h2 id=&quot;1-1：简介&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mybatis 整整整</title>
    <link href="https://cometorbityh.github.io/2019/12/11/Mybatis-%E6%95%B4%E6%95%B4%E6%95%B4/"/>
    <id>https://cometorbityh.github.io/2019/12/11/Mybatis-整整整/</id>
    <published>2019-12-11T02:52:16.000Z</published>
    <updated>2019-12-13T03:17:37.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1：简介"><a href="#1：简介" class="headerlink" title="1：简介"></a>1：简介</h1><h2 id="1-1、什么是MyBatis？"><a href="#1-1、什么是MyBatis？" class="headerlink" title="1.1、什么是MyBatis？"></a>1.1、什么是MyBatis？</h2><ul><li>MyBatis是一款优秀的持久层框架。 iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs） </li><li>支持 定制SQL、存储过程以及高级映射</li><li>避免了几乎所有的JDBC代码和手动设置参数以及获取结果集<strong>（半自动）</strong></li><li>可以使用简单的XML或注解来配置和映射原生类型、接口和java的POJO（Plain Old Java Objects，普通老式Java对象）为数据库中的记录。</li><li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265" target="_blank" rel="noopener">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis" target="_blank" rel="noopener">iBatis</a>（ internet  abatis）, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。 </li></ul><h2 id="1-2、如何获得Mybatis？"><a href="#1-2、如何获得Mybatis？" class="headerlink" title="1.2、如何获得Mybatis？"></a>1.2、如何获得Mybatis？</h2><ul><li><p>Maven仓库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>中文官方文档： <a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/getting-started.html</a> </p></li><li><p>GitHub： <a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3</a> </p></li></ul><h2 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h2><p><strong>数据持久化</strong></p><ul><li><p>持久化就是将程序的数据在 <strong>持久状态</strong> 和 <strong>瞬时状态</strong> 转化的过程</p><ul><li><p>持久状态：数据保存在数据库（jdbc），或IO文件中，可以持久化的保存 </p></li><li><p>瞬时状态：数据保存在内存中，而内存的特点是“断电即失” </p></li><li><p>生活中的持久化：冷藏食品，可以使食物持续长时间不变质</p><blockquote><p>总结：【数据库、IO文件持久化】【内存 断电即失】【生活案例：冷藏】</p></blockquote></li></ul></li></ul><p><strong>为什么需要持久化？</strong></p><ul><li><p>由于内存 断电即失 的特性，数据常常会丢失（而且内存实在太昂贵了）。但是有一些重要的数据，不能够丢失，这时要用到持久化</p><blockquote><p>总结：【内存太贵】【重要对象 不能丢失】</p></blockquote></li></ul><p><strong>持久层</strong></p><p>Dao层，Service层，Controller层…</p><ul><li>持久层 是 完成持久化工作的代码块</li><li>层界限十分明显。（分工合理）</li></ul><h2 id="1-4、为什么需要MyBatis"><a href="#1-4、为什么需要MyBatis" class="headerlink" title="1.4、为什么需要MyBatis?"></a>1.4、为什么需要MyBatis?</h2><ul><li><p>帮助程序员将数据存入数据库中（主要原因）</p></li><li><p>传统的JDBC代码太过复杂，简化JDBC为框架，实现半自动化，方便快捷</p></li><li><p>不要MyBatis也可以，但是使用MyBatis更容易上手。</p></li><li><p><strong>技术没有高低之分，只有使用者有高低之分。</strong></p></li><li><p>优点：</p><ul><li><p>简单易学</p><blockquote><p>本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</p></blockquote></li><li><p>灵活</p><blockquote><p>mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</p></blockquote></li><li><p>解除sql与程序代码的耦合</p><blockquote><p>通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</p></blockquote></li><li><p>提供映射标签，支持对象与数据库的orm字段关系映射</p></li><li><p>提供对象关系映射标签，支持对象关系组建维护</p></li><li><p>提供xml标签，支持编写动态sql</p></li></ul></li></ul><h1 id="2：第一个MyBatis程序"><a href="#2：第一个MyBatis程序" class="headerlink" title="2：第一个MyBatis程序"></a>2：第一个MyBatis程序</h1><blockquote><p> 思路：创建数据库和表 – &gt; 搭建环境 – &gt; 测试</p></blockquote><p>项目结构：</p><img style="zoom: 67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211204609.png" class="lozad"><h2 id="2-1、创建数据库"><a href="#2-1、创建数据库" class="headerlink" title="2.1、创建数据库"></a>2.1、创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="string">`mybatis_test`</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="string">`mybatis_test`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`user`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211121546.png" class="lozad"></p><h2 id="2-2、搭建环境"><a href="#2-2、搭建环境" class="headerlink" title="2.2、搭建环境"></a>2.2、搭建环境</h2><ul><li><p>新建Maven项目（普通的，原生的就行）</p></li><li><p>删除src目录（这样这个项目就是父工程了，可以加module），</p></li><li><p>导入依赖：在pom.xml引入需要的jar包</p></li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211125525.png" class="lozad"></p><h2 id="2-3-、创建子模块"><a href="#2-3-、创建子模块" class="headerlink" title="2.3 、创建子模块"></a>2.3 、创建子模块</h2><h3 id="（1）编写MyBatis核心配置文件"><a href="#（1）编写MyBatis核心配置文件" class="headerlink" title="（1）编写MyBatis核心配置文件"></a>（1）编写MyBatis核心配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- configuration 核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--environments环境   默认环境为 development --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- JDBC的事务管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_test?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（2）编写MyBatis工具类"><a href="#（2）编写MyBatis工具类" class="headerlink" title="（2）编写MyBatis工具类"></a>（2）编写MyBatis工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。</span></span><br><span class="line">    <span class="comment">// SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="comment">// 你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）创建User类（pojo）"><a href="#（3）创建User类（pojo）" class="headerlink" title="（3）创建User类（pojo）"></a>（3）创建User类（pojo）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造 无参构造</span></span><br><span class="line">    <span class="comment">//getter() setter() toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（4）创建Dao接口"><a href="#（4）创建Dao接口" class="headerlink" title="（4）创建Dao接口"></a>（4）创建Dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（5）创建Mapper文件（原为Dao接口的实现类）"><a href="#（5）创建Mapper文件（原为Dao接口的实现类）" class="headerlink" title="（5）创建Mapper文件（原为Dao接口的实现类）"></a>（5）创建Mapper文件（原为Dao接口的实现类）</h3><p>在以前，我们需要创建一个接口实现类，主要做：实现接口 – 重写方法  – 执行SQL语句（该方法舍弃，过于繁琐）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重写方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行SQL语句</span></span><br><span class="line">        String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">        <span class="comment">//结果集 ResultSet</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在现在，我们需要创建一个接口的Mapper文件，主要做：绑定接口 – 重写方法  – 执行SQL语句</p><p>对比发现，步骤没有变，但是使用Mapper文件的优势就是j简化代码，分离代码</p><h3 id="（6）测试"><a href="#（6）测试" class="headerlink" title="（6）测试"></a>（6）测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.yang.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取SqlSession对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 执行Sql语句</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 方式1：使用getMapper获得接口对象，并执行方法（推荐）</span></span><br><span class="line">            <span class="comment">// 面向接口编程</span></span><br><span class="line">            UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">            <span class="comment">// 调用接口子类的方法</span></span><br><span class="line">            List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 方式2：直接调用接口方法(不推荐)</span></span><br><span class="line">            <span class="comment">/*List&lt;User&gt; userList1 = sqlSession.selectList("com.yang.dao.UserDao.getUserList");</span></span><br><span class="line"><span class="comment">            for(User user : userList1)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(user);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭sqlSession</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>开始测试~  报错！</strong></p><p>org.apache.ibatis.binding.BindingException: Type interface com.yang.dao.UserDao is not known to the MapperRegistry.</p><p>翻译下：在Mapper注册中心里，类型接口UserDao是未知的</p><p>也就是说，Mapper文件还要注册到Mapper注册中心中，而Mapper注册中心在哪？就在MyBatis的核心配置文件中。</p></blockquote><h3 id="（7）将Mapper文件注册到Mybatis核心配置文件中"><a href="#（7）将Mapper文件注册到Mybatis核心配置文件中" class="headerlink" title="（7）将Mapper文件注册到Mybatis核心配置文件中"></a>（7）将Mapper文件注册到Mybatis核心配置文件中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 每一个Mapper.xml都需要在Mybatis核心配置文件中注册 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/yang/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次测试！</p><blockquote><p><strong>再次报错！</strong>找不到配置文件？不是配置了吗</p><p>java.io.IOException: Could not find resource com/yang/dao/UserMapper.xml</p><p>这个问题的原因：是资源过滤的问题</p><p> <strong>IDEA的Maven是不会编译src的java目录的xml文件，所以在Mybatis的配置文件中找不到xml文件！</strong> </p></blockquote><p>所以我们需要在子模块的pom.xml中加入如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build配置resource，来防止资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211141027.png" class="lozad"></p><h3 id="（8）总结"><a href="#（8）总结" class="headerlink" title="（8）总结"></a>（8）总结</h3><p>经过这一个小demo的测试，我们得出各个文件中要写的配置：</p><blockquote><p>核心配置文件：配置环境，注册Mapper文件</p><p>Mapper文件：绑定接口，”重写方法“，执行SQL语句</p></blockquote><p>在做的过程中，我们会遇到的问题，以下问题，只需要逐步检查，基本就可以顺利运行了！</p><blockquote><ul><li>配置文件没有注册</li><li>接口绑定错误</li><li>方法名不对</li><li>返回类型不对</li><li>Maven导出资源问题</li></ul></blockquote><h1 id="3：测试类解析"><a href="#3：测试类解析" class="headerlink" title="3：测试类解析"></a>3：测试类解析</h1><h2 id="3-1、3个重要API"><a href="#3-1、3个重要API" class="headerlink" title="3.1、3个重要API"></a>3.1、3个重要API</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211143437.png" class="lozad"></p><p> 作用域和生命周期类是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong> </p><h3 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h3><ul><li>一旦创建了SqlSessionFactory，就不再需要它了</li><li>因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域 （局部变量）</li></ul><h3 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h3><p>关键词：【数据库连接池】【单例】【作用域：全局】</p><ul><li><p>可以理解为：数据库连接池</p></li><li><p>SqlSessionFactory一旦创建就会在应用的运行期间一直存在（数据库连接池一直在）， 没有任何理由丢弃它或重新创建另一个实例。 </p></li><li><p>SqlSessionFactory 的最佳作用域是应用作用域。 </p></li><li><p>最简单的就是使用<strong>单例模式</strong>或者静态单例模式 ：保证只有一个</p></li></ul><h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><ul><li><p>每个线程都应该有它自己的 SqlSession 实例。 （可以理解为 连接到连接池的一个请求）</p></li><li><p>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</p></li><li><p>每次收到的 HTTP 请求，就可以打开一个 SqlSession，返回一个响应，就关闭它。 这个关闭操作是很重要的，你应该把这个关闭操作放到 finally 块中以确保每次都能执行关闭。 （请求用完要关闭）</p></li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211204432.png" class="lozad"></p><h2 id="3-2、Mybatis详细的执行过程（⭐）"><a href="#3-2、Mybatis详细的执行过程（⭐）" class="headerlink" title="3.2、Mybatis详细的执行过程（⭐）"></a>3.2、Mybatis详细的执行过程（⭐）</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213110214.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212104030.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212103944.png" class="lozad"></p><h1 id="6、使用注解开发"><a href="#6、使用注解开发" class="headerlink" title="6、使用注解开发"></a>6、使用注解开发</h1><h2 id="6-1、面向接口编程"><a href="#6-1、面向接口编程" class="headerlink" title="6.1、面向接口编程"></a>6.1、面向接口编程</h2><p>关于接口：</p><blockquote><p>是定义（规范、约束）与实现（名实分离）的分离</p><p>接口本身反映了系统设计人员对系统的抽象理解</p></blockquote><p>为什么面向接口编程？</p><blockquote><p>解耦，可扩展，提高复用，分层开发中，上层不用具体的实现，大家都遵守共同标准，使得 开发变得容易，规范性更好。</p></blockquote><h2 id="6-2、注解开发"><a href="#6-2、注解开发" class="headerlink" title="6.2、注解开发"></a>6.2、注解开发</h2><p>本质：反射机制</p><p>底层：动态代理</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213105758.png" class="lozad"></p><p>注解在接口上实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><strong>在核心配置文件中绑定接口</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 注册（绑定）接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.yang.dao.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            UserMapper userMapper =</span><br><span class="line">                    sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">            List&lt;User&gt; users = userMapper.getUsers();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (User user :users)&#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭sqlSession</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212103152.png" class="lozad"></p><p>缺点：只能处理简单的语句，对于复杂的，使用XML来配置是更好的选择</p><h2 id="6-3、使用-Param实现CRUD"><a href="#6-3、使用-Param实现CRUD" class="headerlink" title="6.3、使用@Param实现CRUD"></a>6.3、使用@Param实现CRUD</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212112400.png" class="lozad"></p><blockquote><p>基本类型或String类型的参数，需要加上</p><p>引用类型不需要加</p><p>如只有一个基本类型的话，可以忽略，但建议加上！</p><p>多个参数时，所有参数前必须加上@Param注解</p><p>在SQL中引用的就是@param中设定的属性名</p></blockquote><p>接口，增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多个参数时，所有参数前必须加上@Param注解</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;uid&#125; and name=#&#123;uname&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(@Param(<span class="string">"uid"</span>)</span> Integer id,@<span class="title">Param</span><span class="params">(<span class="string">"uname"</span>)</span>String name)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(id,name,pwd) values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set name=#&#123;username&#125;,pwd=#&#123;password&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delUser</span><span class="params">(@Param(<span class="string">"uid"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            List&lt;User&gt; users = userMapper.getUsers();</span></span><br><span class="line"><span class="comment">            for (User user :users)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(user);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            User user = userMapper.getUserById(1,"阿大");</span></span><br><span class="line"><span class="comment">            System.out.println(user);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            userMapper.addUser(new User(5,"xxx","654321"));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            userMapper.updateUser(new User(5,"ccc","123654"));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            userMapper.delUser(5);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭sqlSession</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="4：配置文件解析"><a href="#4：配置文件解析" class="headerlink" title="4：配置文件解析"></a>4：配置文件解析</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211163441.png" class="lozad"></p><h2 id="4-1、environments-环境配置"><a href="#4-1、environments-环境配置" class="headerlink" title="4.1、environments 环境配置"></a>4.1、environments 环境配置</h2><blockquote><p>默认环境配置（⭐）：</p><ul><li>默认使用的环境 ID（比如：default=”development”）。</li><li>每个 environment 元素定义的环境 ID（比如：id=”development”）。</li><li>事务管理器的配置（比如：type=”JDBC”）。</li><li>数据源的配置（比如：type=”POOLED”）。</li></ul></blockquote><h2 id="4-2、properties-属性"><a href="#4-2、properties-属性" class="headerlink" title="4.2、properties 属性"></a>4.2、properties 属性</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        也可以内部配置属性</span></span><br><span class="line"><span class="comment">        如果内部定义的属性和外部文件的属性相同，优先使用外部文件的属性值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="username" value="root"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="password" value="123456"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   environments环境配置</span></span><br><span class="line"><span class="comment">   可配置多个环境，但只能选一个</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            事务管理器 默认为JDBC</span></span><br><span class="line"><span class="comment">            在MyBatis中，有两种类型的事务管理器，也就是 type=”[JDBC|MANAGED]”</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            数据源 用来连接数据库 默认为POOLED</span></span><br><span class="line"><span class="comment">            有三种内建的数据源类型，也就是 type=”[UNPOOLED|POOLED|JNDI]”</span></span><br><span class="line"><span class="comment">                UNPOOLED：不使用池</span></span><br><span class="line"><span class="comment">                POOLED：使用池（池：用完可以回收）</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3、typeAliases-类型别名"><a href="#4-3、typeAliases-类型别名" class="headerlink" title="4.3、typeAliases 类型别名"></a>4.3、typeAliases 类型别名</h2><p>作用： 减少类完全限定名的冗余 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 给实体类起别名--&gt;</span><br><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;!--给单个类起别名--&gt;</span><br><span class="line">    &lt;typeAlias type=<span class="string">"com.yang.pojo.User"</span> alias=<span class="string">"user"</span>/&gt;</span><br><span class="line">    &lt;!--给一个包下的所有类起别名，默认别名为该类的类名的首字母小写</span><br><span class="line">        但是，当要给这个包下的某个类单独起别名时，也可以在类上加上注解 <span class="meta">@Alias</span>(<span class="string">"hello"</span>)</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;<span class="keyword">package</span> name=<span class="string">"com.yang.pojo"</span>/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="meta">@Alias</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认别名， 常见的 Java 类型内建的相应的类型别名 </p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211173258.png" class="lozad"></p><h2 id="4-4、settings-设置"><a href="#4-4、settings-设置" class="headerlink" title="4.4、settings 设置"></a>4.4、settings 设置</h2><p> 需要了解的设置</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211175039.png" class="lozad"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">--</span> 完整案例 <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"PARTIAL"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingUnknownColumnBehavior"</span> <span class="attr">value</span>=<span class="string">"WARNING"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultFetchSize"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"safeRowBoundsEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"OTHER"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">"equals,clone,hashCode,toString"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-5、mappers-映射器"><a href="#4-5、mappers-映射器" class="headerlink" title="4.5、mappers 映射器"></a>4.5、mappers 映射器</h2><p>MapperRegistry：注册绑定Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用相对路径的资源引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/yang/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.yang.dao.UserMapper"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将包中的映射器接口实现完全注册为映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.yang.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><p>使用class 和 package 注册映射文件时，</p><ul><li>接口和其Mapper配置文件必须同名！</li><li>接口和其Mapper配置文件必须在同一个包下！</li></ul></blockquote><h2 id="4-6、其他配置"><a href="#4-6、其他配置" class="headerlink" title="4.6、其他配置"></a>4.6、其他配置</h2><p>typeHandler 类型处理器</p><p>objectFactory 对象工厂</p><p>plugins 插件</p><ul><li>mybatis-plus</li><li>mybatis-generator-core</li><li>通用mapper</li></ul><h1 id="5：XML映射文件"><a href="#5：XML映射文件" class="headerlink" title="5：XML映射文件"></a>5：XML映射文件</h1><blockquote><p>namespace：名称空间  接口名 （绑定接口）</p><p>id ：唯一标识符，就是对应的namespace的方法名 （重写方法）</p><p>parameterType：参数类型</p><p>resultType：sql语句执行的返回值</p></blockquote><blockquote><p>步骤：编写接口和方法  —&gt; 编写对应的Mapper文件的sql语句  — &gt; 测试</p><p><strong>注意：增删改操作都需要提交事务，查询不用</strong></p></blockquote><h2 id="5-1、CRUD测试"><a href="#5-1、CRUD测试" class="headerlink" title="5.1、CRUD测试"></a>5.1、CRUD测试</h2><h3 id="（1）接口"><a href="#（1）接口" class="headerlink" title="（1）接口"></a>（1）接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据ID查找用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个用户</span></span><br><span class="line">    <span class="function">Integer <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改用户</span></span><br><span class="line">    <span class="function">Integer <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除一个用户</span></span><br><span class="line">    <span class="function">Integer <span class="title">delUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###（2）Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace == 绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yang.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultType</span>=<span class="string">"com.yang.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.yang.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 对象中的属性，可以直接取出来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.yang.pojo.User"</span>&gt;</span></span><br><span class="line">        insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.yang.pojo.User"</span>&gt;</span></span><br><span class="line">        update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（3）测试"><a href="#（3）测试" class="headerlink" title="（3）测试"></a>（3）测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.yang.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取SqlSession对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 执行Sql语句</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 面向接口编程</span></span><br><span class="line">            UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">            <span class="comment">// 调用接口子类的方法</span></span><br><span class="line">            List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line">            <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭sqlSession</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">// 执行sql语句</span></span><br><span class="line">        UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);  <span class="comment">// User&#123;id=1, name='阿大', pwd='123456'&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：增删改需要提交事务</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        Integer result = mapper.addUser(<span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">"阿四"</span>, <span class="string">"123456"</span>));</span><br><span class="line">        <span class="keyword">if</span> (result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"插入成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUSer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        Integer res = mapper.updateUser(<span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"张三"</span>, <span class="string">"123456"</span>));</span><br><span class="line">        <span class="keyword">if</span> (res&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"修改成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        Integer res = mapper.delUser(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (res&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"删除成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（4）结果"><a href="#（4）结果" class="headerlink" title="（4）结果"></a>（4）结果</h3><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211153752.png" class="lozad"><h2 id="5-2、模糊查询-like"><a href="#5-2、模糊查询-like" class="headerlink" title="5.2、模糊查询 like"></a>5.2、模糊查询 like</h2><h3 id="（1）在Java代码中传递通配符"><a href="#（1）在Java代码中传递通配符" class="headerlink" title="（1）在Java代码中传递通配符"></a>（1）在Java代码中传递通配符</h3><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据模糊查询查找用户</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLike</span><span class="params">(String value)</span></span>;</span><br></pre></td></tr></table></figure><p>Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByLike"</span> <span class="attr">resultType</span>=<span class="string">"com.yang.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from user where name like #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLike</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserByLike(<span class="string">"%阿%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211162936.png" class="lozad"></p><h3 id="（2）在SQL语句中拼接通配符（不推荐）"><a href="#（2）在SQL语句中拼接通配符（不推荐）" class="headerlink" title="（2）在SQL语句中拼接通配符（不推荐）"></a>（2）在SQL语句中拼接通配符（不推荐）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---- 修改Mapper文件 ----</span><br><span class="line">&lt;select id=<span class="string">"getUserByLike"</span> resultType=<span class="string">"com.yang.pojo.User"</span>&gt;</span><br><span class="line">        select * from user where name like "%"#&#123;value&#125;"%"</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">  </span><br><span class="line">---- 修改测试类 ----</span><br><span class="line">List&lt;User&gt; userList = mapper.getUserByLike(<span class="string">"阿"</span>);</span><br></pre></td></tr></table></figure><p>但是这样会导致SQL注入，不安全，因此不推荐使用！</p><h2 id="5-3、万能Map"><a href="#5-3、万能Map" class="headerlink" title="5.3、万能Map"></a>5.3、万能Map</h2><p>上述例子里，我们直接使用了实体类来作为参数类型，这样只要参数名和实体类的属性名一致就可以传进去。</p><p>需求：修改id为4的用户的名字。</p><blockquote><p>上述需求很简单，只要一个update标签里传入User类型就可以。</p><p>但是当我们的实体类的属性达到一定数量（100个）时，如果我们还是使用实体类型作为参数的话，那么就要在SQL中写100个属性，这样子明显很繁琐。</p><p>因此我们可以尝试使用Map</p><blockquote><p>当字段名或实体类属性过多时，可以考虑使用 Map 作为 Mapper 的参数类型</p></blockquote></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211160503.png" class="lozad"></p><p>总结：</p><blockquote><ul><li>Map传递参数时，直接在SQL中取出key即可</li><li>对象传递参数时，直接在SQL中取出对象的属性即可</li><li>只有一个基本数据类型的参数的情况下，可以直接在sql中取到！</li><li><strong>多个参数时，不用实体类，使用Map或者注解！</strong></li></ul></blockquote><h2 id="5-4、resultMap"><a href="#5-4、resultMap" class="headerlink" title="5.4、resultMap"></a>5.4、resultMap</h2><blockquote><p> <code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。 </p><p> 在为一些比如连接的复杂语句编写映射代码的时候，一份 <code>resultMap</code> 能够代替实现同等功能的长达数千行的代码。 </p><p> ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。 </p></blockquote><h3 id="（1）属性名和字段名不一致（result字段）"><a href="#（1）属性名和字段名不一致（result字段）" class="headerlink" title="（1）属性名和字段名不一致（result字段）"></a>（1）属性名和字段名不一致（result字段）</h3><p>问题：解决属性名和字段名不一致的问题</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211210021.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211210120.png" class="lozad"></p><p>思路：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; select * from user where id = #&#123;id&#125;  </span><br><span class="line">&gt;  相当于</span><br><span class="line">&gt; select id,name,pwd from user where id = #&#123;id&#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; 类型处理器，会去找实体类中对应的属性名，当字段与属性名不一致时，属性没有查找到，因为就变成null了</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>解决方案：</p><ul><li>第一种方法：起别名（简单暴力）<ul><li>优点：简单</li><li>缺点：字段名多的时候，书写非常复杂，时SQL语句看起来很多，不美观</li></ul></li></ul><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211210853.png" class="lozad"><ul><li>第二种方法：resultMap（结果集映射）<ul><li>将  数据库中的列  映射成  实体类的属性</li></ul></li></ul><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211211817.png" class="lozad"><ul><li>上述的resultMap还可以再简化：数据库的id和实体类的id名称是一致的，因此不需要映射。</li></ul><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211213002.png" class="lozad"><h3 id="（2）多对一查询"><a href="#（2）多对一查询" class="headerlink" title="（2）多对一查询"></a>（2）多对一查询</h3><blockquote><p>举例：多个学生对应一个老师</p><ul><li>对于学生而言：<strong>关联关系</strong>：多个学生关联一个老师【多对一】</li><li>对于老师而言，<strong>集合关系</strong>：一个老师，有多个学生【一对多】</li></ul></blockquote><blockquote><p>环境配置</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212152509.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212152643.png" class="lozad"></p></blockquote><p>####（2-1）按照查询嵌套处理（分步 子查询）</p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询学生信息</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getStudent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yang.dao.StudentMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        思路：子查询</span></span><br><span class="line"><span class="comment">            1.查询所有学生信息</span></span><br><span class="line"><span class="comment">            2/根据学生的tid查询对应的老师</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher"</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span>  <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--复杂的属性，需要单独处理  对象：association，集合：collection--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"tid"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">javaType</span>=<span class="string">"Teacher"</span> <span class="attr">seleTct</span>=<span class="string">"getTeacher"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        select * from teacher where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">        List&lt;Student&gt; studentList = mapper.getStudent();</span><br><span class="line">        <span class="keyword">for</span> (Student student: studentList)&#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212151459.png" class="lozad"></p><h4 id="（2-2）按照结果嵌套处理（一步-联表查询）"><a href="#（2-2）按照结果嵌套处理（一步-联表查询）" class="headerlink" title="（2-2）按照结果嵌套处理（一步 联表查询）"></a>（2-2）按照结果嵌套处理（一步 联表查询）</h4><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询学生信息</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getStudent2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yang.dao.StudentMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent2"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher2"</span>&gt;</span></span><br><span class="line">        select s.id sid,s.name sname,t.id tid,t.name tname</span><br><span class="line">        from student s,teacher t</span><br><span class="line">        where s.tid = t.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher2"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">    List&lt;Student&gt; studentList = mapper.getStudent2();</span><br><span class="line">    <span class="keyword">for</span> (Student student: studentList)&#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212154600.png" class="lozad"></p><h3 id="（3）一对多查询"><a href="#（3）一对多查询" class="headerlink" title="（3）一对多查询"></a>（3）一对多查询</h3><blockquote><p>环境搭建（修改实体类即可）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212155323.png" class="lozad"></p></blockquote><h4 id="（3-1）按照查询嵌套处理"><a href="#（3-1）按照查询嵌套处理" class="headerlink" title="（3-1）按照查询嵌套处理"></a>（3-1）按照查询嵌套处理</h4><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeacherMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取老师及其学生的所有信息</span></span><br><span class="line">    <span class="function">Teacher <span class="title">getTeacher2</span><span class="params">(@Param(<span class="string">"tid"</span>)</span><span class="keyword">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TeacherMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yang.dao.TeacherMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher2"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent2"</span>&gt;</span></span><br><span class="line">        select * from teacher where id = #&#123;tid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent2"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">ofType</span>=<span class="string">"Student"</span> <span class="attr">select</span>=<span class="string">"getStudentByTid"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByTid"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        select * from student where tid = #&#123;tid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yang.dao.TeacherMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher2"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent2"</span>&gt;</span></span><br><span class="line">        select * from teacher where id = #&#123;tid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent2"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">ofType</span>=<span class="string">"Student"</span> <span class="attr">select</span>=<span class="string">"getStudentByTid"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByTid"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        select * from student where tid = #&#123;tid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Teacher(</span><br><span class="line">    id=0, </span><br><span class="line">    name=苍老师, </span><br><span class="line">    students=[</span><br><span class="line">        Student(id=1, name=熊大, tid=1),</span><br><span class="line">        Student(id=2, name=熊二, tid=1), </span><br><span class="line">        Student(id=3, name=熊三, tid=1), </span><br><span class="line">        Student(id=4, name=熊四, tid=1)</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>分析</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212163033.png" class="lozad"></p><h4 id="（3-2）按照结果嵌套处理"><a href="#（3-2）按照结果嵌套处理" class="headerlink" title="（3-2）按照结果嵌套处理"></a>（3-2）按照结果嵌套处理</h4><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeacherMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取老师及其学生的所有信息</span></span><br><span class="line">    <span class="function">Teacher <span class="title">getTeacher</span><span class="params">(@Param(<span class="string">"tid"</span>)</span><span class="keyword">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TeacherMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yang.dao.TeacherMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent"</span>&gt;</span></span><br><span class="line">        select s.id sid,s.name sname,t.id tid,t.name tname</span><br><span class="line">        from student s, teacher t</span><br><span class="line">        where s.tid=t.id and t.id=#&#123;tid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            类型是List&lt;Student&gt;集合，因此使用collection</span></span><br><span class="line"><span class="comment">            javaType:指定属性的类型</span></span><br><span class="line"><span class="comment">            ofType:指定集合中的泛型信息</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tid"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    Teacher teacher = sqlSession.getMapper(TeacherMapper.class).getTeacher(<span class="number">1</span>);</span><br><span class="line">    System.out.println(teacher);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Teacher(</span><br><span class="line">    id=1, </span><br><span class="line">    name=苍老师, </span><br><span class="line">    students=[</span><br><span class="line">        Student(id=1, name=熊大, tid=1),</span><br><span class="line">        Student(id=2, name=熊二, tid=1), </span><br><span class="line">        Student(id=3, name=熊三, tid=1), </span><br><span class="line">        Student(id=4, name=熊四, tid=1)</span><br><span class="line">]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>分析</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212161729.png" class="lozad"></p><blockquote><p><strong>小结</strong></p><p> 关联：association【多对一】</p><p>集合：collection【一对多】</p><p>javaType：用来指定实体类中属性的类型</p><p>ofType：用来指定映射到List或者集合中的pojo类，即泛型中的约束类型</p><p><strong>注意点</strong></p><ul><li>保证SQL的可读性，尽量保证SQL通俗易懂</li><li>注意一对多和多对一中，属性名和字段的问题！</li></ul></blockquote><p>面试高频：</p><ul><li>MySql引擎</li><li>InnoDB底层原理</li><li>索引</li><li>索引优化</li></ul><h2 id="5-6、日志"><a href="#5-6、日志" class="headerlink" title="5.6、日志"></a>5.6、日志</h2><h3 id="（1）日志工厂"><a href="#（1）日志工厂" class="headerlink" title="（1）日志工厂"></a>（1）日志工厂</h3><p>我们在做数据库操作时发生异常，需要排错，此时日志能提高我们排错的效率！</p><p>以前：sout，debug</p><p>现在：日志工厂！</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211233722.png" class="lozad"></p><p>在Mybatis中，可以在核心配置文件的<code>&lt;settings&gt;</code>中设置使用的日志</p><p>常用的日志工厂为</p><ol><li><strong>STDOUT_LOGGING（标准日志输出）</strong></li></ol><ul><li>配置日志</li></ul><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">settings</span>&gt;</span>   </span><br><span class="line">&gt;     <span class="comment">&lt;!-- 标准的日志工厂实现 --&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li>查询输出的日志</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191211234514.png" class="lozad"></p><ol start="2"><li><strong>LOG4j</strong></li></ol><ul><li><p>什么是LOG4j？</p><ul><li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995" target="_blank" rel="noopener">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/控制台/2438626" target="_blank" rel="noopener">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI" target="_blank" rel="noopener">GUI</a>组件 </li><li>也可以控制每一条日志的输出格式； </li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。 </li><li>这些可以通过一个<a href="https://baike.baidu.com/item/配置文件/286550" target="_blank" rel="noopener">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。 </li></ul></li><li><p>配置</p><ul><li><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>log4j配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>使用</p><p>在要使用log4j的类中，导入包 org.apache.log4j.Logger</p><p>日志对象，参数修改为当前类的class</p><p>日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">"info:进入了testLog4j"</span>);</span><br><span class="line">logger.debug(<span class="string">"debug:进入了testLog4j"</span>);</span><br><span class="line">logger.error(<span class="string">"error:进入了testLog4j"</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="5-7、分页"><a href="#5-7、分页" class="headerlink" title="5.7、分页"></a>5.7、分页</h2><p>为甚分页？</p><ul><li>当数据条目过多时，服务器负担过重，因此分页可以<strong>减少服务器对数据的处理量</strong></li></ul><h3 id="（1）使用limit分页-⭐"><a href="#（1）使用limit分页-⭐" class="headerlink" title="（1）使用limit分页(⭐)"></a>（1）使用limit分页(⭐)</h3><p>特点：在SQL中实现分页，使用map传入起始索引和该页条目（推荐使用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user limit startIndex,pageSize //起始索引，该页的条目</span><br></pre></td></tr></table></figure><p>（1-1）接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><p>（1-2）Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yang.dao.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;result column="id" property="id"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByLimit"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">        select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（1-3）测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"startIndex"</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"pageSize"</span>,<span class="number">2</span>);</span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserByLimit(map);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(User user:userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//User&#123;id=2, username='阿二', password='123456'&#125;</span></span><br><span class="line">        <span class="comment">//User&#123;id=4, username='小强', password='123456'&#125;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="（2）使用RowBounds分页"><a href="#（2）使用RowBounds分页" class="headerlink" title="（2）使用RowBounds分页"></a>（2）使用RowBounds分页</h3><p>特点：不在SQL中实现分页（因此不推荐使用）</p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--namespace == 绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yang.dao.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;result column="id" property="id"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByRowBounds"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByRowBounds</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        List&lt;User&gt; userList = </span><br><span class="line">            sqlSession.selectList(<span class="string">"com.yang.dao.UserMapper.getUserByRowBounds"</span>, <span class="keyword">null</span>, rowBounds);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212100738.png" class="lozad"></p><h3 id="（3）分页插件-PageHelper"><a href="#（3）分页插件-PageHelper" class="headerlink" title="（3）分页插件 PageHelper"></a>（3）分页插件 PageHelper</h3><p>见官网</p><h1 id="7、Lombok"><a href="#7、Lombok" class="headerlink" title="7、Lombok"></a>7、Lombok</h1><p>（1）在IDEA中安装插件，重启</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212113828.png" class="lozad"></p><p>（2）导入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）测试：在实体类上加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212125616.png" class="lozad"><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 常用注解：</span><br><span class="line">&gt; @Data：无参、getter、setter、equals、hashCode、toString</span><br><span class="line">&gt; @AllArgsConstructor :有参构造：会覆盖@Data的无参</span><br><span class="line">&gt; @NoArgsConstructor：无参构造</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="8、动态SQL"><a href="#8、动态SQL" class="headerlink" title="8、动态SQL"></a>8、动态SQL</h1><p>什么是动态SQL？</p><blockquote><p><strong>就是指根据不同的条件生成不同的SQL语句</strong></p><p><strong>所谓的动态SQL，本质还是SQL语句，只是我们可以在SQL层面，去执行一个逻辑代码</strong></p><p> 如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。 </p><p><strong>动态SQL就是在拼接SQL语句，只要保证SQL的正确性，按照SQL的格式，去排列组合就可以。</strong></p><blockquote><p>建议：先写出原SQL语句，再使用动态SQL标签实现通用即可。</p></blockquote></blockquote><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>1、创建表blog</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212165734.png" class="lozad"></p><p>2、编写配置文件</p><p>3、编写实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性与字段名不一致，要开启驼峰命名</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、编写实体类对应的Mapper接口和Mapper.xml文件</p><p>5、附加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>,<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(IDUtils.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态SQL元素"><a href="#动态SQL元素" class="headerlink" title="动态SQL元素"></a>动态SQL元素</h3><blockquote><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul></blockquote><h4 id="if-where"><a href="#if-where" class="headerlink" title="if + where"></a>if + where</h4><p>动态前置 where 关键字，同时也会删除无关的and和or</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212180218.png" class="lozad"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIF"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            and title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogIF</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">"title"</span>,<span class="string">"今天你胖了嘛1"</span>);</span><br><span class="line">    map.put(<span class="string">"author"</span>,<span class="string">"小样1"</span>);</span><br><span class="line">    mapper.queryBlogIF(map);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212174038.png" class="lozad"></p><h4 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h4><p>只满足一个条件，其余的不执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogChoose</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogChoose"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">        select * from blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">                    title = #&#123;title&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">                    author = #&#123;author&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"views != null"</span>&gt;</span></span><br><span class="line">                    views = #&#123;views&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogChoose</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">"title"</span>,<span class="string">"今天你胖了嘛1"</span>);</span><br><span class="line">    map.put(<span class="string">"author"</span>,<span class="string">"小样2"</span>);</span><br><span class="line">    mapper.queryBlogChoose(map);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212174751.png" class="lozad"></p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>会动态前置set关键字，同时也会删除无关逗号</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212180238.png" class="lozad"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateBlog</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBlog"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBlog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">"title"</span>,<span class="string">"今天你胖了嘛111"</span>);</span><br><span class="line">    map.put(<span class="string">"author"</span>,<span class="string">"小样111"</span>);</span><br><span class="line">    map.put(<span class="string">"id"</span>,<span class="string">"66f0bde031434002860413badc7ce13d"</span>);</span><br><span class="line">    mapper.updateBlog(map);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212175928.png" class="lozad"></p><h4 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h4><p>有些时候，有一些重复的功能代码，这是我们可以考虑抽取出来，方便复用！</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212181054.png" class="lozad"></p><blockquote><p>注意：</p><ul><li>最好基于单表来定义SQL片段</li><li>不要存在where标签</li></ul></blockquote><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>对一个集合遍历，通常是在构建IN条件语句时。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212203310.png" class="lozad"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询id 为1 2 3 的博客</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogForeach</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--select * from blog where (id=? or id=?)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">collection:list名称 </span></span><br><span class="line"><span class="comment">item：list的遍历的每一元素名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogForeach"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        select * from blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">" ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line">                id = #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        ArrayList&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ids.add(<span class="number">1</span>);</span><br><span class="line">        ids.add(<span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">"ids"</span>,ids);</span><br><span class="line">        List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);</span><br><span class="line">        <span class="keyword">for</span>(Blog blog:blogs)&#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212203705.png" class="lozad"></p><h1 id="9、缓存（cache）-了解"><a href="#9、缓存（cache）-了解" class="headerlink" title="9、缓存（cache）(了解)"></a>9、缓存（cache）(了解)</h1><p>查询，需要连接数据库，这是一件很耗费资源的事情。</p><p>为了减少资源浪费，我们可以：</p><p>将一次查询到的结果，暂存到一个可以直接取到的地方！</p><p>即内存，放到内存的这些暂存的数据，就叫缓存。</p><p>当我们再次查询相同数据时，直接走缓存，就不用访问数据库了。</p><h2 id="9-1、介绍"><a href="#9-1、介绍" class="headerlink" title="9.1、介绍"></a>9.1、介绍</h2><ul><li><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212205214.png" class="lozad"></li></ul><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>一级缓存，也称本地缓存：SqlSession</p><ul><li>与数据库同一次会话期间查询到的数据会放到本地缓存中</li><li>若需要获取相同的数据，直接从本地缓存中取，无需再查询数据库</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User user1 = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line"></span><br><span class="line">    User user2 = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user1==user2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212212127.png" class="lozad"></p><p>缓存失效的情况：</p><p>1、增删改操作，可能会改变原来的数据，所以必定会刷新缓存。刷新缓存就会使缓存失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    </span><br><span class="line">    User user1 = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line"></span><br><span class="line">    mapper.updateUser(<span class="keyword">new</span> User(<span class="number">4</span>,<span class="string">"赵六"</span>,<span class="string">"222222"</span>));</span><br><span class="line"></span><br><span class="line">    User user2 = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    </span><br><span class="line">    System.out.println(user1==user2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212212649.png" class="lozad"></p><p>2、查询不同的数据</p><p>3、查询不同的Mapper.xml</p><p>4、手动清除缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user1 = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        sqlSession.clearCache();    <span class="comment">//手动清理缓存</span></span><br><span class="line"></span><br><span class="line">        User user2 = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">        System.out.println(user1==user2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212212942.png" class="lozad"></p><p>小结：一级缓存默认开启，只在一次SqlSession中有效，也就是获取连接到关闭连接这期间有效！</p><p>一级缓存默认开启的好处就是：当用户在一次SqlSession中重复刷新，不会重复请求数据库，只会在一级缓存中取数据，大大降低了数据库的压力！</p><p>一级缓存就是一个Map</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212234829.png" class="lozad"></p><p>默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。 要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache/&gt;</span><br></pre></td></tr></table></figure><p>步骤：</p><p>1、开启全局缓存</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191212234500.png" class="lozad"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 显式的开启全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>2、使用二级缓存（在要使用二级缓存的Mapper文件中）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启二级缓存(不添加自定义参数时，实体类要实现序列化) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​    也可添加自定义参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">"FIFO"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">"60000"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">"512"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。 </p><p>3、测试</p><p>在不同的SqlSession中，获取相同数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user1 = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">        sqlSession.close(); <span class="comment">//关闭后，一级缓存被放入二级缓存中</span></span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession2= MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper2 = sqlSession2.getMapper(UserMapper.class);</span><br><span class="line">        User user2 = mapper2.getUserById(<span class="number">1</span>);    <span class="comment">//直接从二级缓存中取</span></span><br><span class="line">        System.out.println(user2);</span><br><span class="line">        System.out.println(user1==user2);</span><br><span class="line">        sqlSession2.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213003124.png" class="lozad"></p><p>4、小结</p><p>只要开启了二级缓存，在同一个Mapper文件下就有效</p><p>所有数据都会先放在一级缓存中，等到会话提交或者关闭时，才会提交到二级缓存中</p><h2 id="缓存原理"><a href="#缓存原理" class="headerlink" title="缓存原理"></a>缓存原理</h2><p>!(<a href="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213003955.jpg" target="_blank" rel="noopener">https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213003955.jpg</a>)</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191213103050.png" class="lozad"></p><h2 id="自定义缓存"><a href="#自定义缓存" class="headerlink" title="自定义缓存"></a>自定义缓存</h2><h3 id="ehcache"><a href="#ehcache" class="headerlink" title="ehcache"></a>ehcache</h3><blockquote><p>EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider。</p><p> Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存,Java EE和轻量级容器。 </p></blockquote><p>先导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class="line"><span class="comment">       user.home – 用户主目录</span></span><br><span class="line"><span class="comment">       user.dir  – 用户当前工作目录</span></span><br><span class="line"><span class="comment">       java.io.tmpdir – 默认临时文件路径</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/Tmp_EhCache"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      name:缓存名称。</span></span><br><span class="line"><span class="comment">      maxElementsInMemory:缓存最大数目</span></span><br><span class="line"><span class="comment">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span></span><br><span class="line"><span class="comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class="line"><span class="comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class="line"><span class="comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class="line"><span class="comment">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class="line"><span class="comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class="line"><span class="comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class="line"><span class="comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"259200"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"cloud_user"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"5000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在需要开启二级缓存的mapper.xml中，指定要使用的ehcache缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启ehcache缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义缓存-1"><a href="#自定义缓存-1" class="headerlink" title="自定义缓存"></a>自定义缓存</h3><p>也可以自定义缓存</p><p>新建Mycache.java，这个类要实现Cache接口，重写其中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.cache.Cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mycache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object o, Object o1)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">removeObject</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就可以在mapper文件中，开启自定义的缓存了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"com.yang.utils.Mycache"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>现在一般使用Redis来做缓存！（K-V）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1：简介&quot;&gt;&lt;a href=&quot;#1：简介&quot; class=&quot;headerlink&quot; title=&quot;1：简介&quot;&gt;&lt;/a&gt;1：简介&lt;/h1&gt;&lt;h2 id=&quot;1-1、什么是MyBatis？&quot;&gt;&lt;a href=&quot;#1-1、什么是MyBatis？&quot; class=&quot;header
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>集合框架 复习</title>
    <link href="https://cometorbityh.github.io/2019/12/08/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E5%A4%8D%E4%B9%A0/"/>
    <id>https://cometorbityh.github.io/2019/12/08/集合框架-复习/</id>
    <published>2019-12-08T13:50:53.000Z</published>
    <updated>2019-12-08T13:50:53.393Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC 学习</title>
    <link href="https://cometorbityh.github.io/2019/12/07/SpringMVC-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://cometorbityh.github.io/2019/12/07/SpringMVC-学习/</id>
    <published>2019-12-07T03:18:39.000Z</published>
    <updated>2019-12-27T16:02:07.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC的执行流程（⭐）"><a href="#SpringMVC的执行流程（⭐）" class="headerlink" title="SpringMVC的执行流程（⭐）"></a>SpringMVC的执行流程（⭐）</h1><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207154610.png" class="lozad"></p><p>步骤简述</p><blockquote><ol><li>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。<ul><li>我们假设请求的url为 : <a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/SpringMVC/hello</li><li><strong>如上url拆分成三部分：</strong></li><li><a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080服务器域名</li><li>SpringMVC部署在服务器上的web站点</li><li>hello表示控制器</li><li>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</li></ul></li><li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</li><li>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</li><li>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</li><li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li><li>Handler让具体的Controller执行。</li><li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</li><li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li><li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li><li>最终视图呈现给用户。</li></ol></blockquote><h1 id="第一个SpringMVC"><a href="#第一个SpringMVC" class="headerlink" title="第一个SpringMVC"></a>第一个SpringMVC</h1><p>控制器Controller</p><ul><li>控制器复杂提供访问应用程序的行为，通常通过<strong>接口定义</strong>或<strong>注解定义</strong>两种方法实现。</li><li>控制器负责解析用户的请求并将其转换为一个模型。</li><li>在Spring MVC中一个控制器类可以包含多个方法</li></ul><h2 id="方法1：实现Controller接口"><a href="#方法1：实现Controller接口" class="headerlink" title="方法1：实现Controller接口"></a>方法1：实现Controller接口</h2><h3 id="Controller接口介绍"><a href="#Controller接口介绍" class="headerlink" title="Controller接口介绍"></a>Controller接口介绍</h3><p>简述：</p><p> Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法； </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现该接口的类获得控制器功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">//处理请求且返回一个模型与视图对象</span></span><br><span class="line">    <span class="function">ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>实现Controller接口后，配置文件可以不用配置处理器映射器和处理器适配器，只留下视图解析器，也能运行。</p></blockquote><p>缺点：</p><blockquote><p>一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦； </p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>项目结构</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207162402.png" class="lozad"></p><h4 id="1）导入依赖"><a href="#1）导入依赖" class="headerlink" title="1）导入依赖"></a>1）导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2）web-xml（前端控制器）"><a href="#2）web-xml（前端控制器）" class="headerlink" title="2）web.xml（前端控制器）"></a>2）web.xml（前端控制器）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注册前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 关联springmvc的配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动级别：1   服务器启动时启动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- /  匹配所有请求 不包括jsp--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /* 匹配所有请求 包括jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3）springmvc-servlet-xml（springmvc核心配置文件）"><a href="#3）springmvc-servlet-xml（springmvc核心配置文件）" class="headerlink" title="3）springmvc-servlet.xml（springmvc核心配置文件）"></a>3）springmvc-servlet.xml（springmvc核心配置文件）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置处理器映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置处理器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注册Handler --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.yang.controller.HelloController"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4）HelloController-控制器"><a href="#4）HelloController-控制器" class="headerlink" title="4）HelloController 控制器"></a>4）HelloController 控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"你好 SpringMVC"</span>);</span><br><span class="line">        mv.setViewName(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5）视图页面"><a href="#5）视图页面" class="headerlink" title="5）视图页面"></a>5）视图页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;基于xml配置的SpringMVC&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        $&#123;msg&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="6）结果显示"><a href="#6）结果显示" class="headerlink" title="6）结果显示"></a>6）结果显示</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207161921.png" class="lozad"></p><h2 id="方法2：使用注解"><a href="#方法2：使用注解" class="headerlink" title="方法2：使用注解"></a>方法2：使用注解</h2><h3 id="Controller注解"><a href="#Controller注解" class="headerlink" title="Controller注解"></a>Controller注解</h3><p>这四个注解其实都一个意思。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component：   组件</span><br><span class="line">@Controller：  controller</span><br><span class="line">@Service：     service</span><br><span class="line">@Repository：  dao</span><br></pre></td></tr></table></figure><p>加入Controller注解后，表示这个类被Spring接管，</p><p>那么这个类中的所有方法中，如果返回值是String类型的，并且有具体页面可以跳转，那么就会被视图解析器解析，相当于是逻辑视图。</p><blockquote><p> 物理视图  =  前缀 + 逻辑视图 + 后缀</p></blockquote><h3 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="RequestMapping注解"></a>RequestMapping注解</h3><p>用于映射url到一个特定的类或方法</p><p>如果同时注解在类和方法上，那么在访问url时，应该进行url拼接，才能访问到特定的方法。</p><p>如果url带多个参数，则需要在形参前添加一个新注解：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207194024.png" class="lozad"></p><blockquote><p>注意：接收的形参尽量不要用基本数据类型，改而用包装类，避免为null，否则容易报异常</p><blockquote><p>Optional int parameter ‘xx’ is present but cannot be translated into a null value</p></blockquote></blockquote><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="1）导入依赖-1"><a href="#1）导入依赖-1" class="headerlink" title="1）导入依赖"></a>1）导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2）web-xml（前端控制器）-1"><a href="#2）web-xml（前端控制器）-1" class="headerlink" title="2）web.xml（前端控制器）"></a>2）web.xml（前端控制器）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注册前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 关联springmvc的配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动级别：1   服务器启动时启动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- /  匹配所有请求 不包括jsp--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /* 匹配所有请求 包括jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3）springmvc-servlet-xml（配置文件）"><a href="#3）springmvc-servlet-xml（配置文件）" class="headerlink" title="3）springmvc-servlet.xml（配置文件）"></a>3）springmvc-servlet.xml（配置文件）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解扫描：自动扫描包，使指定包下的注解生效，由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yang.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--资源过滤：使SpringMVC不处理静态资源 （.css,.js,.html,.mp3,.mp4）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       支持mvc注解驱动【注入处理器适配器和处理器映射器】</span></span><br><span class="line"><span class="comment">           在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">           要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">           必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">           和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">           这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">           而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4）HelloController-控制器-1"><a href="#4）HelloController-控制器-1" class="headerlink" title="4）HelloController 控制器"></a>4）HelloController 控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>     <span class="comment">//自动装配到springmvc配置文件中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"Hello SpringMVC!"</span>);</span><br><span class="line">        <span class="comment">// 封装视图</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5）视图页面-1"><a href="#5）视图页面-1" class="headerlink" title="5）视图页面"></a>5）视图页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;基于注解&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="6）结果展示"><a href="#6）结果展示" class="headerlink" title="6）结果展示"></a>6）结果展示</h4><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207165645.png" class="lozad"></p><h1 id="Restful风格"><a href="#Restful风格" class="headerlink" title="Restful风格"></a>Restful风格</h1><p> Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。 </p><p><strong>功能</strong></p><ul><li>资源：互联网所有的事物都可以被抽象为资源</li><li>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</li><li>分别对应 添加、 删除、修改、查询。</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207194756.png" class="lozad"></p><p><strong>特点</strong>：简洁，高效，安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/&#123;a1&#125;/&#123;a2&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">item</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @PathVariable(<span class="string">"a1"</span>)</span>Integer a1,</span></span><br><span class="line"><span class="function">            @<span class="title">PathVariable</span><span class="params">(<span class="string">"a2"</span>)</span>Integer a2,</span></span><br><span class="line"><span class="function">            Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"result"</span>,<span class="string">"输出结果："</span> + (a1+a2));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>使用method属性指定请求类型</strong> </p><h1 id="转发-重定向"><a href="#转发-重定向" class="headerlink" title="转发 + 重定向"></a>转发 + 重定向</h1><p>配置了视图解析器，让我们无需写前后缀，就可以跳转到某个页面。</p><p>若没有配置视图解析器，那如何进行跳转？</p><p>无非就是加上前后缀</p><ul><li>转发：<code>return &quot;forward:/WEB-INF/jsp/hello.jsp&quot;;</code></li><li>重定向：<code>return &quot;redirect:/index.jsp&quot;;</code></li></ul><h1 id="获取请求参数-数据回显"><a href="#获取请求参数-数据回显" class="headerlink" title="获取请求参数 数据回显"></a>获取请求参数 数据回显</h1><h3 id="接收一个数据"><a href="#接收一个数据" class="headerlink" title="接收一个数据"></a>接收一个数据</h3><p>获取情断发送来的请求参数。当请求参数名字与方法中的形参名不一致时，接收不到消息。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207212252.png" class="lozad"></p><p>使用注解<code>@RequestParam</code>可以指明请求参数的名称。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207212818.png" class="lozad"></p><h3 id="接收一个对象"><a href="#接收一个对象" class="headerlink" title="接收一个对象"></a>接收一个对象</h3><p>url传来的参数名需要和对象的属性名一样，否则接收到的值是null。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207213142.png" class="lozad"></p><h3 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h3><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191207214611.png" class="lozad"></p><p>Model – 精简版的ModelMap，推荐使用</p><p>ModelMap – 继承自LinkedHashMap类，有LinkedHashMap类的所有方法，还有自身的方法。</p><h1 id="乱码问题（过滤器）"><a href="#乱码问题（过滤器）" class="headerlink" title="乱码问题（过滤器）"></a>乱码问题（过滤器）</h1><p>在web.xml中加上乱码过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--字符编码过滤器：解决乱码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="拦截器（拦截处理器）"><a href="#拦截器（拦截处理器）" class="headerlink" title="拦截器（拦截处理器）"></a>拦截器（拦截处理器）</h1><p> SpringMVC的处理器拦截器  类似于  Servlet开发中的过滤器Filter</p><p>用于<strong>对处理器进行预处理和后处理</strong>。开发者可以自己定义一些拦截器来实现特定的功能。 </p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用（切面）。</p><p><strong>过滤器</strong></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul><p><strong>拦截器</strong></p><ul><li><p>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</p><p>（是在springmvc的配置文件中配置的，不是web.xml中配置的）</p></li><li><p>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</p></li></ul><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><p>那如何实现拦截器呢？</p><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p><p>其中的方法不需要强制实现，找有需要的方法实现即可。</p><p>（1）自定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在请求处理的方法之前执行</span></span><br><span class="line">    <span class="comment">//如果返回true执行下一个拦截器(放行，请求通过)</span></span><br><span class="line">    <span class="comment">//如果返回false就不执行下一个拦截器(拦截，请求无法通过)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------------处理前------------"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在请求处理方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------------处理后------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在dispatcherServlet处理后执行,做清理工作.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------------清理------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）注册拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--被拦截的请求--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/** 包括路径及其子路径--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.yang.interceptor.MyInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）编写控制器 （测试拦截器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/interceptor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"控制器中的方法执行了"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215134545.png" class="lozad"></p><h2 id="使用拦截器进行登录验证"><a href="#使用拦截器进行登录验证" class="headerlink" title="使用拦截器进行登录验证"></a>使用拦截器进行登录验证</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215145558.png" class="lozad"></p><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h2&gt;&lt;a href="$&#123;pageContext.request.contextPath&#125;/user/goLogin"&gt;登录&lt;/a&gt;&lt;/h2&gt;</span><br><span class="line">  &lt;a href="$&#123;pageContext.request.contextPath&#125;/user/goMain"&gt;首页&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>login.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;登录&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>main.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;首页&lt;/h3&gt;</span><br><span class="line">    &lt;span&gt;$&#123;username&#125;&lt;/span&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/user/goOut"&gt;注销&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>LoginController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.codec.ServerSentEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/goMain"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/goLogin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session, String username, String password, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将用户信息保存在session中</span></span><br><span class="line">        session.setAttribute(<span class="string">"userLoginInfo"</span>,username);</span><br><span class="line">        model.addAttribute(<span class="string">"username"</span>,username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/goOut"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">goOUt</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">        session.removeAttribute(<span class="string">"userLoginInfo"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoginInterceptor.java（拦截器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">// 放行：如果请求登录</span></span><br><span class="line">        <span class="keyword">if</span>(request.getRequestURI().contains(<span class="string">"login"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放行：如果在登录页面</span></span><br><span class="line">        <span class="keyword">if</span>(request.getRequestURI().contains(<span class="string">"goLogin"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放行：如果已经登录，判断session中有没有用户信息</span></span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(<span class="string">"userLoginInfo"</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拦截，跳转到登录页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/login.jsp"</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springmvc-servlet.xml（配置文件）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解扫描：自动扫描包，使指定包下的注解生效，由IOC容器统一管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yang"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--资源过滤：使SpringMVC不处理静态资源 （.css,.js,.html,.mp3,.mp4）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--支持mvc注解驱动【注入处理器适配器和处理器映射器】--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--拦截user请求下的所有请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.yang.interceptor.LoginInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215145459.gif" class="lozad"></p><h1 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h1><p>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，</p><p>但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。</p><p>如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p><p>前端表单要求：为了能上传文件，</p><p>必须将表单的method设置为POST，</p><p>并将enctype设置为multipart/form-data。</p><p>只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p><blockquote><p> multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。 </p></blockquote><p>总结：</p><blockquote><p><strong>pom.xml</strong>：导包</p><p><strong>配置文件</strong>：配置MultipartResolver</p><p><strong>表单</strong>：method设置为POST，enctype设置为multipart/form-data</p></blockquote><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p> 导包：导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包； </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api导入高版本的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>表单</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/upload2"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件</strong>：配置MultipartResolver</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置 bean的id必须为：multipartResolver--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span>  <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>控制器</strong>（推荐方式二）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方式一</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@RequestParam("file") 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span></span><br><span class="line">    <span class="comment">//批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> CommonsMultipartFile file , HttpServletRequest request) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件名 : file.getOriginalFilename();</span></span><br><span class="line">        String uploadFileName = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果文件名为空，直接回到首页！</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">""</span>.equals(uploadFileName))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"上传文件名 : "</span>+uploadFileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传路径保存设置</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">        <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">        File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">            realPath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"上传文件保存地址："</span>+realPath);</span><br><span class="line"></span><br><span class="line">        InputStream is = file.getInputStream(); <span class="comment">//文件输入流</span></span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(realPath,uploadFileName)); <span class="comment">//文件输出流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取写出</span></span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            os.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 方式二：采用file.Transto 来保存上传的文件(推荐)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/upload2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">fileUpload2</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> CommonsMultipartFile file, HttpServletRequest request) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传路径保存设置</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">        File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">            realPath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//上传文件地址</span></span><br><span class="line">        System.out.println(<span class="string">"上传文件保存地址："</span>+realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">        file.transferTo(<span class="keyword">new</span> File(realPath +<span class="string">"/"</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 文件下载</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/download"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">downloads</span><span class="params">(HttpServletResponse response , HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//要下载的图片地址</span></span><br><span class="line">        String  path = request.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">        String  fileName = <span class="string">"legacy.png"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、设置response 响应头</span></span><br><span class="line">        response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>); <span class="comment">//字符编码</span></span><br><span class="line">        response.setContentType(<span class="string">"multipart/form-data"</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">        <span class="comment">//设置响应头</span></span><br><span class="line">        response.setHeader(<span class="string">"Content-Disposition"</span>,</span><br><span class="line">                <span class="string">"attachment;fileName="</span>+ URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line">        <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">        InputStream input=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">        OutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buff =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//4、执行 写出操作</span></span><br><span class="line">        <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        input.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215152009.gif" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191215152941.gif" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringMVC的执行流程（⭐）&quot;&gt;&lt;a href=&quot;#SpringMVC的执行流程（⭐）&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC的执行流程（⭐）&quot;&gt;&lt;/a&gt;SpringMVC的执行流程（⭐）&lt;/h1&gt;&lt;h2 id=&quot;执行流程&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA 基础合集</title>
    <link href="https://cometorbityh.github.io/2019/12/04/JAVA-%E5%9F%BA%E7%A1%80%E5%90%88%E9%9B%86/"/>
    <id>https://cometorbityh.github.io/2019/12/04/JAVA-基础合集/</id>
    <published>2019-12-04T07:13:37.000Z</published>
    <updated>2019-12-10T14:45:48.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="1：数组是一种引用类型"><a href="#1：数组是一种引用类型" class="headerlink" title="1：数组是一种引用类型"></a>1：数组是一种引用类型</h2><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191208145932.png" class="lozad"><p><img alt="image-20191208150458557" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191208150458557.png" class="lozad"></p><p>基本数据类型的变量都存储在栈中</p><blockquote><p>栈的特点是：存储空间小，存取速度较块，先进先出</p></blockquote><p>引用数据类型的变量都存取在堆中</p><blockquote><p>堆的特点是：存储空间大，存取速度较慢，后进先出</p></blockquote><p><strong>数组就是一种引用类型</strong></p><h2 id="2：数组的使用"><a href="#2：数组的使用" class="headerlink" title="2：数组的使用"></a>2：数组的使用</h2><p>1）创建数组</p><ul><li>int[] arr = new int[3];</li><li>int[] arr = new int[]{1,2,3,4}; //不指定长度，由初始化的元素个数指定。</li><li>char[] arr={‘a’,’b’,’c’};</li></ul><p>2）获取数组某一元素的值：数组名[元素下标]</p><p>3）获取数组长度：数组名.length</p><h2 id="3：数组：冒泡排序-选择排序"><a href="#3：数组：冒泡排序-选择排序" class="headerlink" title="3：数组：冒泡排序 + 选择排序"></a>3：数组：冒泡排序 + 选择排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a=&#123;<span class="number">80</span>,<span class="number">3</span>,<span class="number">77</span>,<span class="number">99</span>,<span class="number">66</span>,<span class="number">44</span>,<span class="number">33</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 冒泡排序 */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*for (int i=0;i&lt;a.length;i++)&#123;</span></span><br><span class="line"><span class="comment">            for(int j=0;j&lt;a.length-1;j++) &#123;</span></span><br><span class="line"><span class="comment">                if (a[j] &gt; a[j + 1]) &#123;</span></span><br><span class="line"><span class="comment">                    int temp;</span></span><br><span class="line"><span class="comment">                    temp = a[j];</span></span><br><span class="line"><span class="comment">                    a[j] = a[j + 1];</span></span><br><span class="line"><span class="comment">                    a[j + 1] = temp;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for (int k:a)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(k);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 选择排序 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 假设第一个元素式最小值 </span></span><br><span class="line">            <span class="keyword">int</span> min=i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;a.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="comment">// 给min重新赋值</span></span><br><span class="line">                <span class="keyword">if</span> (a[min]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    min=j+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 交换位置</span></span><br><span class="line">            <span class="keyword">if</span> (min!=i)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp;</span><br><span class="line">                temp = a[i];</span><br><span class="line">                a[i]=a[min];</span><br><span class="line">                a[min]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k:a)&#123;</span><br><span class="line">            System.out.println(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4）数组的倒置"><a href="#4）数组的倒置" class="headerlink" title="4）数组的倒置"></a>4）数组的倒置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">array01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr=&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>&#125;;</span><br><span class="line">        reverseArr(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 数组倒置</span></span><br><span class="line"><span class="comment">    *   * 找到中间值的索引 arr.length/2</span></span><br><span class="line"><span class="comment">    *   * 遍历数组的左边部分</span></span><br><span class="line"><span class="comment">    *      *对调左右两边对称的元素： a[i] &lt;==&gt; a[arr.length-1-i]</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseArr</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[arr.length-<span class="number">1</span>-i];</span><br><span class="line">            arr[arr.length-<span class="number">1</span>-i] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5）二维数组（了解）"><a href="#5）二维数组（了解）" class="headerlink" title="5）二维数组（了解）"></a>5）二维数组（了解）</h2><h1 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h1><h2 id="面向对象思想概述"><a href="#面向对象思想概述" class="headerlink" title="面向对象思想概述"></a>面向对象思想概述</h2><p>面向对象编程，OOP（Object Oriented Programming），在Java中，万物皆对象</p><blockquote><p>面向对象是以功能和属性划分的，而不是步骤。看重的是事物的功能。</p><p>编程就是模拟生活。使用面向对象的思想时，可以认为“万物皆对象”。</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191208160450.png" class="lozad"></p><h2 id="2：类与对象"><a href="#2：类与对象" class="headerlink" title="2：类与对象"></a>2：类与对象</h2><h3 id="2-1：类"><a href="#2-1：类" class="headerlink" title="2.1：类"></a>2.1：类</h3><p>定义：把某些具有相同的属性和行为的事物抽象成一个类。</p><blockquote><p>范例：</p><p>学生（类）</p><ul><li>属性：学号，姓名，年龄…</li><li>行为：学习，上课…</li></ul></blockquote><h3 id="2-2：对象"><a href="#2-2：对象" class="headerlink" title="2.2：对象"></a>2.2：对象</h3><p>类是一个概念，对象是一个具体的实例</p><blockquote><p>类：狗</p><p>对象：电线杆旁边正在占地盘的旺财</p></blockquote><h3 id="2-3：类的语法"><a href="#2-3：类的语法" class="headerlink" title="2.3：类的语法"></a>2.3：类的语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class 类名()&#123;</span><br><span class="line">属性</span><br><span class="line">方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类名的规范</p><ul><li>驼峰原则：XxxXxx</li><li>见名知意</li></ul><h3 id="2-4：创建对象-调用方法"><a href="#2-4：创建对象-调用方法" class="headerlink" title="2.4：创建对象 调用方法"></a>2.4：创建对象 调用方法</h3><p>创建对象</p><ul><li>类名 对象名 = new 类名()；</li></ul><p>调用方法</p><ul><li>对象名.方法名();</li></ul><h1 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h1><p>字符串概述</p><blockquote><p>String str= “hello”;</p></blockquote><p>字符串是类，是引用数据类型，不是基本数据类型</p><p>str是定义的一个字符串的常量，常量是不可改变的，因此字符串是不可改变的</p><h1 id="关键字集锦"><a href="#关键字集锦" class="headerlink" title="关键字集锦"></a>关键字集锦</h1><h2 id="1：static"><a href="#1：static" class="headerlink" title="1：static"></a>1：static</h2><h3 id="1-1：static在属性上"><a href="#1-1：static在属性上" class="headerlink" title="1.1：static在属性上"></a>1.1：static在属性上</h3><p>加上static的属性，称为 类属性 或 静态属性。</p><p>静态属性的特点</p><ol><li><p>静态属性处于数据共享区。静态属性可以被每一个对象共享</p></li><li><p>静态属性的产生：</p><blockquote><p>当class文件加载进入jvm时，类属性就被初始化了。因此静态属性在创建对象之前就已经存在了。</p><p>在jvm执行完毕class文件（class文件出了jvm）之后销毁。</p><p>也就是说，静态属性与class文件的生命周期保持一致</p></blockquote></li><li><p>静态属性与普通属性的区别</p><blockquote><p>静态属性在类加载时初始化，普通属性在对象创建时初始化。</p></blockquote></li><li><p>静态属性的访问：</p><blockquote><p>类名.静态属性    或    对象名.静态属性</p></blockquote></li></ol><h3 id="1-2：static在方法上"><a href="#1-2：static在方法上" class="headerlink" title="1.2：static在方法上"></a>1.2：static在方法上</h3><p>加上static的方法，称为 类方法 或 静态方法。</p><p>静态方法的特点</p><ol><li><p>静态方法处于数据共享区。静态方法可以被每一个对象共享。在jvm加载该类时，静态方法和对象方法都已经进入jvm了，但是对象方法不一定被调用了，只有先创建对象，才能调用对象方法。</p></li><li><p>静态方法的产生：</p><blockquote><p>当class文件加载进入jvm时，类方法就被初始化了。因此静态方法在创建对象之前就已经存在了。</p><p>在jvm执行完毕class文件（class文件出了jvm）之后销毁。</p><p>也就是说，静态方法与class文件的生命周期保持一致</p></blockquote></li><li><p>静态方法的访问：</p><blockquote><p>类名.静态方法()    或    对象名.静态方法()</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;h2 id=&quot;1：数组是一种引用类型&quot;&gt;&lt;a href=&quot;#1：数组是一种引用类型&quot; class=&quot;headerlink&quot; title=&quot;1：数
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA 面向对象3大特性 总结</title>
    <link href="https://cometorbityh.github.io/2019/12/01/JAVA-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A13%E5%A4%A7%E7%89%B9%E6%80%A7-%E6%80%BB%E7%BB%93/"/>
    <id>https://cometorbityh.github.io/2019/12/01/JAVA-面向对象3大特性-总结/</id>
    <published>2019-12-01T05:43:37.000Z</published>
    <updated>2019-12-01T16:36:07.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>面向对象的三大特征：封装性，继承性，多态性</p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="什么是继承？"><a href="#什么是继承？" class="headerlink" title="什么是继承？"></a>什么是继承？</h2><blockquote><p>继承是从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为，并能<strong>扩展</strong>新的能力</p><p>继承是多态的前提，没有继承就没有多态 </p><p>继承主要解决的问题：<strong>共性抽取</strong></p></blockquote><img alt="image-20191201134947732" style="zoom:50%;" data-src="C:\Users\Administrator.RG4-44\AppData\Roaming\Typora\typora-user-images\image-20191201134947732.png" class="lozad"><h2 id="继承的3大特点"><a href="#继承的3大特点" class="headerlink" title="继承的3大特点"></a>继承的3大特点</h2><p>单继承：Java语言是单继承的，一个类的直接父类只能有一个</p><p>多级继承：Java语言可以多级继承，子类有一个父类，父类也可以有父类</p><p>多子类：一个子类只能有一个父类，但一个父类可以有多个子类</p><h2 id="继承的格式"><a href="#继承的格式" class="headerlink" title="继承的格式"></a>继承的格式</h2><p>关键字：<code>extends</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 父类名称</span>&#123;</span><br><span class="line"><span class="comment">//... ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类名称 <span class="keyword">extends</span> 父类名称</span>&#123;</span><br><span class="line"><span class="comment">//... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承中的子类"><a href="#继承中的子类" class="headerlink" title="继承中的子类"></a>继承中的子类</h2><p>在继承关系中，“子类就是一个父类”，子类可以被当成父类来看待。</p><p>例如：父类员工，子类讲师，那么“讲师就是一个员工”，二者之间关系：is-a</p><p>子类对象可以访问父类的方法，但父类对象无法访问子类的方法</p><h3 id="子类的特征"><a href="#子类的特征" class="headerlink" title="子类的特征"></a>子类的特征</h3><blockquote><ul><li>子类拥有父类*<em>非 private *</em>的属性，方法</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展</li><li>子类可以用自己的方式实现父类的方法</li><li>Java的继承是单继承，但是可以多重继承，<ul><li>单继承就是一个子类只能继承一个父类，</li><li>多重继承就是，例如A类继承B类，B类继承C类，</li><li>所以按照关系就是C类是B类的父类，B类是A类的父类，这是java继承区别于C++继承的一个特性</li></ul></li><li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系）</li></ul></blockquote><h3 id="重写（override）"><a href="#重写（override）" class="headerlink" title="重写（override）"></a>重写（override）</h3><p>重写：也称覆盖，是子类重写父类的方法，方法名和参数列表都一样，发生在继承关系中</p><blockquote><p>重写的特点：</p><ul><li><p>子类和父类的方法名和参数列表都一样</p></li><li><p>子类方法的返回值范围必须<strong>小于等于</strong>父类方法的返回值范围</p></li></ul><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201150431.png" class="lozad"><ul><li>子类方法的权限修饰符必须<strong>大于等于</strong>父类方法的权限修饰符（public &gt; protected &gt; default &gt; private）<ul><li>备注：default不是关键字，而是什么都不写，留空</li></ul></li></ul><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201150744.png" class="lozad"></blockquote><blockquote><p>重载（overload）：重载构造方法，方法名一样但参数列表不一样，发生在构造方法中</p></blockquote><h3 id="继承中构造方法的关系"><a href="#继承中构造方法的关系" class="headerlink" title="继承中构造方法的关系"></a>继承中构造方法的关系</h3><p>子类每一个构造方法的第一条语句默认都是<code>super()</code>，即子类中所有的构造方法默认都会先执行父类的<strong>无参构造</strong>方法，而且一个子类构造不能调用多个父类构造（super只能有一个，在第一句）</p><p>也可以通过super关键字，实现子类的构造调用父类的重载构造，注意非子类构造方法，无法通过super调用父类构造方法</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201152000.png" class="lozad"></p><h3 id="继承中成员变量的访问"><a href="#继承中成员变量的访问" class="headerlink" title="继承中成员变量的访问"></a>继承中成员变量的访问</h3><p>在父子类的继承关系当中，若成员变量重名，创建子类对象时，访问有2中方式</p><p>子类对象 . 成员变量 – &gt; 子类的成员变量</p><p>子类对象 . 父类的成员方法 —&gt;父类的成员方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问成员变量的原则：就近原则</span><br></pre></td></tr></table></figure><ul><li><p>访问局部变量：直接写成员变量</p></li><li><p>访问本类的成员变量：this.成员变量</p></li><li><p>访问父类的成员变量：super.成员变量</p></li></ul><h3 id="this与super"><a href="#this与super" class="headerlink" title="this与super"></a>this与super</h3><p>super关键字的三种用法（访问父类内容）</p><p>在子类的成员方法中，访问父类的成员变量</p><p>在子类的成员方法中，访问父类的成员方法</p><p>在子类的构造方法中，访问父类的构造方法</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201152855.png" class="lozad"></p><p>this关键字的三种方法（访问本类内容）</p><p>在本类的成员方法中，访问本类的成员变量</p><p>在本类的成员方法中，访问本类的另一成员方法</p><p>在本类的构造方法中，访问本类的另一构造方法（注意<code>this(...)</code>必须是构造方法的第一句，那么this与super就不能共存）</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201153539.png" class="lozad"><h1 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h1><p>抽象方法：加上abstract关键字，没有方法体（去掉大括号，直接分号结束）</p><p>抽象类：抽象方法所在的类，必须是抽象类，在class前加上abstract即可</p><p>抽象类可以有抽象方法，也可以有普通方法，可以有构造方法</p><h2 id="抽象类和抽象方法的使用"><a href="#抽象类和抽象方法的使用" class="headerlink" title="抽象类和抽象方法的使用"></a>抽象类和抽象方法的使用</h2><blockquote><p>抽象类【无法直接创建】抽象对象</p><p>必须使用子类【继承】抽象类</p><p>抽象类的子类必须【覆盖】抽象父类的【所有抽象方法】</p><p>创建子类对象进行使用</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>抽象类不能创建对象，只能创建其非抽象类子类的对象</p><p>抽象类中可以有构造方法，是供子类创建对象时，初始化父类成员使用的</p><p>抽象类中不一定包含抽象方法，但是包含抽象方法的类一定是抽象类</p><p>抽象类的子类，一定要覆盖抽象类中的所有抽象方法，否则会编译报错，除非子类也是抽象类</p></blockquote><img style="zoom:80%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201155339.png" class="lozad"><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201160624.png" class="lozad"><h1 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h1><p>生活中，USB接口随处可见。电脑的，机箱的，打印机的….，他们的接口都是一样的。是每一个USB厂商都默认遵守的规范。因此我们可以说：</p><blockquote><p>接口是一种通用的规范标准</p><p>接口是多个类的公共规范</p><p>接口是一种引用数据类型，其中最重要的内容是，<strong>抽象方法</strong></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p><strong>接口</strong></p><p>接口没有静态代码块、构造方法</p><p>接口有</p><ul><li>JDK7：常量、抽象方法</li><li>JDK8：默认方法、静态方法</li><li>JDK9：私有方法</li></ul><p><strong>实现类与接口</strong></p><p>一个类只能继承一个父类，但是可以实现多个接口</p><p>如果实现类实现的多个接口中，存在重复的抽象方法（A接口和B接口都有），那么只需要重写一次即可</p><p>如果实现类实现的多个接口中，存在重复的默认方法（A接口和B接口都有），那么实现类一定要对冲突的默认方法重写</p><p>如果实现类没有重写所有接口的所有方法，那么就必须是一个抽象类</p><p>如果一个类，直接父类的方法和接口的默认方法产生冲突，优先用父类的方法</p><p><strong>类与类之间是单继承的，类与接口之间是多实现的，接口与接口之间是多继承的</strong></p></blockquote><h2 id="接口的格式"><a href="#接口的格式" class="headerlink" title="接口的格式"></a>接口的格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名称</span>&#123;</span><br><span class="line"><span class="comment">//接口内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：接口编译生成的字节码文件依然是：<code>.java--&gt; .class</code>，而不是<code>.interface</code></p></blockquote><h2 id="接口中的内容"><a href="#接口中的内容" class="headerlink" title="接口中的内容"></a>接口中的内容</h2><p>Java 7 的接口内容：常量，抽象方法</p><p>Java 8 的接口内容：常量，抽象方法，默认方法，静态方法</p><p>Java 9 的接口内容：常量，抽象方法，默认方法，静态方法，私有方法</p><h3 id="抽象方法（⭐）"><a href="#抽象方法（⭐）" class="headerlink" title="抽象方法（⭐）"></a>抽象方法（⭐）</h3><p>抽象方法格式：<code>public abstract 返回值类型 方法名（参数列表）;</code></p><blockquote><p>接口的抽象方法，修饰父必须是2个固定关键字：public abstract，可省略</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201162330.png" class="lozad"></p><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><p>接口无法直接使用，需要创建“实现类”来“实现”接口</p><p>实现类格式：<code>public class 实现类名称 implements 接口名称{ //....  }</code></p><blockquote><p>接口的实现类必须覆盖（实现）接口中所有的抽象方法，再创建实现类对象来使用</p><p>如果实现类没有覆盖所有的抽象方法，那么这个实现类必须是抽象类</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201163244.png" class="lozad"></p><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>默认方法：Java 8 开始，接口允许定义默认方法</p><p>格式：<code>public default 返回值类型 方法名称(参数列表){ 方法体 }</code></p><p>应用：解决接口升级的问题</p><blockquote><p>假设一个接口有3个抽象方法，有3个实现类，这3个实现类都重写了这3个方法。</p><p>现在有新的抽象方法加入，也就是说，这个接口现在有 4个抽象方法，因此3个实现类都必须重写这个新的抽象方法（否则会报错），这样带来的结果就是很麻烦，要一个一个去重写。</p><p>此时我们可以将这个抽象方法换成默认方法，默认方法的特点就是：<strong>实现类不用去重写</strong>，这样就避免了接口升级时，实现类不得不重写抽象方法的问题了。</p></blockquote><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201164554.png" class="lozad"><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>静态方法：Java 8 开始，接口允许定义静态方法</p><p>格式：<code>public static 返回值类型 方法名称(参数列表){ 方法体 }</code></p><blockquote><p>无法通过接口实现类对象去调用接口当中的静态方法</p><p>通过接口名称直接调用接口的静态方法</p></blockquote><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201165707.png" class="lozad"><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>私有方法：Java 9 开始，接口允许定义私有方法。</p><p>普通私有方法：解决多个默认方法之间重复代码问题</p><p>格式：<code>private 返回值类型 方法名称(参数列表){ 方法体 }</code></p><p>静态私有方法：解决多个静态方法之间重复代码问题</p><p>格式：<code>private static 返回值类型 方法名称(参数列表){ 方法体 }</code></p><blockquote><p>假设有1个接口，有2个默认方法，其中出现了代码重复，因此我们在用一个默认方法将这些重复代码提取出来。但是这样，问题来了，默认方法是可以被实现类访问到的，我们不应该把这个方法面向实现类，而是应该私有化。</p><p>Java 9 开始，接口允许定义私有方法。</p></blockquote><p>（由于我使用的JDK1.8 ，因此无法实际操作，这里只是做个演示）</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201171330.png" class="lozad"><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201171754.png" class="lozad"><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量格式：<code>public static final 数据类型 常量名称=数据值;</code></p><blockquote><p>接口的常量，修饰符必须是3个固定关键字：public static final，可省略，</p><p>注意：</p><p>接口中的常量，必须进行<strong>赋值</strong>，一旦赋值，就<strong>不可以修改</strong>了</p><p>常量名一般<strong>大写</strong>，用<strong>下划线</strong>进行分隔</p></blockquote><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201172558.png" class="lozad"><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="什么是多态？"><a href="#什么是多态？" class="headerlink" title="什么是多态？"></a>什么是多态？</h2><p> 多态指的是同一个方法调用，由于对象不同可能会有不同的行为。</p><p>  <strong>多态的要点：</strong></p><ol><li><p>多态是方法的多态，不是属性的多态(<strong>多态与属性无关</strong>)。</p></li><li><p>多态的存在要有3个必要条件：继承，方法重写，<strong>父类引用指向子类对象</strong>。</p></li><li><p>父类引用指向子类对象后，用该父类引用调用子类重写的方法</p></li></ol><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p><code>父类名称 对象名 = new 子类名称（）;</code></p><p><code>接口名称 对象名 = new 实现类名称（）;</code></p><h2 id="多态的作用"><a href="#多态的作用" class="headerlink" title="多态的作用"></a>多态的作用</h2><p> 消除类型之间的耦合关系 </p><blockquote><p>如何理解？</p><p> 没有多态，那么等号左边是啥右边就得是啥，这就叫<a href="https://www.baidu.com/s?wd=耦合&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">耦合</a>，有了多态，左边是父类（或者接口），右边是子类（或实现类），我只管调用接口里面的方法就是了，至于你实现类怎么去实现，那是你的事，你要修改一下实现，你只管去把实现类换掉，我这边一行代码都不用变，这就<a href="https://www.baidu.com/s?wd=解耦&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">解耦</a>了 </p></blockquote><h2 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h2><p>1)可替换性<br>2)可扩充性<br>3)接口性<br>4)灵活性 </p><h2 id="访问成员变量的方式"><a href="#访问成员变量的方式" class="headerlink" title="访问成员变量的方式"></a>访问成员变量的方式</h2><p>直接通过对象名称访问成员变量：多态与属性无关，父类引用无法访问子类的属性，只能访问父类的属性</p><p>间接通过成员方法访问成员变量：多态与方法有关，父类引用可以访问子类重写的方法</p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201195257.png" class="lozad"><h2 id="访问子类成员方法的规则"><a href="#访问子类成员方法的规则" class="headerlink" title="访问子类成员方法的规则"></a>访问子类成员方法的规则</h2><p>使用多态方式调用方法：首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。 </p><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201200725.png" class="lozad"><h2 id="对象的向上转型"><a href="#对象的向上转型" class="headerlink" title="对象的向上转型"></a>对象的向上转型</h2><p>其实就是多态写法</p><p><code>父类名称 对象名 = new 子类名称（）;</code></p><p>含义：右侧创建一个子类对象，把它当成父类来看待</p><p>例如：Animal animal = new Cat(); 创建了一只猫，把它当成动物看待</p><blockquote><p>注意：向上转型一定是安全的，从小范围转到大范围</p><p>eg：double num=100；    //正确，int —&gt; double，自动类型转换</p></blockquote><blockquote><p>弊端：对象一旦向上转型为父类，那么就无法调用子类原本<strong>特有</strong>的方法</p><p>解决方案：用对象的向下转型还原</p></blockquote><h2 id="对象的向下转型-instanceof"><a href="#对象的向下转型-instanceof" class="headerlink" title="对象的向下转型 + instanceof"></a>对象的向下转型 + instanceof</h2><p>其实是一个还原动作</p><p><code>子类名称 对象名= (子类名称)父类对象;</code></p><p>含义：将父类对象还原成为本来的子类对象</p><p>例如：</p><blockquote><p>Animal animal = new Cat();  //猫 向上转型为 动物</p><p>Cat cat = (Cat) animal; // 本来是猫，被当成动物，现在又还原成猫了</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201202828.png" class="lozad"></p><blockquote><p>如果一只猫向上转型为动物，而动物又向下转型为狗，那在运行时就会报异常ClassCastException，此时该怎么解决？</p><p>解决：使用instanceof关键字判断</p></blockquote><p><code>A instanceof B</code>:判断A是否是B类的实例</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201210745.png" class="lozad"></p><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><blockquote><p>对于类和方法，abstract和final关键字不能同时使用，因为矛盾</p></blockquote><h2 id="final修饰一个类"><a href="#final修饰一个类" class="headerlink" title="final修饰一个类"></a>final修饰一个类</h2><p>当final修饰一个类时，这个类就不能有子类（太监类、最终类）</p><p>一个类如果是最终类，那么其中的所有成员方法都无法进行覆盖重写（没有子类）</p><blockquote><p>在JDK中，被设计为 final 类的有 String、System 等 </p></blockquote><h2 id="final修饰一个方法"><a href="#final修饰一个方法" class="headerlink" title="final修饰一个方法"></a>final修饰一个方法</h2><p>当final修饰一个方法时，这个方法就是最终方法，也就是不能被覆盖重写</p><h2 id="final修饰一个局部变量"><a href="#final修饰一个局部变量" class="headerlink" title="final修饰一个局部变量"></a>final修饰一个局部变量</h2><p>当final修饰一个局部变量时，这个变量就不能更改，一次赋值终身不变</p><h2 id="final修饰一个成员变量"><a href="#final修饰一个成员变量" class="headerlink" title="final修饰一个成员变量"></a>final修饰一个成员变量</h2><p>当final修饰一个局部变量时，这个变量就不能更改</p><p>由于成员变量有默认值，所以用了final必须手动赋值</p><p> 当用final来修饰对象时，不能改变对象的引用，但是可以修改对象的属性值。 </p><h1 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h1><table><thead><tr><th></th><th>public</th><th>protected</th><th>（default）</th><th>private</th></tr></thead><tbody><tr><td>同一个类</td><td>YES</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>同一个包</td><td>YES</td><td>YES</td><td>YES</td><td>NO</td></tr><tr><td>不同包子类</td><td>YES</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>不同包非子类</td><td>YES</td><td>NO</td><td>NO</td><td>NO</td></tr></tbody></table><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="内部类的权限修饰符规则"><a href="#内部类的权限修饰符规则" class="headerlink" title="内部类的权限修饰符规则"></a>内部类的权限修饰符规则</h2><p>外部类：public / （default）</p><p>成员内部类：public / protected / （default）/private</p><p>局部内部类：什么都不能写</p><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>定义在类内部的类，就叫成员内部类</p><h3 id="定义的格式"><a href="#定义的格式" class="headerlink" title="定义的格式"></a>定义的格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称</span>&#123;</span><br><span class="line">    修饰符 <span class="class"><span class="keyword">class</span> 成员内部类名称</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 注意：内用外，随意访问，外用内，需要内部类对象</p></blockquote><h3 id="创建内部类对象"><a href="#创建内部类对象" class="headerlink" title="创建内部类对象"></a>创建内部类对象</h3><blockquote><p>间接方法：使用外部类的成员方法调用内部类</p><p>直接方法：<code>外部类名称.内部类名称 内部类对象名 = new 外部类名称().new 内部类名称</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodBody</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类的方法..."</span>);</span><br><span class="line">        <span class="comment">//创建内部类对象，调用内部类方法</span></span><br><span class="line">        <span class="keyword">new</span> Heart().beat();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 内部类访问外部类成员变量</span></span><br><span class="line">            System.out.println(<span class="string">"心脏跳动..."</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BodyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Body body = <span class="keyword">new</span> Body();</span><br><span class="line">        <span class="comment">// 方法一：间接调用</span></span><br><span class="line">        <span class="comment">// 使用外部类·成员方法调用内部类</span></span><br><span class="line">        body.methodBody();</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        <span class="comment">//方法二：直接调用</span></span><br><span class="line">        Body.Heart heart = <span class="keyword">new</span> Body().new Heart();</span><br><span class="line">        heart.beat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------- 控制台输出 -------------</span><br><span class="line">心脏跳动...<span class="keyword">null</span></span><br><span class="line">===========================</span><br><span class="line">心脏跳动...<span class="keyword">null</span></span><br></pre></td></tr></table></figure><h3 id="重名变量的调用"><a href="#重名变量的调用" class="headerlink" title="重名变量的调用"></a>重名变量的调用</h3><p>内部类调用：</p><ul><li>内部类的成员方法的局部变量：<code>局部变量名</code></li><li>内部类的成员变量：<code>this . 成员变量名</code></li><li>外部类的成员变量：<code>外部类名称. this. 外部类成员变量名</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">3</span>;</span><br><span class="line">            System.out.println(num);    <span class="comment">// 1</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.num);   <span class="comment">// 2</span></span><br><span class="line">            System.out.println(Outer.<span class="keyword">this</span>.num); <span class="comment">// 3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部内部类（匿名内部类）"><a href="#局部内部类（匿名内部类）" class="headerlink" title="局部内部类（匿名内部类）"></a>局部内部类（匿名内部类）</h2><p>定义在一个方法内部的类，叫做局部内部类</p><p>局部：当前所属方法才能用它，方法之外的都无法使用</p><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称</span>&#123;</span><br><span class="line">    修饰符 返回值类型 外部类方法名称（参数列表）&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> 局部内部类名称</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOuter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">2</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建局部内部类对象，调用其方法</span></span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.methodInner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        outer.methodOuter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##匿名内部类（⭐）</p><p>如果接口的实现类（或父类的子类）只需要用一次</p><p>这种情况下，可以省略实现类（或子类）的定义，二改为使用【匿名内部类】</p><h3 id="定义的格式-1"><a href="#定义的格式-1" class="headerlink" title="定义的格式"></a>定义的格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口名称 对象名 = <span class="keyword">new</span> 接口名称()&#123;</span><br><span class="line">    <span class="comment">// 覆盖重写接口的所有抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191202002957.png" class="lozad"></p><blockquote><p>注意：匿名内部类在【创建对象】时，只能使用一次。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h1&gt;&lt;p&gt;面向对象的三大特征：封装性，继承性，多态性&lt;/p&gt;
&lt;h1 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;hea
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mybatis 基础</title>
    <link href="https://cometorbityh.github.io/2019/11/30/Mybatis-%E5%9F%BA%E7%A1%80/"/>
    <id>https://cometorbityh.github.io/2019/11/30/Mybatis-基础/</id>
    <published>2019-11-30T06:42:09.000Z</published>
    <updated>2020-01-04T07:01:01.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130150029.png" class="lozad"></p><h1 id="第一条语句"><a href="#第一条语句" class="headerlink" title="第一条语句"></a>第一条语句</h1><p>(1) 新建数据库、Javabean类</p><p>(2) 编写全局配置文件mybatis-config.xml</p><ul><li>数据源</li><li>注册sql映射文件</li></ul><p>(3) 编写sql映射文件，配置了每一个SQL。以及sql的封装规则等</p><p>(4) 将sql映射文件注册在全局配置文件中（Mapper文件要和Java代码相互联系，因此需要配置到全局配置文件中）</p><p>(5) 编写测试类</p><ul><li>根据全局配置文件得到SqlSessionFactory</li><li>使用SqlSessionFactory得到sqlSession对象，</li><li>使用sqlSession对象来执行增删改查，一个sqlSession就是代表和数据库的一次会话，用完关闭</li><li>使用sql的唯一标识来告诉Mybatis执行那个sql，sql都是保存在sql映射文件中</li></ul><p>新建一张数据表，并添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb1_employee(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">11</span>) PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">last_name <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">gender <span class="built_in">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">email <span class="built_in">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130150718.png" class="lozad"></p><p>全局项目结构</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130161319.png" class="lozad"></p><p>新建javabean类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Employee&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", lastName='"</span> + lastName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建sql映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> namespace:名称空间</span></span><br><span class="line"><span class="comment"> id:唯一标识</span></span><br><span class="line"><span class="comment"> resultType:返回值类型</span></span><br><span class="line"><span class="comment"> #&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mybatis.EmployeeMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectEmp"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">select id,last_name lastName,email,gender from tb1_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建全局配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将写好的sql映射文件注册到全局配置文件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"EmployeeMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis.bean.Employee;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 根据全局配置文件创建一个sqlSessionFactory对象（工厂对象）</span></span><br><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory =</span><br><span class="line"> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取sqlSession实例，能直接执行已经映射的sql语句</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2个参数：</span></span><br><span class="line">           <span class="comment">//    sql的唯一标识：sql映射文件的名称空间.唯一标识</span></span><br><span class="line">            <span class="comment">//    执行sql要用的参数</span></span><br><span class="line">Employee employee = openSession.selectOne(<span class="string">"com.mybatis.EmployeeMapper.selectEmp"</span>,<span class="number">1</span>);</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">openSession.close();<span class="comment">//关闭sqlSession</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="image-20191130161102929" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191130161102929.png" class="lozad"></p><h2 id="第一条语句（改进）"><a href="#第一条语句（改进）" class="headerlink" title="第一条语句（改进）"></a>第一条语句（改进）</h2><p>但是测试类那样书写太麻烦，因此我们可以使用接口的代理对象来执行这些操作。</p><p>项目结构：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130163728.png" class="lozad"></p><p>新建接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis.bean.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改sql映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> namespace:名称空间,指定相关接口的全限定类名，接口和映射文件动态绑定</span></span><br><span class="line"><span class="comment"> id:唯一标识</span></span><br><span class="line"><span class="comment"> resultType:返回值类型</span></span><br><span class="line"><span class="comment"> #&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mybatis.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpById"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">select id,last_name lastName,email,gender from tb1_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> com.mybatis.dao.EmployeeMapper;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将创建SqlSessionFactory单独封装成一个方法，避免重复代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> String resource = "mybatis-config.xml"; </span></span><br><span class="line"><span class="comment"> InputStream inputStream =Resources.getResourceAsStream(resource); </span></span><br><span class="line"><span class="comment"> SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line"><span class="comment">// 2. 获取sqlSession实例，能直接执行已经映射的sql语句</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Employee employee = openSession.selectOne(<span class="string">"com.mybatis.EmployeeMapper.selectEmp"</span>,<span class="number">1</span>);</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test01</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取SqlSessionFactory对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取sqlSession对象</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取接口的实现类对象</span></span><br><span class="line"><span class="comment">// 问:这个接口没有实现类啊？</span></span><br><span class="line"><span class="comment">// 答:mybatis会为接口自动创建一个代理对象，代理对象去执行增删改查操作</span></span><br><span class="line">EmployeeMapper mapper = openSession.getMapper(EmployeeMapper.class);</span><br><span class="line">Employee employee = mapper.getEmpById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(mapper.getClass());<span class="comment">//class com.sun.proxy.$Proxy8【代理对象】</span></span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130163606.png" class="lozad"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p><strong>接口式编程</strong></p><ul><li>原生：          Dao（接口）         ====&gt;    DaoImpl（对应的实现类）</li><li>mybatis:       Mapper（接口） ====&gt;    xxMapper.xml（对应的映射文件）</li></ul><p><strong>Mapper接口</strong></p><p>Mapper接口没有实现类，但是将接口和映射文件绑定之后，mybatis接口会为这个接口生成一个代理对象</p><p><strong>SqlSession</strong></p><p>SqlSession代表和数据库的一次会话，用完必须关闭</p><p>SqlSession和Connection一样都是非线程安全的（不要作为共享的成员变量），因此每次使用完都应该去获取新的对象。</p><p><strong>两个重要的配置文件</strong></p><ul><li>mybatis的全局配置i文件，包含数据库连接池信息，事务管理器信息，映射文件的位置信息，系统运行环境信息等等</li><li>sql映射文件，保存了每一个sql语句的映射信息。mybatis就是使用映射文件将sql抽取出来，因此是半自动的。</li></ul></blockquote><h1 id="MyBatis全局配置文件"><a href="#MyBatis全局配置文件" class="headerlink" title="MyBatis全局配置文件"></a>MyBatis全局配置文件</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130165141.png" class="lozad"></p><p>约束文件：定义了特定文件的语法规则</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130170128.png" class="lozad"></p><p><code>properties</code>标签：引入外部properties配置文件的内容</p><ul><li>resource 属性：引入类路径下的资源</li><li>url 属性：引入网络路径或磁盘路径下的资源</li></ul><p><code>environments</code>标签：配置多种环境</p><ul><li><p>default 属性：指定使用某种环境，如果配置多种环境，当用到了某一环境，修改default可以快速切换环境</p></li><li><p><code>environment</code>：配置一个具体的环境信息，必需有2个标签。id是当前环境的唯一表示</p><ul><li><p><code>transactionManager</code>标签：事务管理器</p><ul><li><p>type 属性：事务管理器类型：</p><ul><li>JDBC（JdbcTransactionFactory）|MANAGED（JdbcTransactionFactory）</li></ul></li><li><p>dataSource：数据源</p><ul><li>POOLED | UNPOOLED | JNDI</li></ul></li></ul></li></ul></li></ul><p><code>settings</code>标签：包含很多设置项</p><ul><li><p><code>setting</code>子标签：设置某一设置项</p><ul><li>name 属性：设置项名</li><li>value属性：设置项取值</li></ul><p>mapUnderscoreToCamelCase：是否开启驼峰命名规则，默认值为false</p><blockquote><p> 如数据库中为last_name,Bean中为lastName，那么会自动将 last_name 转为 lastName，这样的话，不用在 sql 语句中定义别名就可以设置对应的值了。</p></blockquote></li></ul><p><code>typeAliases</code>标签：别名处理器，可以为Java类起别名，默认别名就是类名小写</p><ul><li><p><code>typeAlias</code>子标签：为某个类起别名</p></li><li><p><code>package</code>子标签：为某个包下的所有类批量起别名</p><ul><li>在批量起别名的情况下，为了防止冲突，也可以使用@Alias注解为某个类型指定新的别名</li></ul><img style="zoom: 67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130173017.png" class="lozad"></li></ul><p><code>typeHander</code>标签：类型处理器</p><p><code>plugins</code>标签：插件</p><p><code>mappers</code>标签：将sql映射注册到全局配置中</p><ul><li>mapper标签：注册一个映射<ul><li>resource属性：引用类路径下的sql映射文件</li><li>url：引用网络路径或磁盘路径下的sql映射文件</li><li>class属性：引用（注册）接口<ul><li>有映射文件时，映射文件要与接口在同一目录下，映射文件名必须和接口同名</li><li>没有sql映射文件时，所有的sql都是利用注解写在接口上</li></ul></li></ul></li><li>package标签：批量注册映射，注意：接口和sql文件应该在一个包下（同名包也行）<ul><li>name：某个包的名字</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入外部properties配置文件的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"dbconfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 起别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为单个类起别名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;typeAlias type="com.mybatis.bean.Employee" alias="emp"/&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 批量起别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.mybatis.bean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将写好的sql映射文件注册到全局配置文件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/EmployeeMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="MyBatis映射文件"><a href="#MyBatis映射文件" class="headerlink" title="MyBatis映射文件"></a>MyBatis映射文件</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130220120.png" class="lozad"></p><h2 id="1-增删改查案例"><a href="#1-增删改查案例" class="headerlink" title="1. 增删改查案例"></a>1. 增删改查案例</h2><p>映射接口 EmployeeMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis.bean.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射文件 EmployeeMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> namespace:名称空间,指定相关接口的全限定类名，接口和映射文件动态绑定</span></span><br><span class="line"><span class="comment"> id:唯一标识</span></span><br><span class="line"><span class="comment"> resultType:返回值类型</span></span><br><span class="line"><span class="comment"> #&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mybatis.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpById"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">select * from tb1_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmp"</span>&gt;</span></span><br><span class="line">insert into tb1_employee(last_name,email,gender)</span><br><span class="line">values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmp"</span>&gt;</span></span><br><span class="line">update tb1_employee set last_name=#&#123;lastName&#125;,email=#&#123;email&#125;,gender=#&#123;gender&#125;</span><br><span class="line">where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteEmpById"</span>&gt;</span></span><br><span class="line">delete from tb1_employee where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类 MybatisTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> com.mybatis.dao.EmployeeMapper;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 将创建SqlSessionFactory单独封装成一个方法，避免重复代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test02</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取SqlSessionFactory对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取sqlSession对象(不会自动提交数据，也就无法修改数据库的数据，因此要手动提交)</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取接口的实现类对象</span></span><br><span class="line">EmployeeMapper mapper = openSession.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试添加</span></span><br><span class="line"><span class="comment">//Employee employee = new Employee(null,"jerry","jerry@qq.com","1");</span></span><br><span class="line"><span class="comment">//mapper.addEmp(employee);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试更新</span></span><br><span class="line"><span class="comment">//Employee employee = new Employee(1,"jerry","jerry@qq.com","0");</span></span><br><span class="line"><span class="comment">//mapper.updateEmp(employee);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试删除</span></span><br><span class="line">mapper.deleteEmpById(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 手动提交数据</span></span><br><span class="line">openSession.commit();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img style="zoom:67%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130214950.png" class="lozad"><blockquote><p>mybatis允许增删改直接定义以下类型返回值</p><ul><li>Integer、Long、Boolean、void</li></ul><p>在做增删改查操作时，我们需要手动提交数据</p><ul><li>手动提交：sqlSessionFactory.openSession();</li><li>自动提交：sqlSessionFactory.openSession(true);</li></ul></blockquote><h2 id="2-insert相关属性"><a href="#2-insert相关属性" class="headerlink" title="2. insert相关属性"></a>2. insert相关属性</h2><p>insert标签的属性</p><p><code>id</code>：唯一标识</p><p><code>parameterType</code>：参数类型，可以省略</p><p>获取自增主键的值（2个标签）</p><p><code>useGeneratedKeys=&quot;true&quot;</code>：使用自增主键获取主键值策略</p><p>mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGeneratedKeys()</p><p><code>keyProperty</code>：指定主键属性。mybatis获取到主键值后，将这个值封装给指定的主键属性</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191130223452.png" class="lozad"></p><h2 id="select的返回值问题"><a href="#select的返回值问题" class="headerlink" title="select的返回值问题"></a>select的返回值问题</h2><h3 id="返回值是List"><a href="#返回值是List" class="headerlink" title="返回值是List"></a>返回值是List</h3><p>如果<code>返回值</code>是<code>集合（List等）</code>，那么映射文件中对应的<code>resultType</code>要写集合中的元素的类型</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201002536.png" class="lozad"></p><h3 id="返回值是Map"><a href="#返回值是Map" class="headerlink" title="返回值是Map"></a>返回值是Map</h3><p>返回值是Map，key为列名，value为对应值</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191201004340.png" class="lozad"></p><h2 id="3-接口方法的参数处理"><a href="#3-接口方法的参数处理" class="headerlink" title="3. 接口方法的参数处理"></a>3. 接口方法的参数处理</h2><h3 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h3><p>mybatis不会做特殊处理，#{参数值}，即可取出参数值</p><h3 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h3><p>错误操作:</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230145841.png" class="lozad"></p><blockquote><p>运行报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Cause: org.apache.ibatis.binding.BindingException: </span><br><span class="line">&gt; Parameter <span class="string">'id'</span> not found.</span><br><span class="line">&gt; Available parameters are [arg1, arg0, param1, param2]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p>接口方法传入多个参数时，mybatis会做特殊处理，多个参数会被封装成一个map</p><ul><li>key：param1，param2，…，paramN，或者参数的索引也行（arg0，arg1，…，argN）</li><li>value：传入的参数值</li><li>使用<code>#{}</code>从map中取出key对应的参数值</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230150638.png" class="lozad"></p><p>因此，使用其他参数会报错。如果不想使用param1这种格式，只想用属性值来传值，该怎么做呢？我们可以使用命名参数来做。</p><blockquote><p>命名参数：明确指定封装参数时map的key，如<code>@Param(&quot;id&quot;)</code></p><p>在映射接口的方法的参数前，加入<code>@Param</code>注解</p><p>多个参数会被封装成一个map，此时：</p><ul><li>key：使用<code>@Param</code>注解指定的值</li><li>value：参数值</li><li>使用<code>#{key}</code>从map中取出key对应的参数值</li></ul></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230150925.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230144631.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230144839.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230145032.png" class="lozad"></p><p>参数是POJO</p><ul><li>如果多个参数刚好是我们业务逻辑的数据模型（bean的属性值），可以直接传入pojo</li><li>使用<code>#{属性值}</code>，取出传入的pojo的属性值</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230151800.png" class="lozad"></p><p>参数是Map</p><p>如果多个参数不是业务模型中的数据，没有对应的pojo，并且不经常使用，为了方便，我们可以直接传入map（因为最后也要封装成map，干脆直接用map）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230152458.png" class="lozad"></p><blockquote><p><strong>扩展思考</strong></p><p><code>public Employee getEmp(@Param(&quot;eid&quot;)Integer eid, String eName);</code><br>    取值：eid—&gt;#{eid / param1}   ename—&gt;#{param2}</p><p><code>public Employee getEmp(Integer eid, @Param(&quot;e&quot;)Employee emp);</code><br>    取值：eid—&gt;#{param1}    ename—&gt;#{param2.ename / e.ename}</p><p>特别注意：若传入的参数类型是Collection（List、Set）类型或者是数组，也会特殊处理。也是把传入的list或者数组封装在map中。<br>        key：Collection用collection，如果是List既可以用collection也可以用list，数组用array</p><p><code>public Employee getEmpById(List&lt;Integer&gt; ids);</code><br>    取值：取出第一个id的值：   #{list[0]}</p></blockquote><h3 id="与-参数取值的区别"><a href="#与-参数取值的区别" class="headerlink" title="$与#参数取值的区别"></a>$与#参数取值的区别</h3><p>${} 和 #{}：可以获取map中的值或者pojo对象属性的值；</p><p>sql语句：<code>select * from tbl_employee where id=${id} and last_name=#{lastName}</code></p><p>控制台：<code>Preparing: select * from tbl_employee where id=2 and last_name=?</code><br>    区别：</p><ul><li><p>{}:是以预编译的形式，将参数设置到sql语句中；PreparedStatement；防止sql注入</p></li><li><p>${}:取出的值直接拼装在sql语句中；会有安全问题；`</p></li><li><p>大多情况下，我们去参数的值都应该去使用#{}；</p></li><li><p>原生jdbc不支持占位符的地方我们就可以使用<code>${}</code>进行取值<br>比如分表、排序；按照年份分表拆分</p><pre><code>`select * from ${year}_salary where xxx;``select * from tbl_employee order by ${f_name} ${order}`</code></pre></li></ul><h2 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h2><p>制定封装规则</p><h3 id="（1）result"><a href="#（1）result" class="headerlink" title="（1）result"></a>（1）result</h3><h4 id="级联属性查询"><a href="#级联属性查询" class="headerlink" title="级联属性查询"></a>级联属性查询</h4><p>查询某个员工的信息及其所属部门信息</p><p>常规方法</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230175040.png" class="lozad"></p><p>resultMap</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230175539.png" class="lozad"></p><h3 id="（2）association"><a href="#（2）association" class="headerlink" title="（2）association"></a>（2）association</h3><h4 id="关联属性查询"><a href="#关联属性查询" class="headerlink" title="关联属性查询"></a>关联属性查询</h4><p>使用association来定义关联的单个对象的封装规则，相当于使用了嵌套结果集进行查询</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230180335.png" class="lozad"></p><h4 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h4><p>还可以使用association进行分步查询</p><p>根据员工ID查询员工信息</p><p>更具员工信息中的dept_id查询部门信息</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230203021.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230203657.png" class="lozad"></p><h3 id="discrimination鉴别器"><a href="#discrimination鉴别器" class="headerlink" title="discrimination鉴别器"></a>discrimination鉴别器</h3><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><h3 id="if：判断"><a href="#if：判断" class="headerlink" title="if：判断"></a>if：判断</h3><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230230301.png" class="lozad"></p><p>查询时，若某些条件为null时，可能会出现sql拼接问题，</p><blockquote><p>解决方法：</p><p>（1）在where后加上1=1，之后的条件前都加上and</p><p>（2）使用where标签</p></blockquote><h3 id="trim（where-set）：截取"><a href="#trim（where-set）：截取" class="headerlink" title="trim（where , set）：截取"></a>trim（where , set）：截取</h3><h4 id="1-where：截取多余or或and"><a href="#1-where：截取多余or或and" class="headerlink" title="(1)where：截取多余or或and"></a>(1)where：截取多余or或and</h4><p>作用：将所有的查询条件都包括在内。在where标签中拼装的sql，多余的and或or会被去掉（一般情况下是第一个多出来的and或or）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191230231326.png" class="lozad"></p><h4 id="2-trim：万能拼接截取"><a href="#2-trim：万能拼接截取" class="headerlink" title="(2) trim：万能拼接截取"></a>(2) trim：万能拼接截取</h4><blockquote><p>prefix=””：给拼串后的字符串加一个前缀</p><p>prefixOverride=””：去掉整个字符串前面多余的字符</p><p>suffix=””：给拼串后的字符串加一个后缀</p><p>suffixOverride=””：去掉整个字符串后面多余的字符</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200101153834.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200101153754.png" class="lozad"></p><h4 id="3-set：截取多余逗号"><a href="#3-set：截取多余逗号" class="headerlink" title="(3) set：截取多余逗号"></a>(3) set：截取多余逗号</h4><p>会去掉多余的逗号</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200101161315.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200101161210.png" class="lozad"></p><h3 id="choose：分支选择"><a href="#choose：分支选择" class="headerlink" title="choose：分支选择"></a>choose：分支选择</h3><p>只会进入其中一个分支，相当于是Java中带了break的switch-case</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200101155650.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200101160126.png" class="lozad"></p><h3 id="foreach：批量"><a href="#foreach：批量" class="headerlink" title="foreach：批量"></a>foreach：批量</h3><h3 id="sql-include：抽取可重用sql"><a href="#sql-include：抽取可重用sql" class="headerlink" title="sql + include：抽取可重用sql"></a>sql + include：抽取可重用sql</h3><p>sql：抽取可重用的sql片段，如经常要查询或者插入的列名</p><p>include：</p><ul><li>引用抽取的sql</li><li>可以自定义property，这样sql标签内部就能使用 ${prop} 来自定义属性</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200101164043.png" class="lozad"></p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>一级缓存，本地缓存：sqlSession级别的缓存【作用范围：一次会话】，一级缓存是一直开启的。</p><p>​    与数据库同一次会话期间，查询到的数据被放到本地缓存中</p><p>​    若需要<strong>相同数据</strong>，直接可以从缓存中取，无需去数据库查询</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200101164825.png" class="lozad"></p><p><strong>一级缓存失效的4种情况：</strong></p><ul><li>不同的sqlSession（会话）</li><li>相同的sqlsession<ul><li>查询条件不同（当前的本地缓存中，还没有这个数据）</li><li>两次查询之间，执行了增删改操作（此时有可能对查询的数据进行增删改，导致结果不一样，因此本地缓存失效）</li><li>两次查询之间，手动清除了一级缓存【sqlSession.clearCache()】，此时第二次查询的需要重新连接数据库。</li></ul></li></ul><p>二级缓存，全局缓存：namespace级别的缓存，一个namespace对应一个二级缓存</p><p>工作机制：</p><pre><code>1. 一个会话查询一条数据，该数据被存放在当前会话的一级缓存中 2. 若当前会话被关闭或被提交，则一级缓存的数据被保存在二级缓存中 3. 注意：不同namespace查询除的数据会被放在自己对应的缓存中（map)      1. 如sqlSession查询2条数据，一条是AAAAMapper查询的AAA对象，一条是BBBMapper查询的BBB对象      2. 那么当sqlSession被关闭后，AAA对象会被放在namepace为AAAMapper的二级缓存中，BBB对象会被放在namepace为 BBBMapper的二级缓存中</code></pre><p>不开启二级缓存的情况下：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200101182203.png" class="lozad"></p><p>二级缓存的使用：</p><ol><li><p>在全局配置文件中，开启二级缓存配置</p><p>``<setting name="cacheEnabled" value="true">`</setting></p></li><li><p>在 Mapper.xml 中，配置二级缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"FIFO"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">"60000"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">type</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">======================================</span><br><span class="line">eviction：缓存的回收策略</span><br><span class="line">* LRU - 最近最少使用，移除最长时间不被使用的对象（默认）</span><br><span class="line">* FIFO - 先进先出</span><br><span class="line">* SOFT - 软引用，移除基于垃圾回收器状态和软引用规则的对象</span><br><span class="line">* WEAK - 弱引用，更积极地移除基于垃圾回收器状态和弱引用规则的对象</span><br><span class="line"></span><br><span class="line">flushInterval：缓存刷新间隔，默认不清空，若要清空可以设定值，单位毫秒</span><br><span class="line"></span><br><span class="line">readOnly：缓存是否只读</span><br><span class="line">* true只读，mybatis认为：所有从缓存中获取数据地操作都是只读操作，不会修改数据。</span><br><span class="line">    为了加快速度，会直接将数据在缓存中的引用交给用户，不安全，速度快。</span><br><span class="line">* false非只读，mybatis认为：所有从缓存中获取数据的操作都是非只读操作，会修改数据。</span><br><span class="line">       会利用序列化/反序列技术，克隆一份数据给你，安全，速度慢。</span><br><span class="line"></span><br><span class="line">size：缓存存放的元素个数</span><br><span class="line"></span><br><span class="line">type：指定自定义缓存的全类名，实现Cache接口即可</span><br></pre></td></tr></table></figure></li><li><p>在POJO中实现序列化接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer eid;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> Integer egender;</span><br><span class="line">    <span class="keyword">private</span> Department dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20200101224344.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念介绍&quot;&gt;&lt;a href=&quot;#概念介绍&quot; class=&quot;headerlink&quot; title=&quot;概念介绍&quot;&gt;&lt;/a&gt;概念介绍&lt;/h1&gt;&lt;p&gt;&lt;img alt data-src=&quot;https://yanghanblog.oss-cn-hangzhou.aliyunc
      
    
    </summary>
    
    
  </entry>
  
</feed>
