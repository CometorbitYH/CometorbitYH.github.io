<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MY</title>
  
  <subtitle>IT IS MY LIFE</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cometorbityh.github.io/"/>
  <updated>2019-11-17T09:10:58.171Z</updated>
  <id>https://cometorbityh.github.io/</id>
  
  <author>
    <name>杨涵</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>191017-JAVA-IO流(3)-其他流</title>
    <link href="https://cometorbityh.github.io/2019/11/17/191017-JAVA-IO%E6%B5%81-3-%E5%85%B6%E4%BB%96%E6%B5%81/"/>
    <id>https://cometorbityh.github.io/2019/11/17/191017-JAVA-IO流-3-其他流/</id>
    <published>2019-11-17T07:44:02.000Z</published>
    <updated>2019-11-17T09:10:58.171Z</updated>
    
    <content type="html"><![CDATA[<p>昨天学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。</p><h1 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/01_%E7%BC%93%E5%86%B2%E6%B5%81%E7%9A%84%E5%8E%9F%E7%90%86.bmp" class="lozad"></p><p>缓冲流,也叫高效流，是对4个基本的<code>FileXxx</code> 流的增强，所以也是4个流，按照数据类型分类：</p><ul><li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code> </li><li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li></ul><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的<strong>缓冲区数组</strong>，通过缓冲区读写，<strong>减少系统IO次数</strong>，从而提高读写的效率。</p><h2 id="1-字节缓冲流"><a href="#1-字节缓冲流" class="headerlink" title="1 - 字节缓冲流"></a>1 - 字节缓冲流</h2><h3 id="1-1-字节缓冲输出流"><a href="#1-1-字节缓冲输出流" class="headerlink" title="1.1 - 字节缓冲输出流"></a>1.1 - 字节缓冲输出流</h3><p>java.io.BufferedOutputStream extends OutputStream<br>    BufferedOutputStream:字节缓冲输出流</p><pre><code>继承自父类的共性成员方法:    - public void close() ：关闭此输出流并释放与此流相关联的任何系统资源。    - public void flush() ：刷新此输出流并强制任何缓冲的输出字节被写出。    - public void write(byte[] b)：将 b.length字节从指定的字节数组写入此输出流。    - public void write(byte[] b, int off, int len) ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。    - public abstract void write(int b) ：将指定的字节输出流。</code></pre><h4 id="1-1-1-构造方法"><a href="#1-1-1-构造方法" class="headerlink" title="1.1.1 - 构造方法"></a>1.1.1 - 构造方法</h4><ul><li>BufferedOutputStream(OutputStream out)  创建一个新的缓冲输出流，以将数据写入指定的底层输出流。<br>BufferedOutputStream(OutputStream out, int size)  创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。</li><li>参数:<pre><code>OutputStream out:字节输出流     我们可以传递FileOutputStream,缓冲流会给FileOutputStream增加一个缓冲区,提高FileOutputStream的写入效率int size:指定缓冲流内部缓冲区的大小,不指定默认</code></pre></li></ul><h4 id="1-1-2-使用步骤-重点"><a href="#1-1-2-使用步骤-重点" class="headerlink" title="1.1.2 - 使用步骤(重点)"></a>1.1.2 - 使用步骤(重点)</h4><p>​        1.创建FileOutputStream对象,构造方法中绑定要输出的目的地<br>​        2.创建BufferedOutputStream对象,构造方法中传递FileOutputStream对象对象,提高FileOutputStream对象效率<br>​        3.使用BufferedOutputStream对象中的方法write,把数据写入到内部缓冲区中<br>​        4.使用BufferedOutputStream对象中的方法flush,把内部缓冲区中的数据,刷新到文件中(不做此步骤，数据无法成功写入)<br>​        5.释放资源(会先调用flush方法刷新数据,第4部可以省略)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建FileOutputStream对象,构造方法中绑定要输出的目的地</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"10_IO\\a.txt"</span>);</span><br><span class="line">        <span class="comment">//2.创建BufferedOutputStream对象,构造方法中传递FileOutputStream对象对象,提高FileOutputStream对象效率</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">        <span class="comment">//3.使用BufferedOutputStream对象中的方法write,把数据写入到内部缓冲区中</span></span><br><span class="line">        bos.write(<span class="string">"我把数据写入到内部缓冲区中"</span>.getBytes());</span><br><span class="line">        <span class="comment">//4.使用BufferedOutputStream对象中的方法flush,把内部缓冲区中的数据,刷新到文件中</span></span><br><span class="line">        bos.flush();</span><br><span class="line">        <span class="comment">//5.释放资源(会先调用flush方法刷新数据,第4部可以省略)</span></span><br><span class="line">        bos.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-字节缓冲输入流"><a href="#1-2-字节缓冲输入流" class="headerlink" title="1.2 - 字节缓冲输入流"></a>1.2 - 字节缓冲输入流</h3><p>java.io.BufferedInputStream extends InputStream<br>    BufferedInputStream:字节缓冲输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">继承自父类的成员方法:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span>从输入流中读取数据的下一个字节。</span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b)</span> 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。</span></span><br><span class="line"><span class="function">    <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> 关闭此输入流并释放与该流关联的所有系统资源。</span></span><br></pre></td></tr></table></figure><h4 id="1-2-1-构造方法"><a href="#1-2-1-构造方法" class="headerlink" title="1.2.1 - 构造方法"></a>1.2.1 - 构造方法</h4><p>​    BufferedInputStream(InputStream in) 创建一个 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。<br>​    BufferedInputStream(InputStream in, int size) 创建具有指定缓冲区大小的 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。<br>​    参数:<br>​        InputStream in:字节输入流<br>​            我们可以传递FileInputStream,缓冲流会给FileInputStream增加一个缓冲区,提高FileInputStream的读取效率<br>​        int size:指定缓冲流内部缓冲区的大小,不指定默认</p><h4 id="1-2-2-使用步骤-重点"><a href="#1-2-2-使用步骤-重点" class="headerlink" title="1.2.2 - 使用步骤(重点)"></a>1.2.2 - 使用步骤(重点)</h4><p>​    1.创建FileInputStream对象,构造方法中绑定要读取的数据源<br>​    2.创建BufferedInputStream对象,构造方法中传递FileInputStream对象,提高FileInputStream对象的读取效率<br>​    3.使用BufferedInputStream对象中的方法read,读取文件<br>​    4.释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建FileInputStream对象,构造方法中绑定要读取的数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"10_IO\\a.txt"</span>);</span><br><span class="line">        <span class="comment">//2.创建BufferedInputStream对象,构造方法中传递FileInputStream对象,提高FileInputStream对象的读取效率</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">        <span class="comment">//3.使用BufferedInputStream对象中的方法read,读取文件</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//int read()从输入流中读取数据的下一个字节。</span></span><br><span class="line">        <span class="comment">/*int len = 0;//记录每次读取到的字节</span></span><br><span class="line"><span class="comment">        while((len = bis.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(len);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int read(byte[] b) 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">//存储每次读取的数据</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>; <span class="comment">//记录每次读取的有效字节个数</span></span><br><span class="line">        <span class="keyword">while</span>((len = bis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-文件复制"><a href="#1-3-文件复制" class="headerlink" title="1.3 - 文件复制"></a>1.3 - 文件复制</h3><p>与之前的IO流一样的步骤，这次加入下效率测试，从结果可见，缓存流的读写速度比普通IO流快很多。</p><p><strong>普通IO流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    文件复制练习:一读一写</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    明确:</span></span><br><span class="line"><span class="comment">        数据源: c:\\1.jpg</span></span><br><span class="line"><span class="comment">        数据的目的地: d:\\1.jpg</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    文件复制的步骤:</span></span><br><span class="line"><span class="comment">        1.创建一个字节输入流对象,构造方法中绑定要读取的数据源</span></span><br><span class="line"><span class="comment">        2.创建一个字节输出流对象,构造方法中绑定要写入的目的地</span></span><br><span class="line"><span class="comment">        3.使用字节输入流对象中的方法read读取文件</span></span><br><span class="line"><span class="comment">        4.使用字节输出流中的方法write,把读取到的字节写入到目的地的文件中</span></span><br><span class="line"><span class="comment">        5.释放资源</span></span><br><span class="line"><span class="comment">    文件的大小:780,831 字节</span></span><br><span class="line"><span class="comment">    一次读写一个字节:6043毫秒</span></span><br><span class="line"><span class="comment">    使用数组缓冲读取多个字节,写入多个字节:10毫秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//1.创建一个字节输入流对象,构造方法中绑定要读取的数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:\\1.jpg"</span>);</span><br><span class="line">        <span class="comment">//2.创建一个字节输出流对象,构造方法中绑定要写入的目的地</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\1.jpg"</span>);</span><br><span class="line">        <span class="comment">//一次读取一个字节写入一个字节的方式</span></span><br><span class="line">        <span class="comment">//3.使用字节输入流对象中的方法read读取文件</span></span><br><span class="line">        <span class="comment">/*int len = 0;</span></span><br><span class="line"><span class="comment">        while((len = fis.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">            //4.使用字节输出流中的方法write,把读取到的字节写入到目的地的文件中</span></span><br><span class="line"><span class="comment">            fos.write(len);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用数组缓冲读取多个字节,写入多个字节</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//3.使用字节输入流对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//每次读取的有效字节个数</span></span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//4.使用字节输出流中的方法write,把读取到的字节写入到目的地的文件中</span></span><br><span class="line">            fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.释放资源(先关写的,后关闭读的;如果写完了,肯定读取完毕了)</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="keyword">long</span> e = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"复制文件共耗时:"</span>+(e-s)+<span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缓存流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    文件复制练习:一读一写</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    明确:</span></span><br><span class="line"><span class="comment">        数据源: c:\\1.jpg</span></span><br><span class="line"><span class="comment">        数据的目的地: d:\\1.jpg</span></span><br><span class="line"><span class="comment">    文件复制的步骤:</span></span><br><span class="line"><span class="comment">        1.创建字节缓冲输入流对象,构造方法中传递字节输入流</span></span><br><span class="line"><span class="comment">        2.创建字节缓冲输出流对象,构造方法中传递字节输出流</span></span><br><span class="line"><span class="comment">        3.使用字节缓冲输入流对象中的方法read,读取文件</span></span><br><span class="line"><span class="comment">        4.使用字节缓冲输出流中的方法write,把读取的数据写入到内部缓冲区中</span></span><br><span class="line"><span class="comment">        5.释放资源(会先把缓冲区中的数据,刷新到文件中)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    文件的大小:780,831 字节</span></span><br><span class="line"><span class="comment">    一次读写一个字节:32毫秒</span></span><br><span class="line"><span class="comment">    使用数组缓冲读取多个字节,写入多个字节:5毫秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//1.创建字节缓冲输入流对象,构造方法中传递字节输入流</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"c:\\1.jpg"</span>));</span><br><span class="line">        <span class="comment">//2.创建字节缓冲输出流对象,构造方法中传递字节输出流</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\1.jpg"</span>));</span><br><span class="line">        <span class="comment">//3.使用字节缓冲输入流对象中的方法read,读取文件</span></span><br><span class="line">        <span class="comment">//一次读取一个字节写入一个字节的方式</span></span><br><span class="line">        <span class="comment">/*int len = 0;</span></span><br><span class="line"><span class="comment">        while((len = bis.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">            bos.write(len);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用数组缓冲读取多个字节,写入多个字节</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = bis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> e = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"复制文件共耗时:"</span>+(e-s)+<span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-字符缓冲流"><a href="#2-字符缓冲流" class="headerlink" title="2 - 字符缓冲流"></a>2 - 字符缓冲流</h2><h3 id="2-1-字符缓冲输出流"><a href="#2-1-字符缓冲输出流" class="headerlink" title="2.1 - 字符缓冲输出流"></a>2.1 - 字符缓冲输出流</h3><p>java.io.BufferedWriter extends Writer<br>    BufferedWriter:字符缓冲输出流</p><p>继承自父类的共性成员方法:<br>    - void write(int c) 写入单个字符。<br>    - void write(char[] cbuf)写入字符数组。<br>    - abstract  void write(char[] cbuf, int off, int len)写入字符数组的某一部分,off数组的开始索引,len写的字符个数。<br>    - void write(String str)写入字符串。<br>    - void write(String str, int off, int len) 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。<br>    - void flush()刷新该流的缓冲。<br>    - void close() 关闭此流，但要先刷新它。</p><h4 id="2-1-1-构造方法"><a href="#2-1-1-构造方法" class="headerlink" title="2.1.1 - 构造方法:"></a>2.1.1 - 构造方法:</h4><p>​    BufferedWriter(Writer out) 创建一个使用默认大小输出缓冲区的缓冲字符输出流。<br>​    BufferedWriter(Writer out, int sz) 创建一个使用给定大小输出缓冲区的新缓冲字符输出流。<br>​    参数:<br>​        Writer out:字符输出流<br>​            我们可以传递FileWriter,缓冲流会给FileWriter增加一个缓冲区,提高FileWriter的写入效率<br>​        int sz:指定缓冲区的大小,不写默认大小</p><h4 id="2-1-2-特有的成员方法"><a href="#2-1-2-特有的成员方法" class="headerlink" title="2.1.2 - 特有的成员方法"></a>2.1.2 - 特有的成员方法</h4><p>​    void newLine() 写入一个行分隔符。会根据不同的操作系统,获取不同的行分隔符<br>​    换行:换行符号<br>​    windows:\r\n<br>​    linux:/n<br>​    mac:/r</p><h4 id="2-1-3-使用步骤"><a href="#2-1-3-使用步骤" class="headerlink" title="2.1.3 -  使用步骤"></a>2.1.3 -  使用步骤</h4><p>​    1.创建字符缓冲输出流对象,构造方法中传递字符输出流<br>​    2.调用字符缓冲输出流中的方法write,把数据写入到内存缓冲区中<br>​    3.调用字符缓冲输出流中的方法flush,把内存缓冲区中的数据,刷新到文件中<br>​    4.释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println();</span></span><br><span class="line">        <span class="comment">//1.创建字符缓冲输出流对象,构造方法中传递字符输出流</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"10_IO\\c.txt"</span>));</span><br><span class="line">        <span class="comment">//2.调用字符缓冲输出流中的方法write,把数据写入到内存缓冲区中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            bw.write(<span class="string">"传智播客"</span>);</span><br><span class="line">            <span class="comment">//bw.write("\r\n");</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.调用字符缓冲输出流中的方法flush,把内存缓冲区中的数据,刷新到文件中</span></span><br><span class="line">        bw.flush();</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-字符缓冲输入流"><a href="#2-2-字符缓冲输入流" class="headerlink" title="2.2 - 字符缓冲输入流"></a>2.2 - 字符缓冲输入流</h3><p>java.io.BufferedReader extends Reader<br>    BufferedReader:字符缓冲输入流</p><p>继承自父类的共性成员方法:<br>    int read() 读取单个字符并返回。<br>    int read(char[] cbuf)一次读取多个字符,将字符读入数组。<br>    void close() 关闭该流并释放与之关联的所有资源。</p><h4 id="2-2-1-构造方法"><a href="#2-2-1-构造方法" class="headerlink" title="2.2.1 -  构造方法:"></a>2.2.1 -  构造方法:</h4><p>​    BufferedReader(Reader in)  创建一个使用默认大小输入缓冲区的缓冲字符输入流。<br>​    BufferedReader(Reader in, int sz)     创建一个使用指定大小输入缓冲区的缓冲字符输入流。<br>​    参数:<br>​        Reader in:字符输入流<br>​            我们可以传递FileReader,缓冲流会给FileReader增加一个缓冲区,提高FileReader的读取效率</p><h4 id="2-2-2-特有的成员方法"><a href="#2-2-2-特有的成员方法" class="headerlink" title="2.2.2 - 特有的成员方法"></a>2.2.2 - 特有的成员方法</h4><p>​    String readLine() 读取一个文本行。读取一行数据<br>​        行的终止符号:通过下列字符之一即可认为某行已终止：换行 (‘\n’)、回车 (‘\r’) 或回车后直接跟着换行(\r\n)。<br>​    返回值:<br>​        包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回 null</p><h4 id="2-2-3-使用步骤"><a href="#2-2-3-使用步骤" class="headerlink" title="2.2.3 - 使用步骤"></a>2.2.3 - 使用步骤</h4><p>​    1.创建字符缓冲输入流对象,构造方法中传递字符输入流<br>​    2.使用字符缓冲输入流对象中的方法read/readLine读取文本<br>​    3.释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建字符缓冲输入流对象,构造方法中传递字符输入流</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"10_IO\\c.txt"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.使用字符缓冲输入流对象中的方法read/readLine读取文本</span></span><br><span class="line">        <span class="comment">/*String line = br.readLine();</span></span><br><span class="line"><span class="comment">        System.out.println(line);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        line = br.readLine();</span></span><br><span class="line"><span class="comment">        System.out.println(line);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        line = br.readLine();</span></span><br><span class="line"><span class="comment">        System.out.println(line);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        line = br.readLine();</span></span><br><span class="line"><span class="comment">        System.out.println(line);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            发下以上读取是一个重复的过程,所以可以使用循环优化</span></span><br><span class="line"><span class="comment">            不知道文件中有多少行数据,所以使用while循环</span></span><br><span class="line"><span class="comment">            while的结束条件,读取到null结束</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-练习：文本排序"><a href="#2-3-练习：文本排序" class="headerlink" title="2.3 - 练习：文本排序"></a>2.3 - 练习：文本排序</h3><p>练习:</p><p>​        将in.txt的文本内容排序后写入到out.txt</p><p>​        对文本的内容进行排序<br>​        按照(1,2,3….)顺序排序<br>​    分析:<br>​        1.创建一个HashMap集合对象,可以:存储每行文本的序号(1,2,3,..);value:存储每行的文本<br>​        2.创建字符缓冲输入流对象,构造方法中绑定字符输入流<br>​        3.创建字符缓冲输出流对象,构造方法中绑定字符输出流<br>​        4.使用字符缓冲输入流中的方法readline,逐行读取文本<br>​        5.对读取到的文本进行切割,获取行中的序号和文本内容<br>​        6.把切割好的序号和文本的内容存储到HashMap集合中(key序号是有序的,会自动排序1,2,3,4..)<br>​        7.遍历HashMap集合,获取每一个键值对<br>​        8.把每一个键值对,拼接为一个文本行<br>​        9.把拼接好的文本,使用字符缓冲输出流中的方法write,写入到文件中<br>​        10.释放资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。</span><br><span class="line">8.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。</span><br><span class="line">4.将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。</span><br><span class="line">2.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。</span><br><span class="line">1.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">9.今当远离，临表涕零，不知所言。</span><br><span class="line">6.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</span><br><span class="line">7.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。</span><br><span class="line">5.亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个HashMap集合对象,可以:存储每行文本的序号(1,2,3,..);value:存储每行的文本</span></span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.创建字符缓冲输入流对象,构造方法中绑定字符输入流</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"10_IO\\in.txt"</span>));</span><br><span class="line">        <span class="comment">//3.创建字符缓冲输出流对象,构造方法中绑定字符输出流</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"10_IO\\out.txt"</span>));</span><br><span class="line">        <span class="comment">//4.使用字符缓冲输入流中的方法readline,逐行读取文本</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//5.对读取到的文本进行切割,获取行中的序号和文本内容</span></span><br><span class="line">            String[] arr = line.split(<span class="string">"\\."</span>);</span><br><span class="line">            <span class="comment">//6.把切割好的序号和文本的内容存储到HashMap集合中(key序号是有序的,会自动排序1,2,3,4..)</span></span><br><span class="line">            map.put(arr[<span class="number">0</span>],arr[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.遍历HashMap集合,获取每一个键值对</span></span><br><span class="line">        <span class="keyword">for</span>(String key : map.keySet())&#123;</span><br><span class="line">            String value = map.get(key);</span><br><span class="line">            <span class="comment">//8.把每一个键值对,拼接为一个文本行</span></span><br><span class="line">            line = key + <span class="string">"."</span> + value;</span><br><span class="line">            <span class="comment">//9.把拼接好的文本,使用字符缓冲输出流中的方法write,写入到文件中</span></span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();<span class="comment">//写换行</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//10.释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>#转换流</p><h2 id="1-字符编码和字符集"><a href="#1-字符编码和字符集" class="headerlink" title="1 - 字符编码和字符集"></a>1 - 字符编码和字符集</h2><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><p>编码:字符(能看懂的)–字节(看不懂的)</p><p>解码:字节(看不懂的)–&gt;字符(能看懂的)</p><ul><li><p><strong>字符编码<code>Character Encoding</code></strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p><p>编码表:生活中文字和计算机中二进制的对应规则</p></li></ul><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul><li><strong>字符集 <code>Charset</code></strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li></ul><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。<img alt data-src="img/1_charset.jpg" class="lozad"></p><p>可见，当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就指定了，所以<strong>编码</strong>才是我们最终要关心的。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/1_charset.jpg" class="lozad"></p><ul><li><strong>ASCII字符集</strong> ：<ul><li>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</li></ul></li><li><strong>ISO-8859-1字符集</strong>：<ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul></li><li><strong>GBxxx字符集</strong>：<ul><li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul></li><li><strong>Unicode字符集</strong> ：<ul><li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</li><li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li><li>UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul></li></ul><h3 id="编码问题（乱码）"><a href="#编码问题（乱码）" class="headerlink" title="编码问题（乱码）"></a>编码问题（乱码）</h3><p>在IDEA中，使用<code>FileReader</code> 读取项目中的文本文件。由于IDEA的设置，都是默认的<code>UTF-8</code>编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    FileReader可以读取IDE默认编码格式(UTF-8)的文件</span></span><br><span class="line"><span class="comment">    FileReader读取系统默认编码(中文GBK)会产生乱码���</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"10_IO\\我是GBK格式的文本.txt"</span>);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)len);</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那么如何读取GBK编码的文件呢？</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/02_%E8%BD%AC%E6%8D%A2%E6%B5%81%E7%9A%84%E5%8E%9F%E7%90%86.bmp" class="lozad"></p><h2 id="2-InputStreamReader类"><a href="#2-InputStreamReader类" class="headerlink" title="2 - InputStreamReader类"></a>2 - InputStreamReader类</h2><p>转换流<code>java.io.InputStreamReader</code>，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><p>java.io.InputStreamReader extends Reader<br>    InputStreamReader:是字节流通向字符流的桥梁：它使用指定的 charset 读取字节并将其解码为字符。(解码:把看不懂的变成能看懂的)</p><p>继承自父类的共性成员方法:<br>    int read() 读取单个字符并返回。<br>    int read(char[] cbuf)一次读取多个字符,将字符读入数组。<br>    void close() 关闭该流并释放与之关联的所有资源。</p><h3 id="2-1-构造方法"><a href="#2-1-构造方法" class="headerlink" title="2.1 - 构造方法"></a>2.1 - 构造方法</h3><p>​    InputStreamReader(InputStream in) 创建一个使用默认字符集的 InputStreamReader。<br>​    InputStreamReader(InputStream in, String charsetName) 创建使用指定字符集的 InputStreamReader。<br>​    参数:<br>​        InputStream in:字节输入流,用来读取文件中保存的字节<br>​        String charsetName:指定的编码表名称,不区分大小写,可以是utf-8/UTF-8,gbk/GBK,…不指定默认使用UTF-8</p><h3 id="2-2-使用步骤"><a href="#2-2-使用步骤" class="headerlink" title="2.2 - 使用步骤"></a>2.2 - 使用步骤</h3><p>​    1.创建InputStreamReader对象,构造方法中传递字节输入流和指定的编码表名称<br>​    2.使用InputStreamReader对象中的方法read读取文件<br>​    3.释放资源<br> <strong>注意事项:</strong>    构造方法中指定的编码表名称要和文件的编码相同,否则会发生乱码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        使用InputStreamReader读取GBK格式的文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read_gbk</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建InputStreamReader对象,构造方法中传递字节输入流和指定的编码表名称</span></span><br><span class="line">        <span class="comment">//InputStreamReader isr = new InputStreamReader(new FileInputStream("10_IO\\gbk.txt"),"UTF-8");//???</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"10_IO\\gbk.txt"</span>),<span class="string">"GBK"</span>);<span class="comment">//你好</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.使用InputStreamReader对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        使用InputStreamReader读取UTF-8格式的文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read_utf_8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建InputStreamReader对象,构造方法中传递字节输入流和指定的编码表名称</span></span><br><span class="line">        <span class="comment">//InputStreamReader isr = new InputStreamReader(new FileInputStream("10_IO\\utf_8.txt"),"UTF-8");</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"10_IO\\utf_8.txt"</span>));<span class="comment">//不指定默认使用UTF-8</span></span><br><span class="line">        <span class="comment">//2.使用InputStreamReader对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><h2 id="3-OutputStreamWriter类"><a href="#3-OutputStreamWriter类" class="headerlink" title="3 - OutputStreamWriter类"></a>3 - OutputStreamWriter类</h2><p>转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><p>java.io.OutputStreamWriter extends Writer<br>    OutputStreamWriter: 是字符流通向字节流的桥梁：可使用指定的 charset 将要写入流中的字符编码成字节。(编码:把能看懂的变成看不懂)</p><p>继续自父类的共性成员方法:<br>    - void write(int c) 写入单个字符。<br>    - void write(char[] cbuf)写入字符数组。<br>    - abstract  void write(char[] cbuf, int off, int len)写入字符数组的某一部分,off数组的开始索引,len写的字符个数。<br>    - void write(String str)写入字符串。<br>    - void write(String str, int off, int len) 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。<br>    - void flush()刷新该流的缓冲。</p><ul><li>void close() 关闭此流，但要先刷新它。</li></ul><h3 id="3-1-构造方法"><a href="#3-1-构造方法" class="headerlink" title="3.1 - 构造方法"></a>3.1 - 构造方法</h3><p>​    OutputStreamWriter(OutputStream out)创建使用默认字符编码的 OutputStreamWriter。<br>​    OutputStreamWriter(OutputStream out, String charsetName) 创建使用指定字符集的 OutputStreamWriter。<br>​    参数:<br>          OutputStream out:字节输出流,可以用来写转换之后的字节到文件中<br>          String charsetName:指定的编码表名称,不区分大小写,可以是utf-8/UTF-8,gbk/GBK,…不指定默认使用UTF-8</p><h3 id="3-2-使用步骤"><a href="#3-2-使用步骤" class="headerlink" title="3.2 - 使用步骤"></a>3.2 - 使用步骤</h3><p>​    1.创建OutputStreamWriter对象,构造方法中传递字节输出流和指定的编码表名称<br>​    2.使用OutputStreamWriter对象中的方法write,把字符转换为字节存储缓冲区中(编码)<br>​    3.使用OutputStreamWriter对象中的方法flush,把内存缓冲区中的字节刷新到文件中(使用字节流写字节的过程)<br>​    4.释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  使用转换流OutputStreamWriter写GBK格式的文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_gbk</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建OutputStreamWriter对象,构造方法中传递字节输出流和指定的编码表名称</span></span><br><span class="line">    OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"10_IO\\gbk.txt"</span>),<span class="string">"GBK"</span>);</span><br><span class="line">    <span class="comment">//2.使用OutputStreamWriter对象中的方法write,把字符转换为字节存储缓冲区中(编码)</span></span><br><span class="line">    osw.write(<span class="string">"你好"</span>);</span><br><span class="line">    <span class="comment">//3.使用OutputStreamWriter对象中的方法flush,把内存缓冲区中的字节刷新到文件中(使用字节流写字节的过程)</span></span><br><span class="line">    osw.flush();</span><br><span class="line">    <span class="comment">//4.释放资源</span></span><br><span class="line">    osw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  使用转换流OutputStreamWriter写UTF-8格式的文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_utf_8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建OutputStreamWriter对象,构造方法中传递字节输出流和指定的编码表名称</span></span><br><span class="line">    <span class="comment">//OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("10_IO\\utf_8.txt"),"utf-8");</span></span><br><span class="line">    OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"10_IO\\utf_8.txt"</span>));<span class="comment">//不指定默认使用UTF-8</span></span><br><span class="line">    <span class="comment">//2.使用OutputStreamWriter对象中的方法write,把字符转换为字节存储缓冲区中(编码)</span></span><br><span class="line">    osw.write(<span class="string">"你好"</span>);</span><br><span class="line">    <span class="comment">//3.使用OutputStreamWriter对象中的方法flush,把内存缓冲区中的字节刷新到文件中(使用字节流写字节的过程)</span></span><br><span class="line">    osw.flush();</span><br><span class="line">    <span class="comment">//4.释放资源</span></span><br><span class="line">    osw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-练习-：转换文件编码"><a href="#4-练习-：转换文件编码" class="headerlink" title="4 - 练习 ：转换文件编码"></a>4 - 练习 ：转换文件编码</h2><p> 练习：转换文件编码<br>        将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p><pre><code>分析:    1.创建InputStreamReader对象,构造方法中传递字节输入流和指定的编码表名称GBK    2.创建OutputStreamWriter对象,构造方法中传递字节输出流和指定的编码表名称UTF-8    3.使用InputStreamReader对象中的方法read读取文件    4.使用OutputStreamWriter对象中的方法write,把读取的数据写入到文件中    5.释放资源    </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建InputStreamReader对象,构造方法中传递字节输入流和指定的编码表名称GBK</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"10_IO\\我是GBK格式的文本.txt"</span>),<span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">//2.创建OutputStreamWriter对象,构造方法中传递字节输出流和指定的编码表名称UTF-8</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"10_IO\\我是utf_8格式的文件.txt"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//3.使用InputStreamReader对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//4.使用OutputStreamWriter对象中的方法write,把读取的数据写入到文件中</span></span><br><span class="line">            osw.write(len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 - 概述"></a>1 - 概述</h2><p>Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。 </p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。看图理解序列化：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/3_xuliehua.jpg" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/03_%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E6%A6%82%E8%BF%B0.bmp" class="lozad"></p><h2 id="2-ObjectOutputStream类"><a href="#2-ObjectOutputStream类" class="headerlink" title="2 - ObjectOutputStream类"></a>2 - ObjectOutputStream类</h2><p>java.io.ObjectOutputStream extends OutputStream<br>    ObjectOutputStream:对象的序列化流<br>    作用:把对象以流的方式写入到文件中保存</p><h3 id="2-1-构造方法-1"><a href="#2-1-构造方法-1" class="headerlink" title="2.1 - 构造方法"></a>2.1 - 构造方法</h3><p>​    ObjectOutputStream(OutputStream out) 创建写入指定 OutputStream 的 ObjectOutputStream。<br>​    参数:<br>​        OutputStream out:字节输出流</p><h3 id="2-2-特有的成员方法"><a href="#2-2-特有的成员方法" class="headerlink" title="2.2 - 特有的成员方法"></a>2.2 - 特有的成员方法</h3><p>​    void writeObject(Object obj) 将指定的对象写入 ObjectOutputStream。</p><h3 id="2-3-使用步骤"><a href="#2-3-使用步骤" class="headerlink" title="2.3 - 使用步骤"></a>2.3 - 使用步骤</h3><p>​    1.创建ObjectOutputStream对象,构造方法中传递字节输出流<br>​    2.使用ObjectOutputStream对象中的方法writeObject,把对象写入到文件中<br>​    3.释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo04.ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    序列化和反序列化的时候,会抛出NotSerializableException没有序列化异常</span></span><br><span class="line"><span class="comment">    类通过实现 java.io.Serializable 接口以启用其序列化功能。未实现此接口的类将无法使其任何状态序列化或反序列化。</span></span><br><span class="line"><span class="comment">    Serializable接口也叫标记型接口</span></span><br><span class="line"><span class="comment">        要进行序列化和反序列化的类必须实现Serializable接口,就会给类添加一个标记</span></span><br><span class="line"><span class="comment">        当我们进行序列化和反序列化的时候,就会检测类上是否有这个标记</span></span><br><span class="line"><span class="comment">            有:就可以序列化和反序列化</span></span><br><span class="line"><span class="comment">            没有:就会抛出 NotSerializableException异常</span></span><br><span class="line"><span class="comment">    去市场买肉--&gt;肉上有一个蓝色章(检测合格)--&gt;放心购买--&gt;买回来怎么吃随意</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    static关键字:静态关键字</span></span><br><span class="line"><span class="comment">        静态优先于非静态加载到内存中(静态优先于对象进入到内存中)</span></span><br><span class="line"><span class="comment">        被static修饰的成员变量不能被序列化的,序列化的都是对象</span></span><br><span class="line"><span class="comment">        private static int age;</span></span><br><span class="line"><span class="comment">        oos.writeObject(new Person("小美女",18));</span></span><br><span class="line"><span class="comment">        Object o = ois.readObject();</span></span><br><span class="line"><span class="comment">        Person&#123;name='小美女', age=0&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    transient关键字:瞬态关键字</span></span><br><span class="line"><span class="comment">        被transient修饰成员变量,不能被序列化</span></span><br><span class="line"><span class="comment">        private transient int age;</span></span><br><span class="line"><span class="comment">        oos.writeObject(new Person("小美女",18));</span></span><br><span class="line"><span class="comment">        Object o = ois.readObject();</span></span><br><span class="line"><span class="comment">        Person&#123;name='小美女', age=0&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//private static int age;</span></span><br><span class="line">    <span class="comment">//private transient int age;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">//1.创建ObjectOutputStream对象,构造方法中传递字节输出流</span></span><br><span class="line">       ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"10_IO\\person.txt"</span>));</span><br><span class="line">       <span class="comment">//2.使用ObjectOutputStream对象中的方法writeObject,把对象写入到文件中</span></span><br><span class="line">       oos.writeObject(<span class="keyword">new</span> Person(<span class="string">"小美女"</span>,<span class="number">18</span>));</span><br><span class="line">       <span class="comment">//3.释放资源</span></span><br><span class="line">       oos.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="3-ObjectInputStream类"><a href="#3-ObjectInputStream类" class="headerlink" title="3 - ObjectInputStream类"></a>3 - ObjectInputStream类</h2><p>java.io.ObjectInputStream extends InputStream<br>ObjectInputStream:对象的反序列化流<br>作用:把文件中保存的对象,以流的方式读取出来使用</p><h3 id="3-1-构造方法-1"><a href="#3-1-构造方法-1" class="headerlink" title="3.1 - 构造方法"></a>3.1 - 构造方法</h3><p>​    ObjectInputStream(InputStream in) 创建从指定 InputStream 读取的 ObjectInputStream。<br>​    参数:<br>​        InputStream in:字节输入流</p><h3 id="3-2-特有的成员方法"><a href="#3-2-特有的成员方法" class="headerlink" title="3.2 - 特有的成员方法"></a>3.2 - 特有的成员方法</h3><p>​    Object readObject() 从 ObjectInputStream 读取对象。</p><h3 id="3-3-使用步骤"><a href="#3-3-使用步骤" class="headerlink" title="3.3 - 使用步骤"></a>3.3 - 使用步骤</h3><p>​    1.创建ObjectInputStream对象,构造方法中传递字节输入流<br>​    2.使用ObjectInputStream对象中的方法readObject读取保存对象的文件<br>​    3.释放资源<br>​    4.使用读取出来的对象(打印)</p><p> readObject方法声明抛出了ClassNotFoundException(class文件找不到异常)<br> 当不存在对象的class文件时抛出此异常<br> 反序列化的前提:<br>    1.类必须实现Serializable<br>    2.必须存在类对应的class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建ObjectInputStream对象,构造方法中传递字节输入流</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"10_IO\\person.txt"</span>));</span><br><span class="line">        <span class="comment">//2.使用ObjectInputStream对象中的方法readObject读取保存对象的文件</span></span><br><span class="line">        Object o = ois.readObject();</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="comment">//4.使用读取出来的对象(打印)</span></span><br><span class="line">        System.out.println(o);</span><br><span class="line">        Person p = (Person)o;</span><br><span class="line">        System.out.println(p.getName()+p.getAge());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-练习：序列化集合"><a href="#4-练习：序列化集合" class="headerlink" title="4 - 练习：序列化集合"></a>4 - 练习：序列化集合</h2><pre><code>    当我们想在文件中保存多个对象的时候    可以把多个对象存储到一个集合中    对集合进序列化和反序列化分析:    1.定义一个存储Person对象的ArrayList集合    2.往ArrayList集合中存储Person对象    3.创建一个序列化流ObjectOutputStream对象    4.使用ObjectOutputStream对象中的方法writeObject,对集合进行序列化    5.创建一个反序列化ObjectInputStream对象    6.使用ObjectInputStream对象中的方法readObject读取文件中保存的集合    7.把Object类型的集合转换为ArrayList类型    8.遍历ArrayList集合    9.释放资源</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//1.定义一个存储Person对象的ArrayList集合</span></span><br><span class="line">        ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.往ArrayList集合中存储Person对象</span></span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">18</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">19</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">20</span>));</span><br><span class="line">        <span class="comment">//3.创建一个序列化流ObjectOutputStream对象</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"10_IO\\list.txt"</span>));</span><br><span class="line">        <span class="comment">//4.使用ObjectOutputStream对象中的方法writeObject,对集合进行序列化</span></span><br><span class="line">        oos.writeObject(list);</span><br><span class="line">        <span class="comment">//5.创建一个反序列化ObjectInputStream对象</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"10_IO\\list.txt"</span>));</span><br><span class="line">        <span class="comment">//6.使用ObjectInputStream对象中的方法readObject读取文件中保存的集合</span></span><br><span class="line">        Object o = ois.readObject();</span><br><span class="line">        <span class="comment">//7.把Object类型的集合转换为ArrayList类型</span></span><br><span class="line">        ArrayList&lt;Person&gt; list2 = (ArrayList&lt;Person&gt;)o;</span><br><span class="line">        <span class="comment">//8.遍历ArrayList集合</span></span><br><span class="line">        <span class="keyword">for</span> (Person p : list2) &#123;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h1><p>java.io.PrintStream:打印流<br>        PrintStream 为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。<br>    PrintStream特点:<br>        1.只负责数据的输出,不负责数据的读取<br>        2.与其他输出流不同，PrintStream 永远不会抛出 IOException<br>        3.有特有的方法,print,println<br>            void print(任意类型的值)<br>            void println(任意类型的值并换行)<br>    ## 1 - 构造方法:</p><p>​        PrintStream(File file):输出的目的地是一个文件<br>​        PrintStream(OutputStream out):输出的目的地是一个字节输出流<br>​        PrintStream(String fileName) :输出的目的地是一个文件路径<br>​    PrintStream extends OutputStream<br>​    继承自父类的成员方法:</p><pre><code>- public void close() ：关闭此输出流并释放与此流相关联的任何系统资源。- public void flush() ：刷新此输出流并强制任何缓冲的输出字节被写出。- public void write(byte[] b)：将 b.length字节从指定的字节数组写入此输出流。- public void write(byte[] b, int off, int len) ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。- public abstract void write(int b) ：将指定的字节输出流。注意:​        如果使用继承自父类的write方法写数据,那么查看数据的时候会查询编码表 97-&gt;a​        如果使用自己特有的方法print/println方法写数据,写的数据原样输出 97-&gt;97</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">       <span class="comment">//System.out.println("HelloWorld");</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建打印流PrintStream对象,构造方法中绑定要输出的目的地</span></span><br><span class="line">       PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"10_IO\\print.txt"</span>);</span><br><span class="line">       <span class="comment">//如果使用继承自父类的write方法写数据,那么查看数据的时候会查询编码表 97-&gt;a</span></span><br><span class="line">       ps.write(<span class="number">97</span>);</span><br><span class="line">       <span class="comment">//如果使用自己特有的方法print/println方法写数据,写的数据原样输出 97-&gt;97</span></span><br><span class="line">       ps.println(<span class="number">97</span>);</span><br><span class="line">       ps.println(<span class="number">8.8</span>);</span><br><span class="line">       ps.println(<span class="string">'a'</span>);</span><br><span class="line">       ps.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">       ps.println(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//释放资源</span></span><br><span class="line">       ps.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以改变输出语句的目的地(打印流的流向)<br>    输出语句,默认在控制台输出<br>    使用System.setOut方法改变输出语句的目的地改为参数中传递的打印流的目的地<br>        static void setOut(PrintStream out)<br>          重新分配“标准”输出流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"我是在控制台输出"</span>);</span><br><span class="line"></span><br><span class="line">       PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"10_IO\\目的地是打印流.txt"</span>);</span><br><span class="line">       System.setOut(ps);<span class="comment">//把输出语句的目的地改变为打印流的目的地</span></span><br><span class="line">       System.out.println(<span class="string">"我在打印流的目的地中输出"</span>);</span><br><span class="line"></span><br><span class="line">       ps.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。&lt;/
      
    
    </summary>
    
      <category term="Java" scheme="https://cometorbityh.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://cometorbityh.github.io/tags/Java/"/>
    
      <category term="IO" scheme="https://cometorbityh.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>191016_JAVA_IO流(2)_IO流</title>
    <link href="https://cometorbityh.github.io/2019/11/16/191016-JAVA-IO%E6%B5%81-2-IO%E6%B5%81/"/>
    <id>https://cometorbityh.github.io/2019/11/16/191016-JAVA-IO流-2-IO流/</id>
    <published>2019-11-16T13:28:49.000Z</published>
    <updated>2019-11-17T16:04:54.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/IO%E6%B5%81.png" class="lozad"></p><h2 id="1、字节输出流（内存-—-gt-硬盘）"><a href="#1、字节输出流（内存-—-gt-硬盘）" class="headerlink" title="1、字节输出流（内存 —&gt; 硬盘）"></a>1、字节输出流（内存 —&gt; 硬盘）</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191116155749.png" class="lozad"></p><h3 id="1-1、OutputStream"><a href="#1-1、OutputStream" class="headerlink" title="1.1、OutputStream"></a>1.1、OutputStream</h3><ul><li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。  </li><li><code>public void flush()</code> ：刷新此输出流并强制任何缓冲的输出字节被写出。  </li><li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。  </li><li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  </li><li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li></ul><h3 id="1-2、FileOutputStream"><a href="#1-2、FileOutputStream" class="headerlink" title="1.2、FileOutputStream"></a>1.2、FileOutputStream</h3><ul><li><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。 </li><li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称（文件路径）写入文件。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p><p><strong>写入数据的原理(内存–&gt;硬盘)</strong><br>        java程序–&gt;JVM(java虚拟机)–&gt;OS(操作系统)–&gt;OS调用写数据的方法–&gt;把数据写入到文件中</p><p><strong>字节输出流的使用步骤(重点):</strong></p><pre><code>1.传递路径：创建一个FileOutputStream对象,构造方法中传递写入数据的目的地2.写入数据：调用FileOutputStream对象中的方法write,把数据写入到文件中3.释放资源：(流使用会占用一定的内存,使用完毕要把内存清空,提供程序的效率)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 传递路径</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"F:\\IO\\a.txt"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入数据(单个字节)</span></span><br><span class="line">        <span class="comment">//fos.write(97);//a (97---&gt;1100001---&gt;a，查询ASCII表)</span></span><br><span class="line">        <span class="comment">//写入数据(多个字节)</span></span><br><span class="line">        <span class="comment">//byte[] bytes = &#123;65,66,67,68,69&#125;;      //ABCDE</span></span><br><span class="line">        <span class="comment">//byte[] bytes = &#123;-65,-66,-67,68,69&#125;;   //烤紻E</span></span><br><span class="line">        <span class="comment">//fos.write(bytes);</span></span><br><span class="line">        <span class="comment">//fos.write(bytes,1,2);//BC</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符串转为字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes2 = <span class="string">"你好"</span>.getBytes();</span><br><span class="line">        System.out.println(Arrays.toString(bytes2));<span class="comment">//[-28, -67, -96, -27, -91, -67]</span></span><br><span class="line">        fos.write(bytes2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2、续写-换行"><a href="#1-2-2、续写-换行" class="headerlink" title="1.2.2、续写/ 换行"></a>1.2.2、续写/ 换行</h4><p>上述代码虽然成功写入了数据，但是每次重新运行都会清空数据重新创建文件，那么如何做到不清空数据，并且每次写入时换行？</p><p>我们需要用到FIleOUtputStrem类的2个参数的构造方法，它可以做到<strong>追加写/ 续写</strong><br>       <code>FileOutputStream(String name, boolean append)</code>创建一个向具有指定 name 的文件中写入数据的输出文件流。<br>       <code>FileOutputStream(File file, boolean append)</code>创建一个向指定 File 对象表示的文件中写入数据的文件输出流。<br>        参数:<br>           String name,File file:写入数据的目的地<br>           boolean append:追加写开关<br>            true:创建对象不会覆盖源文件,继续在文件的末尾追加写数据<br>            false:创建一个新文件,覆盖源文件<br>    写换行:写换行符号<br>        windows:\r\n<br>        linux:/n</p><p>​         mac:/r</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 传递路径（追加写）</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"F:\\IO\\a.txt"</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入数据(多个字节)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            fos.write(<span class="string">"你好"</span>.getBytes());</span><br><span class="line">            fos.write(<span class="string">"\r\n"</span>.getBytes());   <span class="comment">//换行</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191116163150.png" class="lozad"></p><h2 id="2、字节输入流（硬盘-—-gt-内存）"><a href="#2、字节输入流（硬盘-—-gt-内存）" class="headerlink" title="2、字节输入流（硬盘 —&gt; 内存）"></a>2、字节输入流（硬盘 —&gt; 内存）</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191116163514.png" class="lozad"></p><h3 id="2-1、InputStream"><a href="#2-1、InputStream" class="headerlink" title="2.1、InputStream"></a>2.1、InputStream</h3><p>int read()从输入流中读取数据的下一个字节。<br>int read(byte[] b) 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。<br>void close() 关闭此输入流并释放与该流关联的所有系统资源。</p><h3 id="2-2、FileInputStream"><a href="#2-2、FileInputStream" class="headerlink" title="2.2、FileInputStream"></a>2.2、FileInputStream</h3><h4 id="2-2-1、构造方法"><a href="#2-2-1、构造方法" class="headerlink" title="2.2.1、构造方法"></a>2.2.1、构造方法</h4><p>FileInputStream(String name)<br>        FileInputStream(File file)<br>        参数:读取文件的数据源<br>            String name:文件的路径<br>            File file:文件<br>        构造方法的作用:<br>            1.会创建一个FileInputStream对象<br>            2.会把FileInputStream对象指定构造方法中要读取的文件</p><pre><code>读取数据的原理(硬盘--&gt;内存)    java程序--&gt;JVM--&gt;OS--&gt;OS读取数据的方法--&gt;读取文件字节输入流的使用步骤(重点):    1.创建FileInputStream对象,构造方法中绑定要读取的数据源    2.使用FileInputStream对象中的方法read,读取文件    3.释放资源</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 传递路径（追加写）</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"F:\\IO\\a.txt"</span>); <span class="comment">//(a.txt保存的数据为 "abc")</span></span><br><span class="line">    <span class="comment">//读取数据(单个字节)</span></span><br><span class="line">    <span class="comment">/*int content = fis.read();</span></span><br><span class="line"><span class="comment">        System.out.println(content);      //97</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        content = fis.read();</span></span><br><span class="line"><span class="comment">        System.out.println(content);      //98</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        content = fis.read();</span></span><br><span class="line"><span class="comment">        System.out.println(content);      //99</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        content = fis.read();</span></span><br><span class="line"><span class="comment">        System.out.println(content);      //-1 (读完)*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数据(循环读取，读到-1时结束)</span></span><br><span class="line">    <span class="comment">/*int len = 0;</span></span><br><span class="line"><span class="comment">        while((len = fis.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">            System.out.print(len);  //979899</span></span><br><span class="line"><span class="comment">            System.out.print((char)len);    //abc</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取数据（多个字节，byte数组）</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">//存储读取到的多个字节</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>; <span class="comment">//记录每次读取的有效字节个数</span></span><br><span class="line">    <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把整个byte数组转换成字符串，本例中除了 abc 其余都是空格，造成资源浪费</span></span><br><span class="line">        <span class="comment">//System.out.println(new String(bytes));</span></span><br><span class="line">        <span class="comment">//String(byte[] bytes, int offset, int length) 把字节数组的一部分转换为字符串 offset:数组的开始索引 length:转换的字节个数</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、案例：文件复制"><a href="#3、案例：文件复制" class="headerlink" title="3、案例：文件复制"></a>3、案例：文件复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(常用方法)</span><br><span class="line">   A --&gt;|获取| A1[Decision]</span><br><span class="line">   A --&gt;|判断| A2[Result one]</span><br><span class="line">   A --&gt;|创建+删除| A3[Result two]</span><br><span class="line">   A1 --&gt; a11[&quot;public String getAbsolutePath()&quot;]</span><br><span class="line">   A1 --&gt; a12[Decision]</span><br><span class="line">   A1 --&gt; a13[Decision]</span><br></pre></td></tr></table></figure><p>文件复制练习:一读一写</p><pre><code>明确:    数据源: c:\\1.jpg    数据的目的地: d:\\1.jpg文件复制的步骤:    1.创建一个字节输入流对象,构造方法中绑定要读取的数据源    2.创建一个字节输出流对象,构造方法中绑定要写入的目的地    3.使用字节输入流对象中的方法read读取文件    4.使用字节输出流中的方法write,把读取到的字节写入到目的地的文件中    5.释放资源</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//1.创建一个字节输入流对象,构造方法中绑定要读取的数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:\\1.jpg"</span>);</span><br><span class="line">        <span class="comment">//2.创建一个字节输出流对象,构造方法中绑定要写入的目的地</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\1.jpg"</span>);</span><br><span class="line">        <span class="comment">//一次读取一个字节写入一个字节的方式</span></span><br><span class="line">        <span class="comment">//3.使用字节输入流对象中的方法read读取文件</span></span><br><span class="line">        <span class="comment">/*int len = 0;</span></span><br><span class="line"><span class="comment">        while((len = fis.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">            //4.使用字节输出流中的方法write,把读取到的字节写入到目的地的文件中</span></span><br><span class="line"><span class="comment">            fos.write(len);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用数组缓冲读取多个字节,写入多个字节</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//3.使用字节输入流对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//每次读取的有效字节个数</span></span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//4.使用字节输出流中的方法write,把读取到的字节写入到目的地的文件中</span></span><br><span class="line">            fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.释放资源(先关写的,后关闭读的;如果写完了,肯定读取完毕了)</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="keyword">long</span> e = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"复制文件共耗时:"</span>+(e-s)+<span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3、字符输入流"><a href="#3、字符输入流" class="headerlink" title="3、字符输入流"></a>3、字符输入流</h2><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用字节流读取中文文件</span></span><br><span class="line"><span class="comment">    1个中文</span></span><br><span class="line"><span class="comment">        GBK:占用两个字节</span></span><br><span class="line"><span class="comment">        UTF-8:占用3个字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"09_IOAndProperties\\c.txt"</span>);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1、Reader"><a href="#3-1、Reader" class="headerlink" title="3.1、Reader"></a>3.1、Reader</h3><p>java.io.Reader:字符输入流,是字符输入流的最顶层的父类,是一个抽象类，定义了一些共性的成员方法,</p><p>共性的成员方法:<br>   <code>int read()</code> 读取单个字符并返回。<br>   <code>int read(char[] cbuf)</code>一次读取多个字符,将字符读入数组。<br>   <code>void close()</code> 关闭该流并释放与之关联的所有资源。</p><h3 id="3-2、FileReader"><a href="#3-2、FileReader" class="headerlink" title="3.2、FileReader"></a>3.2、FileReader</h3><p>java.io.FileReader extends InputStreamReader extends Reader<br>FileReader:文件字符输入流<br>作用:把硬盘文件中的数据以字符的方式读取到内存中</p><p><strong>构造方法:</strong><br>    FileReader(String fileName)<br>    FileReader(File file)<br>    参数:读取文件的数据源<br>        String fileName:文件的路径<br>        File file:一个文件<br>    FileReader构造方法的作用:<br>        1.创建一个FileReader对象<br>        2.会把FileReader对象指向要读取的文件<br><strong>字符输入流的使用步骤:</strong><br>    1.创建FileReader对象,构造方法中绑定要读取的数据源<br>    2.使用FileReader对象中的方法read读取文件<br>    3.释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建FileReader对象,构造方法中绑定要读取的数据源</span></span><br><span class="line">    FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"09_IOAndProperties\\c.txt"</span>);</span><br><span class="line">    <span class="comment">//2.使用FileReader对象中的方法read读取文件</span></span><br><span class="line">    <span class="comment">//int read() 读取单个字符并返回。</span></span><br><span class="line">    <span class="comment">/*int len = 0;</span></span><br><span class="line"><span class="comment">        while((len = fr.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">            System.out.print((char)len);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//int read(char[] cbuf)一次读取多个字符,将字符读入数组。</span></span><br><span class="line">    <span class="keyword">char</span>[] cs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];<span class="comment">//该数组用来存储读取到的多个字符</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//记录的是每次读取的有效字符个数</span></span><br><span class="line">    <span class="keyword">while</span>((len = fr.read(cs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                String类的构造方法</span></span><br><span class="line"><span class="comment">                String(char[] value) 把字符数组转换为字符串</span></span><br><span class="line"><span class="comment">                String(char[] value, int offset, int count) 把字符数组的一部分转换为字符串 offset数组的开始索引 count转换的个数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(cs,<span class="number">0</span>,len));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.释放资源</span></span><br><span class="line">    fr.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、字符输出流"><a href="#4、字符输出流" class="headerlink" title="4、字符输出流"></a>4、字符输出流</h2><h3 id="4-1、Writer"><a href="#4-1、Writer" class="headerlink" title="4.1、Writer"></a>4.1、Writer</h3><p>java.io.Writer:字符输出流,是所有字符输出流的最顶层的父类,是一个抽象类</p><p><strong>共性的成员方法:</strong><br>    - void write(int c) 写入单个字符。<br>    - void write(char[] cbuf)写入字符数组。<br>    - abstract  void write(char[] cbuf, int off, int len)写入字符数组的某一部分,off数组的开始索引,len写的字符个数。<br>    - void write(String str)写入字符串。<br>    - void write(String str, int off, int len) 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。<br>    - void flush()刷新该流的缓冲。<br>    - void close() 关闭此流，但要先刷新它。</p><h3 id="4-2、FileWriter"><a href="#4-2、FileWriter" class="headerlink" title="4.2、FileWriter"></a>4.2、FileWriter</h3><p>java.io.FileWriter extends OutputStreamWriter extends Writer<br>FileWriter:文件字符输出流<br>作用:把内存中字符数据写入到文件中</p><p><strong>构造方法:</strong><br>    FileWriter(File file)根据给定的 File 对象构造一个 FileWriter 对象。<br>    FileWriter(String fileName) 根据给定的文件名构造一个 FileWriter 对象。<br>    参数:写入数据的目的地<br>        String fileName:文件的路径<br>        File file:是一个文件<br>    构造方法的作用:<br>        1.会创建一个FileWriter对象<br>        2.会根据构造方法中传递的文件/文件的路径,创建文件<br>        3.会把FileWriter对象指向创建好的文件</p><p><strong>字符输出流的使用步骤(重点):</strong><br>    1.创建FileWriter对象,构造方法中绑定要写入数据的目的地<br>    2.使用FileWriter中的方法write,把数据写入到内存缓冲区中(字符转换为字节的过程，因为计算机是按照字节存储的)<br>    3.使用FileWriter中的方法flush,把内存缓冲区中的数据,刷新到文件中<br>    4.释放资源(会先把内存缓冲区中的数据刷新到文件中)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建FileWriter对象,构造方法中绑定要写入数据的目的地</span></span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"09_IOAndProperties\\d.txt"</span>);</span><br><span class="line">    <span class="comment">//2.使用FileWriter中的方法write,把数据写入到内存缓冲区中(字符转换为字节的过程)</span></span><br><span class="line">    <span class="comment">//void write(int c) 写入单个字符。</span></span><br><span class="line">    fw.write(<span class="number">97</span>);</span><br><span class="line">    <span class="comment">//3.使用FileWriter中的方法flush,把内存缓冲区中的数据,刷新到文件中</span></span><br><span class="line">    <span class="comment">//fw.flush();</span></span><br><span class="line">    <span class="comment">//4.释放资源(会先把内存缓冲区中的数据刷新到文件中)</span></span><br><span class="line">    fw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flush方法和close方法的区别<br>        - flush ：刷新缓冲区，流对象可以继续使用。<br>        - close:  先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建FileWriter对象,构造方法中绑定要写入数据的目的地</span></span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"09_IOAndProperties\\e.txt"</span>);</span><br><span class="line">    <span class="comment">//2.使用FileWriter中的方法write,把数据写入到内存缓冲区中(字符转换为字节的过程)</span></span><br><span class="line">    <span class="comment">//void write(int c) 写入单个字符。</span></span><br><span class="line">    fw.write(<span class="number">97</span>);</span><br><span class="line">    <span class="comment">//3.使用FileWriter中的方法flush,把内存缓冲区中的数据,刷新到文件中</span></span><br><span class="line">    fw.flush();</span><br><span class="line">    <span class="comment">//刷新之后流可以继续使用</span></span><br><span class="line">    fw.write(<span class="number">98</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.释放资源(会先把内存缓冲区中的数据刷新到文件中)</span></span><br><span class="line">    fw.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//close方法之后流已经关闭了,已经从内存中消失了,流就不能再使用了</span></span><br><span class="line">    fw.write(<span class="number">99</span>);<span class="comment">//IOException: Stream closed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"09_IOAndProperties\\f.txt"</span>);</span><br><span class="line">    <span class="keyword">char</span>[] cs = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;;</span><br><span class="line">    <span class="comment">//void write(char[] cbuf)写入字符数组。</span></span><br><span class="line">    fw.write(cs);<span class="comment">//abcde</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//void write(char[] cbuf, int off, int len)写入字符数组的某一部分,off数组的开始索引,len写的字符个数。</span></span><br><span class="line">    fw.write(cs,<span class="number">1</span>,<span class="number">3</span>);<span class="comment">//bcd</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//void write(String str)写入字符串。</span></span><br><span class="line">    fw.write(<span class="string">"传智播客"</span>);<span class="comment">//传智播客</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//void write(String str, int off, int len) 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</span></span><br><span class="line">    fw.write(<span class="string">"黑马程序员"</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//程序员</span></span><br><span class="line"></span><br><span class="line">    fw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>续写和换行</strong><br>    续写,追加写:使用两个参数的构造方法<br>        FileWriter(String fileName, boolean append)<br>        FileWriter(File file, boolean append)<br>        参数:<br>            String fileName,File file:写入数据的目的地<br>            boolean append:续写开关 true:不会创建新的文件覆盖源文件,可以续写; false:创建新的文件覆盖源文件<br>     换行:换行符号<br>        windows:\r\n<br>        linux:/n<br>        mac:/r</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Writer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"09_IOAndProperties\\g.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            fw.write(<span class="string">"HelloWorld"</span>+i+<span class="string">"\r\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="IO流的异常处理"><a href="#IO流的异常处理" class="headerlink" title="IO流的异常处理"></a>IO流的异常处理</h1><h2 id="1、JDK7前-try…catch…finally"><a href="#1、JDK7前-try…catch…finally" class="headerlink" title="1、JDK7前 try…catch…finally"></a>1、JDK7前 try…catch…finally</h2><p>在jdk1.7之前使用try catch finally 处理流中的异常<br>    格式:<br>        try{<br>            可能会产出异常的代码<br>        }catch(异常类变量 变量名){<br>            异常的处理逻辑<br>        }finally{<br>            一定会指定的代码<br>            资源释放<br>        }</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//提高变量fw的作用域,让finally可以使用</span></span><br><span class="line">        <span class="comment">//变量在定义的时候,可以没有值,但是使用的时候必须有值</span></span><br><span class="line">        <span class="comment">//fw = new FileWriter("09_IOAndProperties\\g.txt",true); 执行失败,fw没有值,fw.close会报错</span></span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//可能会产出异常的代码</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(<span class="string">"w:\\09_IOAndProperties\\g.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                fw.write(<span class="string">"HelloWorld"</span>+i+<span class="string">"\r\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            <span class="comment">//异常的处理逻辑</span></span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//一定会指定的代码</span></span><br><span class="line">            <span class="comment">//创建对象失败了,fw的默认值就是null,null是不能调用方法的,会抛出NullPointerException,需要增加一个判断,不是null在把资源释放</span></span><br><span class="line">            <span class="keyword">if</span>(fw!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//fw.close方法声明抛出了IOException异常对象,所以我们就的处理这个异常对象,要么throws,要么try catch</span></span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2、JDK7新特性"><a href="#2、JDK7新特性" class="headerlink" title="2、JDK7新特性"></a>2、JDK7新特性</h2><p>在try的后边可以增加一个(),在括号中可以定义流对象<br>    那么这个流对象的作用域就在try中有效<br>    try中的代码执行完毕,会自动把流对象释放,不用写finally<br>    格式:<br>        try(定义流对象;定义流对象….){<br>            可能会产出异常的代码<br>        }catch(异常类变量 变量名){<br>            异常的处理逻辑<br>        }</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>(<span class="comment">//1.创建一个字节输入流对象,构造方法中绑定要读取的数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:\\1.jpg"</span>);</span><br><span class="line">        <span class="comment">//2.创建一个字节输出流对象,构造方法中绑定要写入的目的地</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\1.jpg"</span>);)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可能会产出异常的代码</span></span><br><span class="line">        <span class="comment">//一次读取一个字节写入一个字节的方式</span></span><br><span class="line">        <span class="comment">//3.使用字节输入流对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//4.使用字节输出流中的方法write,把读取到的字节写入到目的地的文件中</span></span><br><span class="line">            fos.write(len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        <span class="comment">//异常的处理逻辑</span></span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、JDK9新特性"><a href="#3、JDK9新特性" class="headerlink" title="3、JDK9新特性"></a>3、JDK9新特性</h2><p>JDK9新特性<br>    try的前边可以定义流对象<br>    在try后边的()中可以直接引入流对象的名称(变量名)<br>    在try代码执行完毕之后,流对象也可以释放掉,不用写finally<br>    格式:<br>        A a = new A();<br>        B b = new B();<br>        try(a,b){<br>            可能会产出异常的代码<br>        }catch(异常类变量 变量名){<br>            异常的处理逻辑<br>        }</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建一个字节输入流对象,构造方法中绑定要读取的数据源</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:\\1.jpg"</span>);</span><br><span class="line">    <span class="comment">//2.创建一个字节输出流对象,构造方法中绑定要写入的目的地</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\1.jpg"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>(fis;fos)&#123;</span><br><span class="line">        <span class="comment">//一次读取一个字节写入一个字节的方式</span></span><br><span class="line">        <span class="comment">//3.使用字节输入流对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//4.使用字节输出流中的方法write,把读取到的字节写入到目的地的文件中</span></span><br><span class="line">            fos.write(len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fos.write(1);//此时会报异常，Stream Closed流已关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Properties集合介绍"><a href="#Properties集合介绍" class="headerlink" title="Properties集合介绍"></a>Properties集合介绍</h1><p>java.util.Properties集合 extends Hashtable&lt;k,v&gt; implements Map&lt;k,v&gt;<br>    Properties 类表示了一个持久的属性集。Properties 可保存在流中或从流中加载。<br>    Properties集合是一个唯一和IO流相结合的集合<br>        可以使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储<br>        可以使用Properties集合中的方法load,把硬盘中保存的文件(键值对),读取到集合中使用</p><p>属性列表中每个键及其对应值都是一个字符串。<br>    Properties集合是一个双列集合,key和value默认都是字符串</p><h2 id="1、Properties基本使用"><a href="#1、Properties基本使用" class="headerlink" title="1、Properties基本使用"></a>1、Properties基本使用</h2><p><strong>使用Properties集合存储数据,遍历取出Properties集合中的数据</strong><br>    Properties集合是一个双列集合,key和value默认都是字符串<br>    Properties集合有一些操作字符串的特有方法<br>        Object setProperty(String key, String value) 调用 Hashtable 的方法 put。<br>        String getProperty(String key) 通过key找到value值,此方法相当于Map集合中的get(key)方法<br>        Set<string> stringPropertyNames() 返回此属性列表中的键集，其中该键及其对应值是字符串,此方法相当于Map集合中的keySet方法</string></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建Properties集合对象</span></span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="comment">//使用setProperty往集合中添加数据</span></span><br><span class="line">    prop.setProperty(<span class="string">"赵丽颖"</span>,<span class="string">"168"</span>);</span><br><span class="line">    prop.setProperty(<span class="string">"迪丽热巴"</span>,<span class="string">"165"</span>);</span><br><span class="line">    prop.setProperty(<span class="string">"古力娜扎"</span>,<span class="string">"160"</span>);</span><br><span class="line">    <span class="comment">//prop.put(1,true);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用stringPropertyNames把Properties集合中的键取出,存储到一个Set集合中</span></span><br><span class="line">    Set&lt;String&gt; set = prop.stringPropertyNames();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历Set集合,取出Properties集合的每一个键</span></span><br><span class="line">    <span class="keyword">for</span> (String key : set) &#123;</span><br><span class="line">        <span class="comment">//使用getProperty方法通过key获取value</span></span><br><span class="line">        String value = prop.getProperty(key);</span><br><span class="line">        System.out.println(key+<span class="string">"="</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##2、store()——Properties数据存储到硬盘</p><p>可以使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储<br>void store(OutputStream out, String comments)<br>void store(Writer writer, String comments)<br>参数:<br>    OutputStream out:字节输出流,不能写入中文<br>    Writer writer:字符输出流,可以写中文<br>    String comments:注释,用来解释说明保存的文件是做什么用的<br>            不能使用中文,会产生乱码,默认是Unicode编码<br>            一般使用””空字符串</p><p>使用步骤:<br>    1.创建Properties集合对象,添加数据<br>    2.创建字节输出流/字符输出流对象,构造方法中绑定要输出的目的地<br>    3.使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储<br>    4.释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建Properties集合对象,添加数据</span></span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    prop.setProperty(<span class="string">"赵丽颖"</span>,<span class="string">"168"</span>);</span><br><span class="line">    prop.setProperty(<span class="string">"迪丽热巴"</span>,<span class="string">"165"</span>);</span><br><span class="line">    prop.setProperty(<span class="string">"古力娜扎"</span>,<span class="string">"160"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建字节输出流/字符输出流对象,构造方法中绑定要输出的目的地</span></span><br><span class="line">    <span class="comment">//FileWriter fw = new FileWriter("09_IOAndProperties\\prop.txt");</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储</span></span><br><span class="line">    <span class="comment">//prop.store(fw,"save data");</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.释放资源</span></span><br><span class="line">    <span class="comment">//fw.close();</span></span><br><span class="line"></span><br><span class="line">    prop.store(<span class="keyword">new</span> FileOutputStream(<span class="string">"09_IOAndProperties\\prop2.txt"</span>),<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、load-——Properties读取硬盘数据（⭐）"><a href="#3、load-——Properties读取硬盘数据（⭐）" class="headerlink" title="3、load()——Properties读取硬盘数据（⭐）"></a>3、load()——Properties读取硬盘数据（⭐）</h2><p>可以使用Properties集合中的方法load,把硬盘中保存的文件(键值对),读取到集合中使用<br>    void load(InputStream inStream)<br>    void load(Reader reader)<br>    参数:<br>        InputStream inStream:字节输入流,不能读取含有中文的键值对<br>        Reader reader:字符输入流,能读取含有中文的键值对<br>    使用步骤:<br>        1.创建Properties集合对象<br>        2.使用Properties集合对象中的方法load读取保存键值对的文件<br>        3.遍历Properties集合<br>    注意:<br>        1.存储键值对的文件中,键与值默认的连接符号可以使用=,空格(其他符号)<br>        2.存储键值对的文件中,可以使用#进行注释,被注释的键值对不会再被读取<br>        3.存储键值对的文件中,键与值默认都是字符串,不用再加引号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建Properties集合对象</span></span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="comment">//2.使用Properties集合对象中的方法load读取保存键值对的文件</span></span><br><span class="line">    prop.load(<span class="keyword">new</span> FileReader(<span class="string">"09_IOAndProperties\\prop.txt"</span>));</span><br><span class="line">    <span class="comment">//prop.load(new FileInputStream("09_IOAndProperties\\prop.txt"));</span></span><br><span class="line">    <span class="comment">//3.遍历Properties集合</span></span><br><span class="line">    Set&lt;String&gt; set = prop.stringPropertyNames();</span><br><span class="line">    <span class="keyword">for</span> (String key : set) &#123;</span><br><span class="line">        String value = prop.getProperty(key);</span><br><span class="line">        System.out.println(key+<span class="string">"="</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IO流&quot;&gt;&lt;a href=&quot;#IO流&quot; class=&quot;headerlink&quot; title=&quot;IO流&quot;&gt;&lt;/a&gt;IO流&lt;/h1&gt;&lt;p&gt;&lt;img alt data-src=&quot;https://yanghanblog.oss-cn-hangzhou.aliyuncs.co
      
    
    </summary>
    
      <category term="Java" scheme="https://cometorbityh.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://cometorbityh.github.io/tags/Java/"/>
    
      <category term="IO" scheme="https://cometorbityh.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>191013_JAVA_IO流(1)_File类</title>
    <link href="https://cometorbityh.github.io/2019/11/13/191013_JAVA_IO%E6%B5%81(1)_File%E7%B1%BB/"/>
    <id>https://cometorbityh.github.io/2019/11/13/191013_JAVA_IO流(1)_File类/</id>
    <published>2019-11-13T07:18:02.000Z</published>
    <updated>2019-11-17T09:11:10.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="1、基本描述"><a href="#1、基本描述" class="headerlink" title="1、基本描述"></a>1、基本描述</h2><p>操作对象：文件和文件夹</p><p>概述：<code>java.io.File</code> 类是文件和目录路径名的抽象表示形式，主要用于文件和目录的创建、查找和删除等操作。<br>    java把电脑中的文件和文件夹(目录)封装为了一个File类,我们可以使用File类对文件和文件夹进行操作<br>    我们可以使用File类的方法<br>        创建一个文件/文件夹<br>        删除文件/文件夹<br>        获取文件/文件夹<br>        判断文件/文件夹是否存在<br>        对文件夹进行遍历<br>        获取文件的大小<br>    File类是一个与系统无关的类,任何的操作系统都可以使用这个类中的方法</p><pre><code>重点:记住这三个单词    file:文件    directory:文件夹/目录    path:路径</code></pre><h2 id="2、-复习-路径的写法"><a href="#2、-复习-路径的写法" class="headerlink" title="2、[复习]路径的写法"></a>2、[复习]路径的写法</h2><h3 id="2-1、路径"><a href="#2-1、路径" class="headerlink" title="2.1、路径"></a>2.1、路径</h3><p>路径可以是以文件结尾,也可以是以文件夹结尾<br>路径可以是相对路径,也可以是绝对路径<br>路径可以是存在,也可以是不存在<br>创建File对象,只是把字符串路径封装为File对象,不考虑路径的真假情况</p><h3 id="2-2、路径的分类"><a href="#2-2、路径的分类" class="headerlink" title="2.2、路径的分类"></a>2.2、路径的分类</h3><ul><li>绝对路径:是一个完整的路径<pre><code>    以盘符(c:,D:)开始的路径        c:\\a.txt        C:\\Users\itcast\\IdeaProjects\\shungyuan\\123.txt        D:\\demo\\b.txt相对路径:是一个简化的路径    相对指的是相对于当前项目的根目录(C:\\Users\itcast\\IdeaProjects\\shungyuan)    如果使用当前项目的根目录,路径可以简化书写    C:\\Users\itcast\\IdeaProjects\\shungyuan\\123.txt--&gt;简化为: 123.txt(可以省略项目的根目录)注意:    1.路径是不区分大小写    2.路径中的文件名称分隔符windows使用反斜杠,反斜杠是转义字符,两个反斜杠代表一个普通的反斜杠</code></pre></li></ul><h2 id="3、静态成员变量及常用方法"><a href="#3、静态成员变量及常用方法" class="headerlink" title="3、静态成员变量及常用方法"></a>3、静态成员变量及常用方法</h2><h3 id="3-1、静态成员变量"><a href="#3-1、静态成员变量" class="headerlink" title="3.1、静态成员变量"></a>3.1、静态成员变量</h3><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>static String pathSeparator</td><td>路径分隔符（1个字符串）：Windows为分号，Linux为冒号</td></tr><tr><td>static char pathSeparatorChar</td><td>路径分隔符（字符）：与上述功能一致</td></tr><tr><td>static String separator</td><td>默认名称分隔符（1个字符串）：Windows为反斜杠，Linux为正斜杠</td></tr><tr><td>static char separatorChar</td><td>默认名称分隔符（字符）：与上述功能一致</td></tr></tbody></table><h3 id="3-2、构造方法"><a href="#3-2、构造方法" class="headerlink" title="3.2、构造方法"></a>3.2、构造方法</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>public File(String pathname）</td><td>通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的 File实例</td></tr><tr><td>public File(String parent, String child)</td><td>从<strong>父路径名字符串和子路径名字符串</strong>创建新的 File实例</td></tr><tr><td>public File(File parent, String child)</td><td>从<strong>父抽象路径名和子路径名字符串</strong>创建新的 File实例</td></tr></tbody></table><h3 id="3-3、常用方法"><a href="#3-3、常用方法" class="headerlink" title="3.3、常用方法"></a>3.3、常用方法</h3><h4 id="3-3-1、获取功能的方法"><a href="#3-3-1、获取功能的方法" class="headerlink" title="3.3.1、获取功能的方法"></a>3.3.1、获取功能的方法</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>public String getAbsolutePath()</code></td><td>返回此File的绝对路径名字符串</td></tr><tr><td><code>public String getPath()</code></td><td>将此File转换为路径名字符串</td></tr><tr><td><code>public String getName()</code></td><td>返回由此File表示的文件或目录的名称</td></tr><tr><td><code>public long length()</code></td><td>返回由此File表示的文件的长度（单位：字节）</td></tr></tbody></table><h4 id="3-3-2、判断功能的方法"><a href="#3-3-2、判断功能的方法" class="headerlink" title="3.3.2、判断功能的方法"></a>3.3.2、判断功能的方法</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>public boolean exists()</code></td><td>此File表示的文件或目录是否实际存在</td></tr><tr><td><code>public boolean isDirectory()</code></td><td>判断构造方法中给定的路径是否以文件夹结尾</td></tr><tr><td><code>public boolean isFile()</code></td><td>判断构造方法中给定的路径是否以文件结尾</td></tr></tbody></table><p>注意：isDirectory()和isFile()的使用前提：路径存在，否则都会返回false</p><p>硬盘中只有文件夹和文件，因此 isDirectory()和isFile() 是互斥的</p><h4 id="3-3-3、创建-删除功能的方法"><a href="#3-3-3、创建-删除功能的方法" class="headerlink" title="3.3.3、创建 + 删除功能的方法"></a>3.3.3、创建 + 删除功能的方法</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>public boolean mkdir()</code></td><td>true：文件夹不存在，创建单级空文件夹<br>false：文件夹已存在 / 构造方法路径不存在</td></tr><tr><td><code>public boolean mkdirs()</code></td><td>true：文件夹不存在，创建单级空文件夹 / 多级空文件夹 <br>false：文件夹已存在，或构造方法路径不存在</td></tr><tr><td><code>public boolean createNewFile</code></td><td>true：文件不存在，在file对象提供的路径<strong>创建一个空文件</strong>；false：文件存在；<br>file对象的路径必须存在，若不存在会抛出异常<code>IOException</code></td></tr><tr><td><code>public boolean delete()</code></td><td>删除FIle对象对应的文件夹/ 文件（直接删除硬盘的，不走回收站）<br>true：删除成功<br>false：删除失败 / 构造方法路径不存在</td></tr></tbody></table><h4 id="3-3-4、遍历目录功能的方法"><a href="#3-3-4、遍历目录功能的方法" class="headerlink" title="3.3.4、遍历目录功能的方法"></a>3.3.4、遍历目录功能的方法</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>public String[] list()</code></td><td>遍历File对象给出的<strong>目录</strong>中的所有文件和文件夹的<strong>名称</strong>，将其保存在String数组中</td></tr><tr><td><code>public List[] listFiles()</code></td><td>遍历File对象给出的<strong>目录</strong>中的所有文件和文件夹的<strong>全路径</strong>，将其保存在List数组中</td></tr><tr><td></td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.xs.LSInputList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//demo01();</span></span><br><span class="line">        <span class="comment">//demo02();</span></span><br><span class="line">        <span class="comment">//demo03();</span></span><br><span class="line">        <span class="comment">//demo04();</span></span><br><span class="line">        <span class="comment">//demo05();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*构造方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 文件路径名</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">"C:\\IO"</span>);</span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"C:\\IO\\demo1.txt"</span>);</span><br><span class="line">        System.out.println(f1);     <span class="comment">// C:\IO</span></span><br><span class="line">        System.out.println(f2);     <span class="comment">// C:\IO\demo1.txt</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过父路径和子路径字符串</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">"C:\\IO"</span>, <span class="string">"demo2.txt"</span>);</span><br><span class="line">        System.out.println(f3);     <span class="comment">// C:\IO\demo2.txt</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过父级File对象和子路径字符串</span></span><br><span class="line">        File f4 = <span class="keyword">new</span> File(f1, <span class="string">"demo3.txt"</span>);</span><br><span class="line">        System.out.println(f4);     <span class="comment">// C:\IO\demo3.tx</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取功能的方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo02</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\Administrator.RG4-44\\Desktop\\demo01\\demo01.iml"</span>);</span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"demo01.iml"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取file对象的绝对路径字符串（相对/绝对都转为绝对）</span></span><br><span class="line">        System.out.println(f1.getAbsolutePath());   <span class="comment">//C:\Users\Administrator.RG4-44\Desktop\demo01\demo01.iml</span></span><br><span class="line">        System.out.println(f2.getAbsolutePath());   <span class="comment">//C:\Users\Administrator.RG4-44\Desktop\demo01\demo01.iml</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取file对象的路径字符串（路径保持原样）</span></span><br><span class="line">        System.out.println(f1.getPath());   <span class="comment">//C:\Users\Administrator.RG4-44\Desktop\demo01\demo01.iml</span></span><br><span class="line">        System.out.println(f2.getPath());   <span class="comment">//demo01.iml</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//File类的toString() == getPath()</span></span><br><span class="line">        System.out.println(f1.toString());  <span class="comment">//C:\Users\Administrator.RG4-44\Desktop\demo01\demo01.iml</span></span><br><span class="line">        System.out.println(f2.toString());  <span class="comment">//demo01.iml</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取File对象的路径的结尾部分</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\Administrator.RG4-44\\Desktop\\demo01"</span>);</span><br><span class="line">        System.out.println(f1.getName());   <span class="comment">//demo01.iml</span></span><br><span class="line">        System.out.println(f3.getName());   <span class="comment">//demo01</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取FIle对象指向的文件大小（单位字节，注意文件夹没有大小）</span></span><br><span class="line">        System.out.println(f1.length());    <span class="comment">//939</span></span><br><span class="line">        System.out.println(f3.length());    <span class="comment">//4096</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 判断功能的方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">"F:\\IO"</span>);</span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"F:\\IO\\aaa.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(f1.exists())&#123;</span><br><span class="line">            System.out.println(f1.isFile());        <span class="comment">//false</span></span><br><span class="line">            System.out.println(f1.isDirectory());   <span class="comment">//true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若不存在，则没必要获取</span></span><br><span class="line">        <span class="keyword">if</span> (f2.exists())&#123;</span><br><span class="line">            System.out.println(f2.isFile());        <span class="comment">//true</span></span><br><span class="line">            System.out.println(f2.isDirectory());   <span class="comment">//false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建 + 删除 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo04</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建单级文件夹</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">"F:\\IO\\test01"</span>);       <span class="comment">//文件夹名为 “test01.txt”</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"F:\\IO\\test02.txt"</span>);   <span class="comment">//文件夹名为 "test02"</span></span><br><span class="line">        System.out.println(f1.mkdir());     <span class="comment">//true</span></span><br><span class="line">        System.out.println(f2.mkdir());     <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建单级/多级文件夹</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">"F:\\IO\\aaa"</span>);</span><br><span class="line">        File f4 = <span class="keyword">new</span> File(<span class="string">"F:\\IO\\bbb\\ccc.txt"</span>);</span><br><span class="line">        System.out.println(f3.mkdirs());    <span class="comment">//true</span></span><br><span class="line">        System.out.println(f4.mkdirs());    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文件</span></span><br><span class="line">        File f5 = <span class="keyword">new</span> File(<span class="string">"F:\\IO\\file01.txt"</span>);    <span class="comment">//文件名为 "file01.txt"</span></span><br><span class="line">        File f6 = <span class="keyword">new</span> File(<span class="string">"F:\\IO\\file02"</span>);        <span class="comment">//文件名为 "file02"</span></span><br><span class="line">        System.out.println(f5.createNewFile());    <span class="comment">//true</span></span><br><span class="line">        System.out.println(f6.createNewFile());    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除文件/文件夹</span></span><br><span class="line">        File f7 = <span class="keyword">new</span> File(<span class="string">"F:\\IO\\aaa"</span>);</span><br><span class="line">        File f8 = <span class="keyword">new</span> File(<span class="string">"F:\\IO\\aaa.txt"</span>);</span><br><span class="line">        System.out.println(f7.delete());</span><br><span class="line">        System.out.println(f8.delete());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历目录功能的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo05</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//遍历目录的文件和文件夹（包括隐藏文件/文件夹）</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">"F:\\IO"</span>);</span><br><span class="line">        String[] list = f1.list();</span><br><span class="line">        <span class="keyword">for</span> (String fileName: list)&#123;</span><br><span class="line">            System.out.println(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            bbb</span></span><br><span class="line"><span class="comment">            file01.txt</span></span><br><span class="line"><span class="comment">            file02</span></span><br><span class="line"><span class="comment">            test01</span></span><br><span class="line"><span class="comment">            test02.txt</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"F:\\IO"</span>);</span><br><span class="line">        File[] files = f2.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file:files)&#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            F:\IO\bbb</span></span><br><span class="line"><span class="comment">            F:\IO\file01.txt</span></span><br><span class="line"><span class="comment">            F:\IO\file02</span></span><br><span class="line"><span class="comment">            F:\IO\test01</span></span><br><span class="line"><span class="comment">            F:\IO\test02.txt</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;File类&quot;&gt;&lt;a href=&quot;#File类&quot; class=&quot;headerlink&quot; title=&quot;File类&quot;&gt;&lt;/a&gt;File类&lt;/h1&gt;&lt;h2 id=&quot;1、基本描述&quot;&gt;&lt;a href=&quot;#1、基本描述&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
      <category term="Java" scheme="https://cometorbityh.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://cometorbityh.github.io/tags/Java/"/>
    
      <category term="IO" scheme="https://cometorbityh.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>191111——JavaWeb之Session+Cookie</title>
    <link href="https://cometorbityh.github.io/2019/11/11/191111%E2%80%94%E2%80%94JavaWeb%E4%B9%8BSession-Cookie/"/>
    <id>https://cometorbityh.github.io/2019/11/11/191111——JavaWeb之Session-Cookie/</id>
    <published>2019-11-11T12:43:17.000Z</published>
    <updated>2019-11-13T07:14:12.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191111214022.png" class="lozad"></p><ol><li>会话：一次会话中包含多次请求和响应。<ul><li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li></ul></li><li>功能：在一次会话的范围内的多次请求间，共享数据</li><li>方式：<ol><li>客户端会话技术：Cookie</li><li>服务器端会话技术：Session</li></ol></li></ol><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>概念</p><ul><li>Cookie本意“小饼干”，是客户端会话技术，将数据保存在客户端。</li></ul><p>实现原理</p><ul><li>基于响应头set-cookie和请求头cookie实现</li></ul><p>Cookie的执行步骤：</p><table><thead><tr><th>步骤</th><th>方法</th></tr></thead><tbody><tr><td>1. 创建Cookie对象</td><td>Cookie cookie = new Cookie(String name, String value)</td></tr><tr><td>2. 发送Cookie</td><td>response.addCookie(Cookie cookie);</td></tr><tr><td>3. 获取Cookie,而后遍历Cookie</td><td>Cookie[] cookies = request.getCookies();</td></tr></tbody></table><p>分别访问2个Servlet，Servlet发送Cookie，Servlet2获取Cookie并遍历，前提是浏览器不能关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/cookieDemo01"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建Cookie对象</span></span><br><span class="line">        Cookie cookie1 = <span class="keyword">new</span> Cookie(<span class="string">"msg"</span>, <span class="string">"success"</span>);</span><br><span class="line">        Cookie cookie2 = <span class="keyword">new</span> Cookie(<span class="string">"code"</span>, <span class="string">"404"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.发送Cookie</span></span><br><span class="line">        response.addCookie(cookie1);</span><br><span class="line">        response.addCookie(cookie2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.young.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/cookieDemo02"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieDemo02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//3.获取Cookie</span></span><br><span class="line"></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie:cookies)&#123;</span><br><span class="line">            String name = cookie.getName();</span><br><span class="line">            String value = cookie.getValue();</span><br><span class="line">            System.out.println(name + <span class="string">"---"</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------控制台----------------</span><br><span class="line">msg---success</span><br><span class="line">code---<span class="number">404</span></span><br><span class="line">device---<span class="number">11</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191112131129.png" class="lozad"></p><p>有关Cookie的问题</p><blockquote><p> <strong>一次可不可以发送多个cookie?</strong></p><ul><li>可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。</li></ul><p><strong>cookie在浏览器中保存多长时间？</strong></p><p>​    默认情况下，当浏览器关闭后，Cookie数据被销毁</p><p>​    实现持久化存储：在发送Cookie前加入方法<code>setMaxAge(int seconds)</code>即可。second的取值为：</p><ul><li><p>正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效</p></li><li><p>负数：默认值</p></li><li><p>零：删除cookie信息 </p><p><strong>cookie能不能存中文？</strong></p></li></ul><p>​    在tomcat 8 之前 cookie中不能直接存储中文数据。需要将中文数据转码—一般采用URL编码(%E3)</p><p>​    在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</p><p><strong>cookie共享问题</strong></p><p>同Tomcat服务器的多个web项目：</p><ul><li><p>默认情况下cookie不能共享</p></li><li><p>setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录。如果要共享，则可以将path设置为<strong>“/“</strong></p></li></ul><p>不同Tomcat服务器的多个web项目：</p><ul><li>setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享</li><li>setDomain(“.baidu.com”),那么tieba.baidu.com和news.baidu.com中cookie可以共享</li></ul></blockquote><p>Cookie的特点和作用<br>     1. cookie存储数据在客户端浏览器，因此<strong>不安全</strong><br>     2. 浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)</p><pre><code>* 作用：    1. cookie一般用于存出少量的不太敏感的数据    2. 在不登录的情况下，完成服务器对客户端的身份识别</code></pre><h2 id="JSP：入门学习"><a href="#JSP：入门学习" class="headerlink" title="JSP：入门学习"></a>JSP：入门学习</h2><pre><code>1. 概念：    * Java Server Pages： java服务器端页面        * 可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码        * 用于简化书写！！！2. 原理    * JSP本质上就是一个Servlet3. JSP的脚本：JSP定义Java代码的方式    1. &lt;%  代码 %&gt;：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。    2. &lt;%! 代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。    3. &lt;%= 代码 %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。4. JSP的内置对象：    * 在jsp页面中不需要获取和创建，可以直接使用的对象    * jsp一共有9个内置对象。    * 今天学习3个：        * request        * response        * out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似            * response.getWriter()和out.write()的区别：                * 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。                * response.getWriter()数据输出永远在out.write()之前5. 案例:改造Cookie案例</code></pre><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><ol><li><p>概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</p></li><li><p>快速入门：</p><ol><li>获取HttpSession对象：<br> HttpSession session = request.getSession();</li><li>使用HttpSession对象：<br> 获取数据：Object getAttribute(String name)<br> 存储数据：void setAttribute(String name, Object value)<br> 移除数据：void removeAttribute(String name)  </li></ol></li><li><p>原理</p><ul><li><p><strong>Session的实现是依赖于Cookie的。</strong></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191113144224.png" class="lozad"></p></li></ul></li><li><p>细节：</p><ol><li><p>当客户端关闭后，服务器不关闭，两次获取session是否为同一个？</p><ul><li><p>默认情况下。不是。</p></li><li><p>如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。<br> Cookie c = new Cookie(“JSESSIONID”,session.getId());<br>   c.setMaxAge(60*60);<br> response.addCookie(c);</p></li><li><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191113150745.png" class="lozad"></p></li></ul></li></ol></li></ol><ol start="2"><li><p>客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</p><ul><li>不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作<ul><li>session的钝化（序列化）：<ul><li>在服务器正常关闭之前，将session对象序列化到硬盘上</li></ul></li><li>session的活化（反序列化）：<ul><li>在服务器启动后，将session文件转化为内存中的session对象即可。</li></ul></li></ul></li></ul></li><li><p>session什么时候被销毁？</p><ol><li>服务器关闭</li><li>session对象调用invalidate() 。</li><li>session默认失效时间 30分钟<br> 选择性配置修改<br> `<session-config><pre><code>&lt;session-timeout&gt;30&lt;/session-timeout&gt;</code></pre></session-config>`</li></ol><ol start="5"><li>session的特点</li><li>session用于存储一次会话的多次请求的数据，存在服务器端</li><li>session可以存储任意类型，任意大小的数据</li></ol><ul><li>session与Cookie的区别：<ol><li>session存储数据在服务器端，Cookie在客户端</li><li>session没有数据大小限制，Cookie有</li></ol></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;会话技术&quot;&gt;&lt;a href=&quot;#会话技术&quot; class=&quot;headerlink&quot; title=&quot;会话技术&quot;&gt;&lt;/a&gt;会话技术&lt;/h1&gt;&lt;p&gt;&lt;img alt data-src=&quot;https://yanghanblog.oss-cn-hangzhou.aliyunc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>191107——JavaWeb之Response</title>
    <link href="https://cometorbityh.github.io/2019/11/11/191107%E2%80%94%E2%80%94Javaweb%E4%B9%8BResponse/"/>
    <id>https://cometorbityh.github.io/2019/11/11/191107——Javaweb之Response/</id>
    <published>2019-11-11T07:00:21.000Z</published>
    <updated>2019-11-15T15:20:38.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Http（二）"><a href="#Http（二）" class="headerlink" title="Http（二）"></a>Http（二）</h1><p>响应消息：服务器端发送给客户端的数据</p><h2 id="响应字符串格式"><a href="#响应字符串格式" class="headerlink" title="响应字符串格式"></a>响应字符串格式</h2><blockquote><p>​        HTTP/1.1 200 OK<br>​        Content-Type: text/html;charset=UTF-8<br>​        Content-Length: 101<br>​        Date: Wed, 06 Jun 2018 07:08:42 GMT</p><pre><code>&lt;html&gt;  &lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  hello , response  &lt;/body&gt;&lt;/html&gt;</code></pre></blockquote><h2 id="响应消息的数据格式"><a href="#响应消息的数据格式" class="headerlink" title="响应消息的数据格式"></a>响应消息的数据格式</h2><h3 id="（1）响应行"><a href="#（1）响应行" class="headerlink" title="（1）响应行"></a>（1）响应行</h3><p>​    组成：协议/版本    响应状态码    状态码描述</p><ul><li><p>响应状态码：服务器告知客户端浏览器本次请求和响应的一个状态（3位数字）</p><table><thead><tr><th>分类</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>1xx</td><td>服务器接收客户端消息，但没有接收完成，<br> 等待一段时间后，发送1xx多状态码</td><td></td></tr><tr><td>2xx</td><td>成功</td><td>200：响应成功</td></tr><tr><td>3xx</td><td>重定向</td><td>302 重定向； <br>304 本地缓存（客户端本地已有，访问缓存即可）</td></tr><tr><td>4xx</td><td>客户端错误</td><td>404：请求路径没有对应资源 <br>405：请求方式没有对应的doxxx方法</td></tr><tr><td>5xx</td><td>服务器端错误</td><td>500：服务器内部出现异常</td></tr></tbody></table></li></ul><h3 id="（2）响应头"><a href="#（2）响应头" class="headerlink" title="（2）响应头"></a>（2）响应头</h3><p>​        格式：头名称：值</p><table><thead><tr><th>常见的响应头</th><th>描述</th></tr></thead><tbody><tr><td>Content-Type</td><td>服务器告知客户端本次响应体的数据格式 + 编码格式</td></tr><tr><td>Content-Length</td><td>响应体长度</td></tr><tr><td>Content-Disposition</td><td>服务器告知客户端以何种格式打开响应体数据<br>* in-line：默认值，在当前页面内打开<br>* attachment；filename=xxx：以附件形式打开响应体。如文件下载</td></tr></tbody></table><h3 id="（3）响应空行"><a href="#（3）响应空行" class="headerlink" title="（3）响应空行"></a>（3）响应空行</h3><h3 id="（4）响应体"><a href="#（4）响应体" class="headerlink" title="（4）响应体"></a>（4）响应体</h3><p>​        响应体包含的是：真实传输的数据</p><h1 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h1><h2 id="功能1：设置响应消息"><a href="#功能1：设置响应消息" class="headerlink" title="功能1：设置响应消息"></a>功能1：设置响应消息</h2><h3 id="（1）设置响应行"><a href="#（1）设置响应行" class="headerlink" title="（1）设置响应行"></a>（1）设置响应行</h3><table><thead><tr><th>作用</th><th>方法</th></tr></thead><tbody><tr><td>设置响应状态码</td><td>setStatus(int sc)</td></tr></tbody></table><h3 id="（2）设置响应头"><a href="#（2）设置响应头" class="headerlink" title="（2）设置响应头"></a>（2）设置响应头</h3><table><thead><tr><th>作用</th><th>方法</th></tr></thead><tbody><tr><td>设置/修改响应体</td><td>setHeader(String name,String value)</td></tr></tbody></table><h3 id="（3）设置响应体"><a href="#（3）设置响应体" class="headerlink" title="（3）设置响应体"></a>（3）设置响应体</h3><p>​    步骤：</p><ul><li><p>获取输出流</p><table><thead><tr><th>类型</th><th>方法</th></tr></thead><tbody><tr><td>字符输出流</td><td>PrintWriter getWriter()</td></tr><tr><td>字节输出流</td><td>ServletOutputStream getOutputStream()</td></tr></tbody></table></li><li><p>使用输出流，将数据输出到客户端浏览器</p></li></ul><h2 id="功能2：重定向"><a href="#功能2：重定向" class="headerlink" title="功能2：重定向"></a>功能2：重定向</h2><p>重定向：资源跳转的方式</p><h3 id="（1）方法"><a href="#（1）方法" class="headerlink" title="（1）方法"></a>（1）方法</h3><table><thead><tr><th>步骤</th><th>方法</th></tr></thead><tbody><tr><td>1.设置状态码为302</td><td>response.setStatus(302);</td></tr><tr><td>2.设置响应头location，其值为重定向的路径</td><td>response.setHeader(“location”,”/demo/responseDemo2”);</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">--- FirstServlet----------------------------------------</span><br><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/firstServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is firstServlet..."</span>);</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        response.setStatus(<span class="number">302</span>);</span><br><span class="line">        response.setHeader(<span class="string">"location"</span>,<span class="string">"/demo01/secondServlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- SecondServlet----------------------------------------</span><br><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/secondServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is secondServlet..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191111155151.png" class="lozad"></p><p>这2个方法中，302和location都是固定值，只有重定向的路径是变量，每次写起来有点麻烦，因此Response类提供了一个方法，用来简化书写。</p><table><thead><tr><th>作用</th><th>方法</th></tr></thead><tbody><tr><td>重定向</td><td>sendRedirect(String path)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"/demo01/secondServlet"</span>);</span><br></pre></td></tr></table></figure><h3 id="（2）特点"><a href="#（2）特点" class="headerlink" title="（2）特点"></a>（2）特点</h3><ul><li><p>地址栏路径改变，路径为重定向后的url</p></li><li><p>重定向可以访问服务器外部的资源  </p><p><code>response.sendRedirect(&quot;http://www.baidu.com&quot;);</code></p></li><li><p>重定向是2次请求（因此不能使用request域来共享数据）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191111160153.png" class="lozad"></p></li></ul><h3 id="（3）重定向与请求转发"><a href="#（3）重定向与请求转发" class="headerlink" title="（3）重定向与请求转发"></a>（3）重定向与请求转发</h3><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191111163824.png" class="lozad"></p><h3 id="（1）输出字符数据"><a href="#（1）输出字符数据" class="headerlink" title="（1）输出字符数据"></a>（1）输出字符数据</h3><p>服务器获取字符输出流输出到浏览器页面，</p><p>步骤：1. 获取字符输出流        2. 输出数据</p><p>注意：输出到浏览器时，可能会产生中文乱码，只要是因为服务器和浏览器的编码不一致导致的，</p><p>因此在获取输出流之前需要：①设置该流的默认编码 ② 告知浏览器响应体使用的编码。</p><p>使用<code>response.setContentType(&quot;text/html;charset=utf-8&quot;);</code>方法可解决中文乱码问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/responseServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.设置编码，防止浏览器乱码</span></span><br><span class="line">        <span class="comment">//设置流的默认编码</span></span><br><span class="line">        <span class="comment">//response.setCharacterEncoding("utf-8");</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式1</span></span><br><span class="line">        <span class="comment">//告知浏览器，服务器发送的消息体数据的编码，建议浏览器使用该编码解码（其中也设置了流编码）</span></span><br><span class="line">        <span class="comment">//response.setHeader("content-type","text/html;charset=utf-8");</span></span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取字符输出流对象，获取的流的默认编码是ISO-8859-1</span></span><br><span class="line">        PrintWriter pw = response.getWriter();</span><br><span class="line">        <span class="comment">//3.输出数据</span></span><br><span class="line">        pw.write(<span class="string">"你好，response"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191111162208.png" class="lozad"></p><h3 id="（2）输出字节数据"><a href="#（2）输出字节数据" class="headerlink" title="（2）输出字节数据"></a>（2）输出字节数据</h3><p>服务器获取字节输出流输出到浏览器页面。</p><p>步骤：1. 获取字节输出流        2. 输出数据</p><p>中文乱码的解决方法与输出字符数据一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/responseServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.设置编码，防止浏览器乱码</span></span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//2.获取字节输出流对象</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">        <span class="comment">//3.输出数据</span></span><br><span class="line">        sos.write(<span class="string">"你好，response"</span>.getBytes(<span class="string">"utf-8"</span>));    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Http（二）&quot;&gt;&lt;a href=&quot;#Http（二）&quot; class=&quot;headerlink&quot; title=&quot;Http（二）&quot;&gt;&lt;/a&gt;Http（二）&lt;/h1&gt;&lt;p&gt;响应消息：服务器端发送给客户端的数据&lt;/p&gt;
&lt;h2 id=&quot;响应字符串格式&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>191107——JavaWeb之Request</title>
    <link href="https://cometorbityh.github.io/2019/11/07/191107%E2%80%94%E2%80%94Javaweb%E4%B9%8BRequest/"/>
    <id>https://cometorbityh.github.io/2019/11/07/191107——Javaweb之Request/</id>
    <published>2019-11-07T07:00:13.000Z</published>
    <updated>2019-11-15T15:22:31.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Http（一）"><a href="#Http（一）" class="headerlink" title="Http（一）"></a>Http（一）</h1><p>Hyper Text Transfer Protocol超文本传输协议</p><p>传输协议：数据的传输协议/规则，定义了客户端和服务端通信时，发送数据的格式（请求消息和响应消息的格式）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191110094840.png" class="lozad"></p><p>特点</p><ul><li>基于TCP／IP的高级协议（TCP是安全的协议，因此Http也是安全的协议）</li><li>默认端口号：80</li><li>基于请求/响应模型：一次请求对应一次响应，请求和响应一一对应。</li><li>无状态的协议：请求之间相互独立，不能交互数据</li></ul><p>历史版本</p><ul><li>1.0：每次请求都会建立一个新的连接。比如访问百度时，需要 获取到很多css和图片，每次请求到一张图片后都会断开连接，这样出现的结果就是耗时且耗费连接资源</li><li>1.1：复用上次请求的连接。每次请求到一张图片后会等待一段时间，若这段时间内还有数据要发送，就默认使用刚才那个连接，知道最后一个请求之后等待一段时间，发现没有数据需要发送了，即断开连接。</li></ul><h2 id="请求消息的数据格式"><a href="#请求消息的数据格式" class="headerlink" title="请求消息的数据格式"></a>请求消息的数据格式</h2><p>请求行</p><ul><li><p>请求方式  请求url  请求协议/版本</p></li><li><p>请求方式：Http协议有7种请求方式，常用的有get和post</p></li><li><table><thead><tr><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>请求参数在请求行的url后</td><td>请求参数在请求体中</td></tr><tr><td>请求的url长度有限制，</td><td>请求的url长度无限制</td></tr><tr><td>不太安全</td><td>相对安全</td></tr></tbody></table></li></ul><p>请求头（键值对的格式）</p><ul><li><p>请求头名称：请求头值</p><table><thead><tr><th>常见请求头</th><th>解释</th><th>作用</th></tr></thead><tbody><tr><td><strong><font color="red">User-Agent</font></strong></td><td>浏览器告知服务器，其使用的浏览器版本信息</td><td>在服务器端获取该头的信息，解决浏览器兼容问题<br>（不同浏览器解析数据方法不一样，<br>     使得用户用不同的浏览器访问同一个资源看到相同的界面）</td></tr><tr><td>Accept</td><td>告知服务器，其可解析可接收的文件格式</td><td></td></tr><tr><td>Accept-Language</td><td>支持的语言环境</td><td></td></tr><tr><td>Accept-Encoding</td><td>支持的压缩格式</td><td></td></tr><tr><td><strong><font color="red">Referer</font></strong></td><td>告知服务器，当前请求的来源</td><td>防盗链<br>做统计工作</td></tr><tr><td>Connection</td><td>连接：keep-alive，保持活着，表示的是该连接可被复用</td><td></td></tr><tr><td>Upgrade-insecure</td><td>升级信息</td><td></td></tr></tbody></table><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191110103246.png" class="lozad"></p></li></ul><p>请求空行</p><ul><li>分隔POST的请求头和请求体</li></ul><p>请求体（只有Post有请求体，Get没有）</p><ul><li>封装POST请求消息的请求参数</li></ul><h1 id="Request请求"><a href="#Request请求" class="headerlink" title="Request请求"></a>Request请求</h1><p>回忆之前创建Servlet类时，service方法中有2个参数，ServletRequest req和ServletResponse res，这2个参数分别封装了请求信息和响应消息。</p><h2 id="1-request对象和response对象的原理"><a href="#1-request对象和response对象的原理" class="headerlink" title="1. request对象和response对象的原理"></a>1. request对象和response对象的原理</h2><p>request和response对象是由服务器创建的，而我们的任务就是使用它们；</p><p>request对象是来获取请求信息的，response对象是来设置响应消息的</p><h2 id="2-request对象的继承体系结构"><a href="#2-request对象的继承体系结构" class="headerlink" title="2. request对象的继承体系结构"></a>2. request对象的继承体系结构</h2><p><code>ServletRequest</code>接口，<code>HttpServletRequest</code>接口继承自<code>ServletRequest</code>接口，而<code>org.apache.catalina.connector.RequestFacade</code>类继承<code>HttpServletRequest</code>接口，这个类是<code>tomcat</code>定义的，<code>tomcat</code>创建这个<code>request</code>对象，并传递给<code>service</code>方法</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191110164523.png" class="lozad"></p><h2 id="3-request对象的功能"><a href="#3-request对象的功能" class="headerlink" title="3. request对象的功能"></a>3. request对象的功能</h2><h3 id="3-1-获取请求消息数据（-3）"><a href="#3-1-获取请求消息数据（-3）" class="headerlink" title="3.1. 获取请求消息数据（*3）"></a>3.1. 获取请求消息数据（*3）</h3><h4 id="（1）获取请求行数据"><a href="#（1）获取请求行数据" class="headerlink" title="（1）获取请求行数据"></a>（1）获取请求行数据</h4><p><code>GET /ProjectName/demo1?name=zhangsan HTTP/1.1</code></p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>String  getMethod()</td><td>获取请求方式 ：GET</td></tr><tr><td><font color="red"><strong>String getContextPath()</strong></font></td><td>获取虚拟目录：/ProjectName</td></tr><tr><td>String getServletPath()</td><td>获取Servlet路径: /demo1</td></tr><tr><td>String getQueryString()</td><td>获取get方式请求参数：name=zhangsan</td></tr><tr><td><font color="red"><strong>String getRequestURI()</strong></font></td><td>获取请求URI：/ProjectName/demo1</td></tr><tr><td>StringBuffer getRequestURL()</td><td>获取请求URL：<a href="http://localhost/ProjectName/demo1" target="_blank" rel="noopener">http://localhost/ProjectName/demo1</a></td></tr><tr><td>String getRemoteAddr()</td><td>获取客户机的IP地址：</td></tr><tr><td>String getProtocol()</td><td>获取协议及版本：HTTP/1.1</td></tr></tbody></table><p>URI ：统一资源标识符 ： /ProjectName/demo1——共和国</p><p>URL：统一资源定位符 ：<a href="http://localhost/ProjectName/demo1——中华人民共和国" target="_blank" rel="noopener">http://localhost/ProjectName/demo1——中华人民共和国</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/requestDemo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"获取请求方式method："</span>+request.getMethod());</span><br><span class="line">        System.out.println(<span class="string">"获取虚拟目录："</span>+request.getContextPath());</span><br><span class="line">        System.out.println(<span class="string">"获取Servlet路径："</span>+request.getServletPath());</span><br><span class="line">        System.out.println(<span class="string">"获取get方式的请求参数："</span>+request.getQueryString());</span><br><span class="line">        System.out.println(<span class="string">"获取请求的URI："</span>+request.getRequestURI());</span><br><span class="line">        System.out.println(<span class="string">"获取请求的URL："</span>+request.getRequestURL());</span><br><span class="line">        System.out.println(<span class="string">"获取客户机IP地址："</span>+request.getRemoteAddr());</span><br><span class="line">        System.out.println(<span class="string">"获取客户机协议及版本："</span>+request.getProtocol());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）获取请求头数据"><a href="#（2）获取请求头数据" class="headerlink" title="（2）获取请求头数据"></a>（2）获取请求头数据</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><font color="red"><strong>String getHeader(String name)</strong></font></td><td>通过请求头的名称获取请求头的值</td></tr><tr><td>Enumeration<string> getHeaderNames()</string></td><td>获取所有的请求头名称；注意该枚举类型实际是<strong>迭代器</strong></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/requestDemo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有请求头的名称</span></span><br><span class="line">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">        <span class="comment">//根据名称获取对应请求头的值</span></span><br><span class="line">        <span class="keyword">while</span>(headerNames.hasMoreElements())&#123;</span><br><span class="line">            String name = headerNames.nextElement();</span><br><span class="line">            String value = request.getHeader(name);</span><br><span class="line">            System.out.println(name + <span class="string">"---"</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- 控制台数据----------------------------------------</span><br><span class="line"></span><br><span class="line">host---localhost:<span class="number">8080</span></span><br><span class="line">connection---keep-alive</span><br><span class="line">cache-control---max-age=<span class="number">0</span></span><br><span class="line">upgrade-insecure-requests---<span class="number">1</span></span><br><span class="line">user-agent---Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">75.0</span>.3770.142 Safari/<span class="number">537.36</span></span><br><span class="line">accept---text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3</span></span><br><span class="line"><span class="comment">accept-encoding---gzip, deflate, br</span></span><br><span class="line"><span class="comment">accept-language---zh-CN,zh;q=0.9,en;q=0.8</span></span><br><span class="line"><span class="comment">cookie---JSESSIONID=B2F7464DCB3037A05D6AF248ED2F938E; device=11</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/requestDemo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取请求头数据：user-agent</span></span><br><span class="line">        String agent = request.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line">        System.out.println(agent);</span><br><span class="line">        <span class="comment">//根据agent判断浏览器版本</span></span><br><span class="line">        <span class="keyword">if</span>(agent.contains(<span class="string">"Chrome"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"It is Chrome"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(agent.contains(<span class="string">"firefox"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"It is FireFox"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- 控制台数据----------------------------------------</span><br><span class="line"></span><br><span class="line">Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">75.0</span>.3770.142 Safari/<span class="number">537.36</span></span><br><span class="line">It is Chrome</span><br></pre></td></tr></table></figure><h4 id="（3）获取请求体数据"><a href="#（3）获取请求体数据" class="headerlink" title="（3）获取请求体数据"></a>（3）获取请求体数据</h4><p>请求体中封装了POST请求的请求参数，只有POST方式有请求体；</p><p>request对象将请求体封装成<strong>流</strong>，因此需要用获取流的方式来获取请求体的内容</p><p><strong>获取步骤：</strong></p><ul><li>获取流对象<ul><li><code>BufferedReader getReader()</code>：获取字符输入流，只能操作字符数据</li><li><code>ServletInputStream getInputStream()</code>：获取字节输入流，可以操作所有类型数据（文件，图片等）</li></ul></li><li>从流对象中获取数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">--- index.jsp----------------------------------------</span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action=<span class="string">"/demo01/requestDemo"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"输入用户名"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"输入密码"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"注册"</span>&gt;&lt;br&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- RequestDemo.java----------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/requestDemo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求消息的请求体</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.读取字符流</span></span><br><span class="line">        BufferedReader br = request.getReader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读取数据</span></span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- 控制台数据----------------------------------------</span><br><span class="line">username=zhangsan&amp;password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191110202427.png" class="lozad"></p><h3 id="3-2-其他功能"><a href="#3-2-其他功能" class="headerlink" title="3.2. 其他功能"></a>3.2. 其他功能</h3><h4 id="（1）获取请求参数通用方式（GET、POST均可）"><a href="#（1）获取请求参数通用方式（GET、POST均可）" class="headerlink" title="（1）获取请求参数通用方式（GET、POST均可）"></a>（1）获取请求参数通用方式（GET、POST均可）</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong><font color="red">String  getParameter(String name)</font></strong></td><td>通过参数名获取参数值</td></tr><tr><td>String  getParameterValues(String name)</td><td>根据参数名获取参数值的数组（复选框）</td></tr><tr><td>Enumeration&lt;String.&gt;   getParameterNames()</td><td>获取所有请求的参数名称</td></tr><tr><td>Map&lt;String,String[]&gt;  getParameterMap()</td><td>获取所有参数的map集合</td></tr></tbody></table><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/demo01/requestDemo"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"输入用户名"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"输入密码"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"game"</span>&gt;游戏</span><br><span class="line">      &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"study"</span>&gt;学习</span><br><span class="line">      &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"sing"</span>&gt;唱歌&lt;br&gt;</span><br><span class="line">      &lt;input type=<span class="string">"submit"</span> value=<span class="string">"注册"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.client.sei.ValueSetter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.ValidationEvent;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/requestDemo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        System.out.println(<span class="string">"getParameter ---&gt; "</span>+ <span class="string">"username:"</span> + username + <span class="string">","</span> + <span class="string">"password:"</span> + password);</span><br><span class="line">        <span class="comment">/*-------------------------------*/</span></span><br><span class="line">        String[] hobbies = request.getParameterValues(<span class="string">"hobby"</span>);</span><br><span class="line">        System.out.print(<span class="string">"getParameterValues ---&gt; "</span> + <span class="string">"hobby:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String hobby:hobbies)&#123;</span><br><span class="line">            System.out.print(hobby + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">/*-------------------------------*/</span></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = request.getParameterNames();</span><br><span class="line">        System.out.print(<span class="string">"getParameterNames ---&gt; "</span>);</span><br><span class="line">        <span class="keyword">while</span> (parameterNames.hasMoreElements())&#123;</span><br><span class="line">            String name = parameterNames.nextElement();</span><br><span class="line">            String value = request.getParameter(name);</span><br><span class="line">            System.out.print(name + <span class="string">":"</span> + value + <span class="string">"  "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">/*-------------------------------*/</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        System.out.println(<span class="string">"getParameterMap ---&gt;"</span>);</span><br><span class="line">        <span class="comment">//遍历Map的Key</span></span><br><span class="line">        Set&lt;String&gt; keyset = parameterMap.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String name : keyset)&#123;</span><br><span class="line">            System.out.print(name + <span class="string">":"</span>);</span><br><span class="line">            <span class="comment">//获取key对应的value数组</span></span><br><span class="line">            String[] values = parameterMap.get(name);</span><br><span class="line">            <span class="keyword">for</span> (String value : values)&#123;</span><br><span class="line">                System.out.print(value + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191111135924.png" class="lozad"></p><h4 id="（2）获取请求参数中文乱码解决"><a href="#（2）获取请求参数中文乱码解决" class="headerlink" title="（2）获取请求参数中文乱码解决"></a>（2）获取请求参数中文乱码解决</h4><ul><li><p>get方式：tomcat8 已经将中文乱码问题解决，不会出现中文乱码</p></li><li><p>post方式：未解决。</p><ul><li><p>解决方案：获取参数前，设置request的编码</p></li><li><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>request.setCharacterEncoding(“utf-8”);</td><td>设置request的编码为utf-8</td></tr></tbody></table></li></ul></li></ul><h4 id="（3）请求转发"><a href="#（3）请求转发" class="headerlink" title="（3）请求转发"></a>（3）请求转发</h4><p>一种在<strong>服务器内部</strong>的资源跳转的方式。因此不会改变地址栏url</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191111140815.png" class="lozad"></p><table><thead><tr><th align="center">步骤</th><th align="center">方法</th></tr></thead><tbody><tr><td align="center">通过request对象获取请求转发器对象</td><td align="center">request.getRequestDispatcher(String path)</td></tr><tr><td align="center">使用请求转发器对象来进行资源转发</td><td align="center">forward(ServletRequest request, ServletResponse response)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/secondServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is secondServlet..."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------</span><br><span class="line">    </span><br><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/firstServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is firstServlet..."</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/secondServlet"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191111142159.png" class="lozad"></p><blockquote><p>特点：</p><ul><li><p>浏览器地址不发生变化</p></li><li><p>只能转发到服务器内部的资源；如下代码无法转发到百度服务器</p></li></ul><p><code>request.getRequestDispatcher(&quot;http://www.baidu.com&quot;).forward(request,response);</code></p><ul><li>转发是一次请求，不是两次请求</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191111142820.png" class="lozad"></p></blockquote><h4 id="（4）共享数据"><a href="#（4）共享数据" class="headerlink" title="（4）共享数据"></a>（4）共享数据</h4><blockquote><p>域对象：一个有作用范围的对象，可以在范围内共享数据</p><p>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</p></blockquote><p><strong>request域的三个方法</strong></p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>void  setAttribute(String name,Object obj)</td><td>在request域中存储数据</td></tr><tr><td>Object  getAttribute(String name)</td><td>在request域中通过键获取值</td></tr><tr><td>void  removeAttribute(String name)</td><td>在request域中移除键所对应的键值对</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">---------------FirstServlet.java-----------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/firstServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is firstServlet..."</span>);</span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">"msg"</span>,<span class="string">"success!"</span>);</span><br><span class="line"></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/secondServlet"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------SecondServlet.java-----------------</span><br><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/secondServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        Object msg = request.getAttribute(<span class="string">"msg"</span>);</span><br><span class="line">        System.out.println(<span class="string">"msg --&gt;"</span> + msg);</span><br><span class="line">        System.out.println(<span class="string">"this is secondServlet..."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------控制台-----------------</span><br><span class="line"><span class="keyword">this</span> is firstServlet...</span><br><span class="line">msg --&gt;success!</span><br><span class="line"><span class="keyword">this</span> is secondServlet...</span><br></pre></td></tr></table></figure><h4 id="（5）获取ServletContext对象"><a href="#（5）获取ServletContext对象" class="headerlink" title="（5）获取ServletContext对象"></a>（5）获取ServletContext对象</h4><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>ServletContext getServletContext()</td><td>获取ServletContext对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">---------------RequestDemo.java-----------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.client.sei.ValueSetter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.ValidationEvent;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/requestDemo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        System.out.println(servletContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------控制台-----------------</span><br><span class="line">org.apache.catalina.core.ApplicationContextFacade@<span class="number">3060</span>c493</span><br></pre></td></tr></table></figure><h1 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h1><p>概念：代表整个web应用，可以和程序的容器(服务器)来通信</p><h2 id="1-获取方式（2种）"><a href="#1-获取方式（2种）" class="headerlink" title="1. 获取方式（2种）"></a>1. 获取方式（2种）</h2><table><thead><tr><th>获取方式</th><th>方法</th></tr></thead><tbody><tr><td>通过request对象获取</td><td>request.getServletContext()</td></tr><tr><td>通过HttpServlet获取</td><td>this.getServletContext()</td></tr></tbody></table><h2 id="2-ServletContext的功能"><a href="#2-ServletContext的功能" class="headerlink" title="2. ServletContext的功能"></a>2. ServletContext的功能</h2><h3 id="（1）获取MIME类型"><a href="#（1）获取MIME类型" class="headerlink" title="（1）获取MIME类型"></a>（1）获取MIME类型</h3><ul><li>MIME类型：在互联网通信过程中定义的一种<strong>文件数据类型</strong>的标准<ul><li>格式： 大类型/小类型  （例：text/html， image/jpeg）</li></ul></li><li>获取：<code>String getMimeType(String file)</code></li></ul><h3 id="（2）域对象：共享数据"><a href="#（2）域对象：共享数据" class="headerlink" title="（2）域对象：共享数据"></a>（2）域对象：共享数据</h3><p>ServletContext对象范围：共享所有用户所有请求的数据</p><ul><li>setAttribute(String name,Object value)</li><li>getAttribute(String name)</li><li>removeAttribute(String name)</li></ul><h3 id="（3）获取文件的真实-服务器-路径"><a href="#（3）获取文件的真实-服务器-路径" class="headerlink" title="（3）获取文件的真实(服务器)路径"></a>（3）获取文件的真实(服务器)路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/servletContextDemo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContextDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        ServletContext context1 = request.getServletContext();</span><br><span class="line">        ServletContext context2 = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        System.out.println(context1);</span><br><span class="line">        System.out.println(context2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取MIME类型</span></span><br><span class="line">        String mimeType = context2.getMimeType(<span class="string">"a.jpg"</span>);</span><br><span class="line">        System.out.println(mimeType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件真实路径</span></span><br><span class="line">        String test01 = context2.getRealPath(<span class="string">"/WEB-INF/classes/test01.txt"</span>);    <span class="comment">//src目录下访问资源</span></span><br><span class="line">        System.out.println(test01);</span><br><span class="line">        String test02 = context2.getRealPath(<span class="string">"/WEB-INF/test02.txt"</span>);    <span class="comment">//WEB-INF目录下访问资源</span></span><br><span class="line">        System.out.println(test02);</span><br><span class="line">        String test03 = context2.getRealPath(<span class="string">"/test03.txt"</span>);    <span class="comment">//web目录下访问资源</span></span><br><span class="line">        System.out.println(test03);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------- 控制台输出结果 ----------------------</span><br><span class="line">org.apache.catalina.core.ApplicationContextFacade@<span class="number">1f</span>5b43b6</span><br><span class="line">org.apache.catalina.core.ApplicationContextFacade@<span class="number">1f</span>5b43b6</span><br><span class="line">image/jpeg</span><br><span class="line">C:\Users\Administrator.RG4-<span class="number">44</span>\Desktop\demo01\out\artifacts\demo01_war_exploded\WEB-INF\classes\test01.txt</span><br><span class="line">C:\Users\Administrator.RG4-<span class="number">44</span>\Desktop\demo01\out\artifacts\demo01_war_exploded\WEB-INF\test02.txt</span><br><span class="line">C:\Users\Administrator.RG4-<span class="number">44</span>\Desktop\demo01\out\artifacts\demo01_war_exploded\test03.txt</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191111203926.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Http（一）&quot;&gt;&lt;a href=&quot;#Http（一）&quot; class=&quot;headerlink&quot; title=&quot;Http（一）&quot;&gt;&lt;/a&gt;Http（一）&lt;/h1&gt;&lt;p&gt;Hyper Text Transfer Protocol超文本传输协议&lt;/p&gt;
&lt;p&gt;传输协议：数据
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>191106——JavaWeb之Servlet</title>
    <link href="https://cometorbityh.github.io/2019/11/06/191106%E2%80%94%E2%80%94JavaWeb%E4%B9%8BServlet/"/>
    <id>https://cometorbityh.github.io/2019/11/06/191106——JavaWeb之Servlet/</id>
    <published>2019-11-06T09:16:13.000Z</published>
    <updated>2019-11-11T07:02:46.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="1-Servlet简介"><a href="#1-Servlet简介" class="headerlink" title="1. Servlet简介"></a>1. Servlet简介</h2><p>servlet = server applet，字面意思是：运行在服务器端的小程序</p><p>servlet就是一个接口，定义了Java类被浏览器访问到的<strong>规则</strong>。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106173327.png" class="lozad"></p><p>##2. 实现Servlet及其执行原理</p><p>查看Java EE8文档，发现servlet定义了5个方法。当一个类实现Servlet接口时，需要重写Servlet的方法。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106173539.png" class="lozad"></p><p><strong>定义一个类实现Servlet接口的4个步骤：</strong></p><p>（1）创建JAVA EE项目</p><p>（2）定义一个类，实现Servlet接口</p><p>（3）实现Servlet接口的抽象方法</p><p>（4）配置Servlet（在web.xml中配置）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106175434.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106175913.png" class="lozad"></p><p><strong>执行原理：</strong></p><p>当服务器接收到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径；</p><p>查找web.xml文件，是否有<code>&lt;url-pattern&gt;</code>标签体内容；</p><p>若有，则找到对应的<code>&lt;servlet-class&gt;</code>全类名；</p><p>tomcat会将字节码文件加载进内存，并且创建其对象，调用其方法。（<font color="red">反射操作</font>）</p><h2 id="3-Servlet的生命周期"><a href="#3-Servlet的生命周期" class="headerlink" title="3. Servlet的生命周期"></a>3. Servlet的生命周期</h2><table><thead><tr><th>方法</th><th>作用</th><th>生命周期</th></tr></thead><tbody><tr><td>void init</td><td>初始化的方法，在Servlet被创建时执行，只执行一次</td><td>被创建</td></tr><tr><td>void service</td><td>提供服务的方法，每一个Servlet被访问时都会被执行，可执行多次</td><td>提供服务</td></tr><tr><td>void destroy</td><td>销毁的方法，在服务器<strong>正常关闭</strong>时执行，只执行一次</td><td>被销毁</td></tr></tbody></table><table><thead><tr><th>其他2个方法</th><th></th></tr></thead><tbody><tr><td>ServletConfig  getServletConfig</td><td>获取ServletConfig对象，servlet的配置对象</td></tr><tr><td>String  getServletInfo</td><td>获取Servlet的一些信息：版本、作者…</td></tr></tbody></table><blockquote><p><strong>Servlet对象什么时候被创建？</strong></p><p>默认情况：第一次被访问时创建。</p><p>特殊情况：在服务器启动时创建。配置<code>web.xml</code>下的<code>&lt;servlet&gt;</code>中的<code>&lt;load-on-startup&gt;</code>。</p><ul><li>当值为负整数时，第一次被访问时创建。</li><li>当值为正整数或0时，在服务器启动时创建。值的范围为[0,10]</li></ul><p><strong>一个servlet在内存中有几个对象？</strong></p><p>Servlet的init方法只执行1次，说明一个Servlet在内存中只存在一个对象，因此servlet是单例的。</p><ul><li>多个用户同时访问时，可能存在安全问题。因此尽量不在Servlet中定义成员变量。若定义了成员变量，也不要有修改值的操作，因为这个变量会被所有用户访问到。</li></ul><p><strong>destroy方法是在servlet对象被销毁之前执行还是之后执行？</strong></p><p>好比临终遗言般，destroy应该是在Servlet销毁之前执行，一般用于释放资源。</p></blockquote><h2 id="4-Servlet-3-0注解配置"><a href="#4-Servlet-3-0注解配置" class="headerlink" title="4. Servlet 3.0注解配置"></a>4. Servlet 3.0注解配置</h2><p>Servlet 3.0加入了注解配置，使得Servlet可以不用配置web.xml文件，直接在Servlet类上添加注解<code>@WebServlet(&quot;/demo&quot;)</code>，其中<code>/demo</code>是url-pattern，这样子就大大简化了代码，也不需要配置servlet-name了。</p><p>urlpartten：Servlet访问路径，是个数组，因此可以设置多个路径</p><ul><li>一个Servlet可以设置多个访问路径：<code>@WebServlet({&quot;/aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;})</code></li><li>路径配置规则（*是通配符，优先级是最低的）<ul><li>/xxx：单层路径（/*随意起名都可访问该Servlet类）</li><li>/xxx/xxx：双层路径（/xxx/*表示第二层随意起名都可访问该Servlet类）</li><li>*.do（注意前面不加“/”）</li></ul></li></ul><h2 id="5-Servlet的体系结构"><a href="#5-Servlet的体系结构" class="headerlink" title="5. Servlet的体系结构"></a>5. Servlet的体系结构</h2><p>通过之前的小案例，了解了Servlet的基本操作。但是发现每次实现Servlet接口都要重写其5个方法，单往往我们只需要其中的service方法，其他4个方法一般不会使用。因此有没有什么方式能让我们只需要重写service方法就行了呢？有！</p><p>我们去看下Servlet接口的继承结构：</p><p>Servlet接口有一个实现类GenericServlet，这个类是个抽象类。而抽象类GenericServlet还有一个子类，名为HttpServlet，也是一个抽象类。这2个抽象类都能更简便的让我们重写Servlet的某些方法，而不是重写所有方法。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106184710.png" class="lozad"></p><p>GenericServlet抽象类将Serrvlet接口中其他的方法做了默认空实现，只保留service( )方法作为抽象，也就是说，定义一个继承GenericServlet的Servlet类时，只需重写service（）方法即可，其他方法可以选择性的按照需求重写。</p><p>虽然GenericServlet抽象类很方便，但是我们实际开发时也很少使用GenericServlet，通常我们会使用HttpServlet抽象类</p><p>HttpServlet继承自GenericServlet抽象类，是Http协议的一种封装，可以简化操作</p><h3 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h3><p>Service源码中获取了请求的方法，判断这个请求方式执行的方法， 因此我们无需像GenericServlet类一样重写service方法，而是重写对应的请求方法执行的方法，如doGet()、doPost()等7种。</p><ul><li>定义类继承HttpServlet</li><li>复写doGet() / doPost()方法，当请求方法是get时，调用doGet方法，当请求是Post时，调用doPost方法，我们现在已知的post请求只有一种（表单method = post），其余均为get请求。</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191110172508.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h1&gt;&lt;h2 id=&quot;1-Servlet简介&quot;&gt;&lt;a href=&quot;#1-Servlet简介&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>191106——Git基本操作</title>
    <link href="https://cometorbityh.github.io/2019/11/03/191106%E2%80%94%E2%80%94Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://cometorbityh.github.io/2019/11/03/191106——Git基本操作/</id>
    <published>2019-11-03T12:00:46.000Z</published>
    <updated>2019-11-06T13:45:04.679Z</updated>
    
    <content type="html"><![CDATA[<p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/Git&GitHub.bmp" class="lozad"></p><h1 id="1-版本控制工具"><a href="#1-版本控制工具" class="headerlink" title="1. 版本控制工具"></a>1. 版本控制工具</h1><p>集中式版本控制工具：SVN、CVS、VSS…</p><p>分布式版本控制工具：Git、Mercurial、Bazaar、Darcs…</p><h1 id="2-Git"><a href="#2-Git" class="headerlink" title="2. Git"></a>2. Git</h1><h2 id="2-1-Git的优势"><a href="#2-1-Git的优势" class="headerlink" title="2.1. Git的优势"></a>2.1. Git的优势</h2><ul><li>大部分操作在本地完成，无需联网（分布式版本控制，相当于本地仓库，因此无需联网）</li><li>完整性保证</li><li>尽可能添加数据而不是删除或修改数据（删除修改都是不可逆的操作）</li><li>分支操作非常快加流畅</li><li>与Linux命令全面兼容（他俩一个爹：Linux）</li></ul><h2 id="2-2-Git结构"><a href="#2-2-Git结构" class="headerlink" title="2.2. Git结构"></a>2.2. Git结构</h2><img style="zoom: 50%;" data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191103202636.png" class="lozad"><p>##<strong>2.3. Git</strong> <strong>和代码托管中心</strong> </p><h3 id="2-3-1-代码托管中心的任务：维护远程库"><a href="#2-3-1-代码托管中心的任务：维护远程库" class="headerlink" title="2.3.1 代码托管中心的任务：维护远程库"></a>2.3.1 代码托管中心的任务：维护远程库</h3><ul><li><p>局域网环境下</p></li><li><p>GitLab 服务器 </p></li><li><p>外网环境下 </p><ul><li><p>GitHub </p></li><li><p>码云</p></li></ul></li></ul><h1 id="3-本地库及其命令"><a href="#3-本地库及其命令" class="headerlink" title="3. 本地库及其命令"></a>3. 本地库及其命令</h1><h2 id="3-1-本地库和远程库"><a href="#3-1-本地库和远程库" class="headerlink" title="3.1 本地库和远程库"></a>3.1 本地库和远程库</h2><p>（1）<strong>团队内部协作</strong></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191103222223.png" class="lozad"></p><p>（2）<strong>跨团队协作</strong></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191103222100.png" class="lozad"></p><p>##3.2. 本地库操作命令</p><h3 id="3-2-1-本地库初始化-签名"><a href="#3-2-1-本地库初始化-签名" class="headerlink" title="3.2.1 本地库初始化 + 签名"></a>3.2.1 本地库初始化 + 签名</h3><h4 id="本地库初始化"><a href="#本地库初始化" class="headerlink" title="本地库初始化"></a>本地库初始化</h4><p>命令：    <code>git init</code></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191103224243.png" class="lozad"></p><p>注意：.git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要随意修改。 </p><h4 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h4><p><strong>作用：</strong>区分不同开发人员的身份</p><p><strong>格式：</strong>（举例，用户名与Email无实际联系）</p><ul><li>用户名：tom</li><li>Email：<a href="mailto:goodMorning@hello.com" target="_blank" rel="noopener">goodMorning@hello.com</a></li></ul><p><strong>注意：</strong>该签名和用于登录远程库（即代码托管中心）的账号密码无任何关系。</p><p><strong>命令：</strong></p><ul><li><p>项目级别/仓库级别：只在当前本地库范围生效（信息保存在<code>.git</code>目录下的<code>config</code>文件中）</p></li><li><p><code>git config user.name tom_pro</code> </p></li><li><p><code>git config user.email goodMorning_pro@hello.com</code> </p></li><li><p>系统用户级别：登录当前操作系统的用户范围 （信息保存位置：系统<code>~</code>家目录下的<code>.gitconfig</code>文件）</p></li><li><p><code>git config --global user.name tom_glb</code> </p></li><li><p><code>git config --global user.email goodMorning_glb@hello.com</code></p></li><li><p>级别优先级：</p><ul><li>就近原则（项目级别 &gt; 系统级别，二者都有时采用项目级别的签名）</li><li>若只有系统级别的签名：以系统用户级别的签名为准</li><li>当二者都没有是不允许的。</li></ul></li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191104163310.png" class="lozad"></p><p>###3.2.2. 基本操作</p><p>新建一个文件，工作区添加到暂存区，提交到本地库</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191104171255.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191104171645.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191104172119.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191104172318.png" class="lozad"></p><p><img alt="image-20191104172831494" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191104172831494.png" class="lozad"></p><p>修改一个文件，添加到暂存区，提交到本地库</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191104173348.png" class="lozad"></p><p>查看提交日志</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191104173800.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191104174651.png" class="lozad"></p><p><strong>前进后退版本</strong></p><p>索引值能前进后退版本，^和~只能后退版本。</p><p>该命令中存在hard参数，在reset命令中，还有soft和mixed参数</p><ul><li>soft参数：仅在本地库移动HEAD指针</li><li>mixed参数：在本地库移动HEAD指针，重置暂存区</li><li>hard参数：在本地库移动HEAD指针，重置暂存区，重置工作区</li></ul><p><img alt="image-20191104175559414" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191104175559414.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191104180134.png" class="lozad"></p><p><strong>删除文件找回</strong></p><p>前提：删除前，文件存在时的状态提交到了本地库 （之前已经把要找回的文件提交到了本地库）</p><p><code>git reset --hard [指针位置]</code>:</p><p>指针位置：</p><ul><li>删除操作已提交到本地库，指针位置指向历史记录（永久删除文件后找回）</li><li>删除操作未提交到本地库，指针位置指向HEAD（添加到暂存区的删除文件找回）</li></ul><p>永久删除文件后找回</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105143653.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105144037.png" class="lozad"></p><p>添加到暂存区的删除文件找回</p><p><img alt="image-20191105144540571" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191105144540571.png" class="lozad"></p><p>比较差异（比较不同版本的同一文件的差异）</p><p>git diff [文件名]：将工作区的文件和暂存区进行比较</p><p>git diff [本地库历史版本] [文件名]：将工作区中的文件和本地库历史记录比较</p><p>不带文件名 比较多个文件</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105150327.png" class="lozad"></p><h3 id="3-2-3-分支管理"><a href="#3-2-3-分支管理" class="headerlink" title="3.2.3. 分支管理"></a>3.2.3. 分支管理</h3><p>查看分支 git branch -v</p><p>创建分支 git branch [分支名]</p><p>切换分支 git checkout [分支名]</p><p>合并分支</p><p>​    切换到接收修改的分支上（被合并的，变更内容的分支）</p><p>git checkout [被合并的分支名]</p><p>​    执行merge命令</p><p>git merge [有新内容的分支名]</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/image-20191105152050105.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105152341.png" class="lozad"></p><p>分支冲突：2个分支同时修改了文件，git不清楚盖如何合并，导致分支冲突</p><p>解决：</p><ul><li>编辑文件，删除特殊符号，修改文件内容后保存退出；</li><li>文件添加到暂存区，提交到本地库（注意此步操作不加文件名）</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105153802.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105154151.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105154701.png" class="lozad"></p><p>#4. Git基本原理</p><h2 id="4-1-哈希算法"><a href="#4-1-哈希算法" class="headerlink" title="4.1. 哈希算法"></a>4.1. 哈希算法</h2><p>哈希是一系列的算法，不同hash算法的加密强度不同。哈希算法不可逆。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105155335.png" class="lozad"></p><p>Git底层采用的是SHA-1算法，哈希算法可以用来验证文件</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105155620.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105160220.png" class="lozad"></p><p>##4.2. Git 保存版本的机制</p><p><strong>Git</strong> <strong>的文件管理机制</strong> </p><p>Git 把数据看作是小型文件系统的一组快照。每次提交更新时 Git 都会对当前 的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改， Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。所以 Git 的 工作方式可以称之为快照流。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105160429.png" class="lozad"></p><p><strong>Git</strong> <strong>文件管理机制细节</strong> </p><p> Git 的“提交对象”</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105160522.png" class="lozad"></p><p>提交对象及其父对象形成的链条</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105160542.png" class="lozad"></p><p><strong>Git</strong> <strong>分支管理机制</strong> </p><p><strong>5.3.1</strong> <strong>分支的创建</strong></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105160828.png" class="lozad"></p><p><strong>分支的切换</strong></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105160859.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105160933.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105160946.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105161002.png" class="lozad"></p><p>总而言之，创建分支是创建新的指针，切换分支是切换指针的位置，因此非常高效</p><p>#5. 远程库操作命令</p><h2 id="5-1-GitHub创建仓库"><a href="#5-1-GitHub创建仓库" class="headerlink" title="5.1. GitHub创建仓库"></a>5.1. GitHub创建仓库</h2><p>1.注册账号并登录</p><p>2.创建仓库（远程库）</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105162214.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105162117.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105162517.png" class="lozad"></p><h2 id="5-2-本地库推送到远程库"><a href="#5-2-本地库推送到远程库" class="headerlink" title="5.2. 本地库推送到远程库"></a>5.2. 本地库推送到远程库</h2><p>本地库连接远程库，执行推送操作</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105163212.png" class="lozad"></p><p>刷新远程库，可以看到刚才提交的文件了，点击可查看内容</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105163414.png" class="lozad"></p><p>##5.3. 从远程库克隆项目到本地</p><p>另一个人执行的克隆操作</p><p>复制地址</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105163845.png" class="lozad"></p><p>克隆项目</p><p><img alt="image-20191105164424088" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191105164424088.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105170638.png" class="lozad"></p><p>这样用户2就克隆了用户1的远程库到本地了。</p><p>##5.4. 修改内容重新推送到远程库</p><p>现在，用户2想修改用户1的内容并重新发回到用户1的本地库该怎么弄？</p><p>之前图里看到过，直接推送是不行的， 需要用户1批准用户2，邀请用户2加入团队成为团队成员才能进行推送操作。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105170859.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105171135.png" class="lozad"></p><p><img alt="image-20191105171330106" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191105171330106.png" class="lozad"></p><p>此时用户1成功邀请2成为团队成员</p><p>用户2就可以推送操作了</p><p>###远程库修改的拉取</p><p>pull = fetch + merge 分为2步。git fetch [远程库地址别名] [远程分支名]</p><p>git merge  [远程库地址别名]/[远程分支名]</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105172535.png" class="lozad"></p><p>##5.5. 协同开发的冲突的解决</p><p>当用户1和用户2同时修改了某个文件的同一位置时，分别推送到远程库会出现冲突，即先推送的能成功，后推送的失败，因为远程库根据哈希值比较，若不同则认为你的本地库不是最新的了，因此用户2需要先拉取到本地，进行内容的修改，再进行推送。</p><ul><li>如果不是基于 GitHub 远程库的最新版所做的修改，不能推送，必须先拉取。 </li><li>拉取下来后如果进入冲突状态，则按照“分支冲突解决”操作解决即可。 </li></ul><p>##5.6. 跨团队协作操作</p><p>用户1和用户2是团队A的，用户3是团队B的，现在A对需要把项目给B队去优化，应该怎么做？</p><p>首先团队B的成员要把团队A的远程库fork成自己的远程库，再克隆到本地，修改完成后push，发起pull request</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105174617.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105174723.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105175605.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105175649.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105175738.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105175919.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105180018.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105180118.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105180326.png" class="lozad"></p><p>团队1接受pull request</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105180525.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105180801.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105180934.png" class="lozad"></p><p>之后团队1就可以拉取远程库了。</p><h2 id="5-7-SSH免密登录"><a href="#5-7-SSH免密登录" class="headerlink" title="5.7. SSH免密登录"></a>5.7. SSH免密登录</h2><p>可以实现免GitHub账号登录，因此使用SSH可以免密登录，需要注意的是这样只能一个账号登陆</p><h1 id="6-Git图形化-lt-eclipse版-gt"><a href="#6-Git图形化-lt-eclipse版-gt" class="headerlink" title="6. Git图形化&lt;eclipse版&gt;"></a>6. Git图形化&lt;eclipse版&gt;</h1><p>##6.1. 新建项目提交到本地库（忽略特定文件）</p><p>以eclipse为例：</p><p>点击Window——&gt; Preferences ——&gt; Team——&gt; Git——&gt;Configuration</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105220404.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105220740.png" class="lozad"></p><p>新建一个Maven项目</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105220909.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191105221719.png" class="lozad"></p><p>将eclipse工程初始化为本地库</p><p>右击工程——&gt;Team——&gt;Share Project ——&gt;Git</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106152424.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106152530.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106152746.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106153450.png" class="lozad"></p><p>解决追踪文件，首先要忽略一些特定文件</p><p><strong>概念：Eclipse 特定文件</strong> </p><p>这些都是 Eclipse 为了管理我们创建的工程而维护的文件，和开发的代码没有 直接关系。最好不要在 Git 中进行追踪，也就是把它们忽略。 </p><p>.classpath 文件 </p><p>.project 文件 </p><p>.settings 目录下所有文件 </p><p><strong>为什么要忽略 Eclipse 特定文件呢？</strong> </p><p>同一个团队中很难保证大家使用相同的 IDE 工具，而 IDE 工具不同时，相关工程特定文件就有可能不同。如果这些文件加入版本控制，那么开发时很可能需要为了这些文件解决冲突</p><p>在家目录的本机用户的<code>.gitconfig</code>同级目录下新建一个<code>java.gitignore</code>，该文件的内容位于 <a href="https://github.com/github/gitignore/blob/master/Java.gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore/blob/master/Java.gitignore</a> </p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106154726.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106154458.png" class="lozad"></p><p>在<code>.gitconfig</code>中添加：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106154955.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106155136.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106155318.png" class="lozad"></p><p>这样，无论做任何版本操作，这些特定的文件都不会受任何干扰了</p><p>将项目添加到暂存区，右击项目——&gt;Team——&gt;add to Index</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106155723.png" class="lozad"></p><p>将项目提交到本地库，右击项目——&gt;Team——&gt;commit</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106155925.png" class="lozad"></p><p>若再添加新文件，可以直接对其commir，不用add。这就是图形化界面的优势</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106160423.png" class="lozad"></p><h2 id="6-2-推送到远程库"><a href="#6-2-推送到远程库" class="headerlink" title="6.2. 推送到远程库"></a>6.2. 推送到远程库</h2><p>新建远程库，复制链接</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106160700.png" class="lozad"></p><p>右击项目——&gt;Team——&gt;remote——&gt;push</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106160900.png" class="lozad"></p><p>添加所有分支</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106161031.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106161205.png" class="lozad"></p><p>成功后，回到远程库可查看</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106161355.png" class="lozad"></p><h2 id="6-3-克隆工程操作"><a href="#6-3-克隆工程操作" class="headerlink" title="6.3. 克隆工程操作"></a>6.3. 克隆工程操作</h2><p>右击空白处，import——&gt; Git——&gt;Project from Git——&gt;next——&gt;Clone URI——&gt;粘贴URI——&gt;master——&gt;next——&gt;更改保存路径——&gt;完成</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106161630.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106161745.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106161850.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106161936.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106162213.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106162420.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106162438.png" class="lozad"></p><p>克隆结束后，发现项目文件不完整，因为之前忽略了一些特定文件，所以还需要一些操作</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106162522.png" class="lozad"></p><p>右击项目，——&gt; configure ——&gt; convert to Maven Project，这样就能自动生成为Maven项目了。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106162701.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106162906.png" class="lozad"></p><p>##6.4. 在eclipse解决冲突</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106163325.png" class="lozad"></p><p>分别提交</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106163629.png" class="lozad"></p><p>推送到远程库，第二个推送的人会产生冲突</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106163805.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106163931.png" class="lozad"></p><p>解决：用户2先拉取（pull）,右击项目——&gt;Team——&gt;pull</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106164125.png" class="lozad"></p><p>右击冲突文件——&gt;Team——&gt;Merge Tool，可以看到对比</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106164218.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106164353.png" class="lozad"></p><p>打开提交界面</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106164451.png" class="lozad"></p><p>此时文件图标恢复正常，到远程库即可。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106164643.png" class="lozad"></p><p>查看远程库，推送成功！</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191106164721.png" class="lozad"></p><h1 id="7-Git工作流（略）"><a href="#7-Git工作流（略）" class="headerlink" title="7. Git工作流（略）"></a>7. Git工作流（略）</h1><p><strong>概念</strong></p><p>在项目开发过程中使用 Git 的方式</p><p>分类</p><p><strong>集中式工作流</strong></p><p><strong>GitFlow</strong> <strong>工作流</strong></p><p><strong>Forking</strong> <strong>工作流</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img alt data-src=&quot;https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/Git&amp;GitHub.bmp&quot; class=&quot;lozad&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-版本控制工具&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
      <category term="Git" scheme="https://cometorbityh.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://cometorbityh.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>191101——SpringMVC小结（1）</title>
    <link href="https://cometorbityh.github.io/2019/11/01/191101%E2%80%94%E2%80%94SpringMVC%E5%B0%8F%E7%BB%93%EF%BC%881%EF%BC%89/"/>
    <id>https://cometorbityh.github.io/2019/11/01/191101——SpringMVC小结（1）/</id>
    <published>2019-11-01T01:18:58.000Z</published>
    <updated>2019-11-01T16:18:25.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019-11-01记录帖"><a href="#2019-11-01记录帖" class="headerlink" title="2019.11.01记录帖"></a>2019.11.01记录帖</h1><h2 id="SpringMVC简介"><a href="#SpringMVC简介" class="headerlink" title="SpringMVC简介"></a>SpringMVC简介</h2><p>SpringMVC是Spring框架的一个模块</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191101092847.png" class="lozad"></p><h2 id="1-回忆MVC"><a href="#1-回忆MVC" class="headerlink" title="1. 回忆MVC"></a>1. 回忆MVC</h2><h2 id="2-第一个SpringMVC程序"><a href="#2-第一个SpringMVC程序" class="headerlink" title="2. 第一个SpringMVC程序"></a>2. 第一个SpringMVC程序</h2><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191102000840.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191102000406.png" class="lozad"></p><ul><li>若前端控制器没有配置init-param（没有说明springmvc配置文件的路径，有默认位置），则springmvc配置文件的默认位置应该在<code>WEB-INF</code>文件夹下，默认名为<code>springDispatcherServlet-servlet.xml</code>。</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191102001417.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019-11-01记录帖&quot;&gt;&lt;a href=&quot;#2019-11-01记录帖&quot; class=&quot;headerlink&quot; title=&quot;2019.11.01记录帖&quot;&gt;&lt;/a&gt;2019.11.01记录帖&lt;/h1&gt;&lt;h2 id=&quot;SpringMVC简介&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记录独自做SSM论坛系统的错误、解决方案以及心得</title>
    <link href="https://cometorbityh.github.io/2019/10/27/%E8%AE%B0%E5%BD%95%E7%8B%AC%E8%87%AA%E5%81%9ASSM%E8%AE%BA%E5%9D%9B%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%94%99%E8%AF%AF%E3%80%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%BB%A5%E5%8F%8A%E5%BF%83%E5%BE%97/"/>
    <id>https://cometorbityh.github.io/2019/10/27/记录独自做SSM论坛系统的错误、解决方案以及心得/</id>
    <published>2019-10-27T08:55:47.000Z</published>
    <updated>2019-11-07T09:06:16.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-如何在文章下加入评论"><a href="#1-如何在文章下加入评论" class="headerlink" title="1. 如何在文章下加入评论"></a>1. 如何在文章下加入评论</h2><p>由于自己用的分页插件pageHelper只支持List，因此想用map插入实在很难解决（可能是我不懂哈哈），</p><p>之前试过4表查询，结果只能得到有评论的文章。</p><p>因此在纠结了2天之后，我终于找到方法，就是查到所有评论，在控制层中按照文章的序号加入对应的评论，这样我就可以把对应的评论加入到对应文章的List中，从而解决了使用插件的难题。很开心，这样在之后插入也可以一个模块一个模块加入到文章bean中。</p><h2 id="2-添加文章时出现400错误代码"><a href="#2-添加文章时出现400错误代码" class="headerlink" title="2. 添加文章时出现400错误代码"></a>2. 添加文章时出现400错误代码</h2><p>在点击提交添加的按钮那边，一直出现400，很着急，按照百度的说法，有很多原因，有写是因为Date类型格式无法识别的，有说是int与Integer未转换，我一一试了一遍。都不行。最后在谷歌浏览器的控制台发现：我遍历出来的文章类型是类型名，但是我数据库中文章有关类型的字段是类型ID，看到这里我真的感觉很尴尬，我仿佛已经看到我要重构项目的时候了，郁闷。为什么当初要用Mybatis逆向工程，啊啊啊啊！！！不过好在解决了这个问题，这样发帖子功能也实现了，虽然没实现添加图片的功能，不过这个功能先放一放，后面再写。</p><h2 id="3-添加文章时，类型错误"><a href="#3-添加文章时，类型错误" class="headerlink" title="3. 添加文章时，类型错误"></a>3. 添加文章时，类型错误</h2><p>在添加带图片的文章时，由于图片是file类型的，因此后台一直获取不到这个数据。找了很多方法，最后在Controller方法的参数前加上@requestParam注解得以解决。</p><h2 id="4-收藏文章的思路"><a href="#4-收藏文章的思路" class="headerlink" title="4. 收藏文章的思路"></a>4. 收藏文章的思路</h2><p>需求：点击收藏按钮时变红（收藏），再次点击收藏时变灰（取消收藏），并且显示当前收藏数</p><p>思路：</p><ul><li><p>先去数据库查出该文章被收藏的条目，在控制层中将其加入到各文章的LIst中，这样该文章的收藏数就是这些收藏条目的长度了。</p></li><li><p>在前端页面中，使用ajax遍历文章</p><ul><li>用户未登录，且当前文章不是是当前登录用户的，收藏按钮显示为“请登录”</li><li>用户已登录，且当前文章不是是当前登录用户的（ 当前登录的用户ID和文章ID ）<ol><li>未收藏（当前登录用户ID和文章ID  不等于  传到页面的Articles的该Article的Collection中的每条数据）<ol><li>点击时收藏（调用收藏操作，执行添加收藏方法，并使收藏按钮变红）</li></ol></li><li>已收藏（当前登录用户ID和文章ID      等于  传到页面的Articles的该Article的Collection中的某条数据）<ol><li>点击时取消收藏（调用取消收藏操作，执行取消收藏方法，并使收藏按钮变灰）</li></ol></li></ol></li></ul></li></ul><h2 id="5-重大消息"><a href="#5-重大消息" class="headerlink" title="5.重大消息"></a>5.重大消息</h2><p>今天发现之前跟着视频用分页做的逻辑居然如此好用，里面有个to_page()方法，它用了Ajax刷新了整个页面，但我居然不知道去使用，知道今天才发现，害我写了N多的重复代码，真的想哭。不过好在及时发现了这个神器，嘻嘻，再也不用重复写相同的逻辑了。这样的话之前的代码就需要重构了，不过没事，能简化代码我很开心呢。嗷嗷嗷嗷嗷嗷！<img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191107165712.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191107165520.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-如何在文章下加入评论&quot;&gt;&lt;a href=&quot;#1-如何在文章下加入评论&quot; class=&quot;headerlink&quot; title=&quot;1. 如何在文章下加入评论&quot;&gt;&lt;/a&gt;1. 如何在文章下加入评论&lt;/h2&gt;&lt;p&gt;由于自己用的分页插件pageHelper只支持List，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>191024——java多线程</title>
    <link href="https://cometorbityh.github.io/2019/10/24/191024%E2%80%94%E2%80%94java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://cometorbityh.github.io/2019/10/24/191024——java多线程/</id>
    <published>2019-10-24T08:04:02.000Z</published>
    <updated>2019-10-24T09:56:19.525Z</updated>
    
    <content type="html"><![CDATA[<p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191024160743.png" class="lozad"></p><h1 id="多线程概述"><a href="#多线程概述" class="headerlink" title="多线程概述"></a>多线程概述</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1. 概念"></a>1.1. 概念</h2><p>进程：正在运行的程序</p><p>多进程：计算机同时支持运行多个进程，可以提高CPU的利用率</p><p>线程：一个进程可以执行多个任务，每一个任务都被称为一个线程，线程是程序的执行单元/执行路径。</p><p>多线程：提高应用程序的使用率。</p><p>多线程的意义：程序的执行本质是在抢CPU的资源，CPU的执行权。多进程是在抢占这个资源，而其中的某一个进程如果执行路径较多，就会有更高的几率抢到CPU执行权。但是线程的执行有<strong>随机性</strong>，无法保证一定抢到。</p><h2 id="1-2-JAVA程序运行原理"><a href="#1-2-JAVA程序运行原理" class="headerlink" title="1.2. JAVA程序运行原理"></a>1.2. JAVA程序运行原理</h2><p>Java命令会启动JVM，等于启动一个应用程序，即启动一个进程。该进程会自动启动一个“主线程”，该主线程会自动调用某个类的main方法，因此main方法运行在主线程中。</p><blockquote><p><strong>问：JVM的启动是单线程还是多线程的？</strong></p><p>答：多线程，JVM启动后最少会有２个线程，一个主线程，一个垃圾回收线程（为了防止出现内存溢出）。</p></blockquote><h1 id="多线程实现方案"><a href="#多线程实现方案" class="headerlink" title="多线程实现方案"></a>多线程实现方案</h1><p>Java提供类Thread来实现多线程，有2种方式实现多线程程序。</p><h2 id="2-1-方式1：继承Thread类"><a href="#2-1-方式1：继承Thread类" class="headerlink" title="2.1. 方式1：继承Thread类"></a>2.1. 方式1：继承Thread类</h2><h3 id="2-1-1-步骤："><a href="#2-1-1-步骤：" class="headerlink" title="2.1.1. 步骤："></a>2.1.1. 步骤：</h3><ul><li>自定义类MyThread继承Thread类</li><li>MyThread类重写run方法（只有run方法中的代码才会被线程执行）</li><li>创建MyThread对象</li><li>启动线程（start方法）</li></ul><blockquote><p> <strong>为什么启动线程是用start方法而不是run方法？</strong></p><p>​    因为run方法只是封装了被线程执行的代码，直接调用是普通方法。</p><p>​    而start方法是先启动了线程，再由jvm去调用该线程的run方法</p><p><strong>一个线程能调用2次start方法吗？</strong></p><p>​    不能。这样相当于启动了2次一样的线程，一个线程同时只能启动一次。</p><p><strong>如何获取和设置线程名称？</strong></p><p>​    public final String getName()：获取线程名称</p><p>​    线程类的无参构造方法创建的对象 + public final String setName()：设置线程名称</p><p>​    线程类的有参构造方法：设置线程名称</p><p><strong>如何获得main方法所在线程对象的名称？</strong></p><p>​    Thread.currentThread().getName();    //Thread.currentThread()返回当前正在执行的线程对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.test.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//需要被执行的代码</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;<span class="number">100</span>;x++) &#123;</span><br><span class="line">System.out.println(getName()+<span class="string">"---"</span>+x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造方法：用来直接设置线程名称</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.test.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建线程对象</span></span><br><span class="line">MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line"><span class="comment">//MyThread t3 = new MyThread("3号线程");</span></span><br><span class="line">t1.setName(<span class="string">"1号线程"</span>);</span><br><span class="line">t2.setName(<span class="string">"2号线程"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动线程</span></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###<img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191024165223.png" class="lozad"></p><h1 id="线程调度和线程控制"><a href="#线程调度和线程控制" class="headerlink" title="线程调度和线程控制"></a>线程调度和线程控制</h1><h2 id="3-1-线程调度"><a href="#3-1-线程调度" class="headerlink" title="3.1. 线程调度"></a>3.1. 线程调度</h2><p>线程调度有2种模型。</p><p>分时调度模型，所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间片</p><p><strong>抢占式调度模型（java使用的）</strong>：优先使优先级高的线程使用CPU，若优先级相同，则会随机选择一个。注意：优先级高的线程获取CPU时间片相对多一些。</p><blockquote><p><strong>如何设置线程的优先级？</strong></p><p>setPriority(10)：线程的默认优先级为5，其取值范围为[1，10]；</p><p>优先级仅仅表示线程获取的CPU的时间片的几率高。</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191024173331.png" class="lozad"></p><h3 id="3-2-线程控制"><a href="#3-2-线程控制" class="headerlink" title="3.2. 线程控制"></a>3.2. 线程控制</h3><blockquote><p>线程睡眠：Thread.sleep(ms)</p><p>加入线程：join()：优先执行该线程</p><p>线程礼让：Thread.yield():暂停当前正在执行的线程对象，并执行其他线程对象（使线程执行更有规律，但无法保证一个线程执行一次）</p><p>守护线程：</p><p>中断线程：</p></blockquote><h1 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h1><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191024175547.png" class="lozad"></p><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h1 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h1><h1 id="定时器的使用"><a href="#定时器的使用" class="headerlink" title="定时器的使用"></a>定时器的使用</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img alt data-src=&quot;https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191024160743.png&quot; class=&quot;lozad&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;多线程概述&quot;&gt;&lt;a href=&quot;#多
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA——集合类</title>
    <link href="https://cometorbityh.github.io/2019/10/23/JAVA%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E7%B1%BB/"/>
    <id>https://cometorbityh.github.io/2019/10/23/JAVA——集合类/</id>
    <published>2019-10-23T06:59:40.000Z</published>
    <updated>2019-10-23T10:29:08.254Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>集合：也称容器。是一种可以装任何类型的容器</p><p>集合与数组的区别：数组长度不可变。集合长度可变</p></blockquote><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191023171204.png" class="lozad"></p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>特点：有序可重复，容器保存的数据可以是多种类型的，但是当我们存储了很多不同类型的数据后，取数据就需要转成对应的类型，导致很麻烦，那么有没有什么办法可以规定该List只能存储一种数据类型呢？</p><p>我们使用<code>泛型</code>来规定数据类型，未规定泛型的集合里面可以存储任意类型的数据或对象，规定泛型之后，该集合只能存储对应数据类型的数据或对象。</p><p>注意：泛型可以用引用数据类型代替，而不是指基本数据类型。如<code>List&lt;Integer&gt;</code>而不是<code>List&lt;int&gt;</code>。</p><h3 id="ArrayList的常用方法"><a href="#ArrayList的常用方法" class="headerlink" title="ArrayList的常用方法"></a>ArrayList的常用方法</h3><p>常用方法：</p><p>增删改查：add(E e) ,remove(index),set(index,value),get(index),size()</p><p>其他方法：addAll(list2) 并集， removeAll(list2)差集， retainAll（list2) 交集</p><p>​                        indexOf() , lastIndexOf(), contains()  List=subList()</p><p>​                        isEmpty()   clear()   ensureCapacity()   iterator()迭代器</p><p>​                        toArray(T[] x);  TrimToSize();</p><p>add ——存</p><p>remove(int index)——删除对应索引的元素</p><p>set(int index,E value)——对应索引的元素改成新元素</p><p>inr size()——返回该list的有效元素个数</p><p><code>list1.addAll(Collection&lt;? extends E&gt; list2)</code>：将list2的所有元素添加到list1中，注意如果2个List都有泛型，那么list2的泛型应该与list1的泛型相同或是list1的泛型的子类，若泛型无关联，则无法添加。(并集)</p><p><code>list1.addAll(int index, Collection&lt;? extends E&gt; list2)</code>：将list2的所有元素添加到list1中，在索引处前开始插入。注意如果2个List都有泛型，那么list2的泛型应该与list1的泛型相同或是list1的泛型的子类，若泛型无关联，则无法添加。</p><p>E get(int index)——取出对应索引位置的元素，返回值为规定的泛型</p><p>clear()——清除list中的所有元素</p><p>boolean contains(Object)——判断是否包含该元素</p><p>int indexOf(Object o)——判断该元素第一次在list中出现的索引</p><p>int lastIndexOf(Object o)——判断该元素最后一次在list中出现的索引</p><p>boolean isEmpty() ——判断list是否为空</p><p>system.out.println(list)：遍历对象，说明List重写了toString()方法</p><p>Iterator iterator()——迭代器</p><p>removeAll(list2)——差集</p><p>retainAll(list2)——交集</p><table><thead><tr><th></th><th>ArrayList</th><th>Vector</th><th>LinkedList</th></tr></thead><tbody><tr><td>底层数据结构</td><td>动态数组（扩容1.5倍）</td><td>动态数组（扩容2倍）</td><td>双向链表</td></tr><tr><td>特点</td><td>有序可重复，适合遍历和查询</td><td>有序可重复，适合遍历和查询</td><td>有序可重复，适合增加和删除</td></tr><tr><td></td><td>线程不同步，安全性低，效率高</td><td>线程同步，安全性高，效率低</td><td></td></tr></tbody></table><h2 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h2><p>实现Collection接口，以value形式存在</p><p>无序无重复，</p><p>无序：set集合使用hash算法对元素进行排列，不是按照存储顺序排列，因此无序</p><table><thead><tr><th></th><th>HashSet</th><th>TreeSet</th></tr></thead><tbody><tr><td>底层数据结构</td><td>HashMap（散列表=数组+链表）</td><td>TreeMap（红黑二叉树）</td></tr><tr><td>特点</td><td>无序无重复</td><td>无序无重复</td></tr><tr><td></td><td>无重复原则有2个方法同时起作用<br>* equals   hashCode<br>* 默认比较2个对象的地址，若第二个对象地址与第一个一致，则不存入<br>* 若i想改变其规则，则可重写上述2个方法</td><td>无重复原则有1个方法在起作用<br>* compareTo<br><br>* 该方法并非所有对象都有，若想将1个对象存入TreeSet中，需让对象所属的类实现接口COmparable，再将compareTo重写，返回值int，负数靠前排布，整数排列靠后</td></tr></tbody></table><h2 id="Map-lt-K-V-gt-接口"><a href="#Map-lt-K-V-gt-接口" class="headerlink" title="Map&lt;K,V&gt;接口"></a>Map&lt;K,V&gt;接口</h2><p>Map，直译为地图，在Java中表示<code>映射</code>，可以通过某个key直接定位到对应的value值</p><p>存储的方式：键值对（key-value)，key无序无重复，value无序可重复。就像账号和密码，账号是唯一的，密码可能会一样。</p><h3 id="HashMap-lt-K-V-gt-类"><a href="#HashMap-lt-K-V-gt-类" class="headerlink" title="HashMap&lt;K,V&gt;类"></a>HashMap&lt;K,V&gt;类</h3><p>3.1. 所属包：java.util</p><p>3.2. 如何创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个HashMap对象，该方法：初始容器16，当容量达到容量的0.75倍时自动扩容</span></span><br><span class="line">HashMap&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,String&gt;();</span><br></pre></td></tr></table></figure><p>3.3. 基本方法</p><p>增删改查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.test.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHashMap</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个HashMap对象，该方法：初始容器16，当容量达到容量的0.75倍时自动扩容</span></span><br><span class="line">HashMap&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==== 增删改查 ====*/</span></span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">"aaa"</span>);</span><br><span class="line">map.put(<span class="number">4</span>, <span class="string">"ddd"</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">"aaa"</span>);<span class="comment">//key不同，value相同</span></span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">"bbb"</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">"xxx"</span>);<span class="comment">//key相同，value不同</span></span><br><span class="line">System.out.println(map);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> *  无序：存元素的顺序与取元素的顺序无关</span></span><br><span class="line"><span class="comment">   key不能重复：若重复，则后添加的覆盖前添加的</span></span><br><span class="line"><span class="comment">   value可重复：不同的key可以有相同的value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">map.remove(<span class="number">3</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">"我是2号key"</span>);</span><br><span class="line">System.out.println(<span class="string">"map的有效元素个数："</span>+map.size());</span><br><span class="line">System.out.println(map);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==== 遍历 ====*/</span></span><br><span class="line"><span class="comment">//获取map集合的全部key</span></span><br><span class="line">Set&lt;Integer&gt; keys = map.keySet();</span><br><span class="line"><span class="comment">//通过迭代器遍历keys</span></span><br><span class="line">Iterator&lt;Integer&gt; it = keys.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">Integer key = it.next();</span><br><span class="line">String value  = map.get(key);</span><br><span class="line">System.out.println(key+<span class="string">"-----"</span>+value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191023182851.png" class="lozad"></p><p>其他方法</p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;集合：也称容器。是一种可以装任何类型的容器&lt;/p&gt;
&lt;p&gt;集合与数组的区别：数组长度不可变。集合长度可变&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt data-src=&quot;https://yanghanblog.oss-cn-hang
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SSM图片上传并回显</title>
    <link href="https://cometorbityh.github.io/2019/10/19/SSM%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%B9%B6%E5%9B%9E%E6%98%BE/"/>
    <id>https://cometorbityh.github.io/2019/10/19/SSM图片上传并回显/</id>
    <published>2019-10-19T15:27:08.000Z</published>
    <updated>2019-10-20T04:26:26.653Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 最近做一个SSM项目需要用到图片上传，在网上找了很多教程，配置了几遍，终于弄出来了，在此记录一贴留念。</p><p>本文使用的工具是idea，数据库是Mysql，框架是SSM。</p></blockquote><h2 id="1-项目结构"><a href="#1-项目结构" class="headerlink" title="1. 项目结构"></a>1. 项目结构</h2><p>新建一个maven项目，进行ssm整合之后，添加以下文件：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191019234811.png" class="lozad"></p><h2 id="2-前期准备"><a href="#2-前期准备" class="headerlink" title="2. 前期准备"></a>2. 前期准备</h2><p>在本地找个盘建个文件夹用来存放图片，如我在E盘下新建文件夹“upload”（忽略图片，测试时用的）:</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191019235226.png" class="lozad"></p><p>idea创建好一个Maven项目，配置好Tomcat，将放图片的文件夹也加入：</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/1571500756410.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191019235951.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191020000323.png" class="lozad"><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191020121117.png" class="lozad"></p><p>当启动tomcat时，会部署2个目录分支，这样前期工作就准备好了。</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191020000137.png" class="lozad"></p><h2 id="3-新建数据库"><a href="#3-新建数据库" class="headerlink" title="3. 新建数据库"></a>3. 新建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`product`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product`</span> (</span><br><span class="line">  <span class="string">`pid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`pimage`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`pid`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">6</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h2 id="4-具体代码"><a href="#4-具体代码" class="headerlink" title="4. 具体代码"></a>4. 具体代码</h2><h3 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1. pom.xml"></a>1. pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 上传下载需要涉及到的jar包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-SpringMVC-xml"><a href="#2-SpringMVC-xml" class="headerlink" title="2. SpringMVC.xml"></a>2. SpringMVC.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义文件上传解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设定默认编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设定文件上传的最大值5MB，5*1024*1024 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其他的大家可以自行配置，不影响主功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Product-java"><a href="#3-Product-java" class="headerlink" title="3. Product.java"></a>3. Product.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="keyword">private</span> String pimage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(Integer pid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pid = pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPimage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pimage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPimage</span><span class="params">(String pimage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pimage = pimage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Product [pid="</span> + pid + <span class="string">", pimage="</span> + pimage + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-ProductMapper-xml"><a href="#4-ProductMapper-xml" class="headerlink" title="4. ProductMapper.xml"></a>4. ProductMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.young.dao.ProductMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加商品图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"com.young.bean.Product"</span> &gt;</span></span><br><span class="line">        insert into product(pimage) values (#&#123;pimage&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询商品--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"com.young.bean.Product"</span>&gt;</span></span><br><span class="line">        select * from product</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-ProductMapper-java"><a href="#5-ProductMapper-java" class="headerlink" title="5.ProductMapper.java"></a>5.ProductMapper.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.young.bean.Product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保存商品</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Product product)</span></span>;</span><br><span class="line">    <span class="comment">//查询商品</span></span><br><span class="line">    <span class="function">List&lt;Product&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-ProductService-java"><a href="#6-ProductService-java" class="headerlink" title="6. ProductService.java"></a>6. ProductService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.young.bean.Product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Product&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Product product)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-ProductServiceImpl-java"><a href="#7-ProductServiceImpl-java" class="headerlink" title="7. ProductServiceImpl.java"></a>7. ProductServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.young.bean.Product;</span><br><span class="line"><span class="keyword">import</span> com.young.dao.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.young.service.ProductService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注入ProductMapper</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> productMapper.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        productMapper.save(product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-ProductController-java"><a href="#8-ProductController-java" class="headerlink" title="8.ProductController.java"></a>8.ProductController.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.young.bean.Product;</span><br><span class="line"><span class="keyword">import</span> com.young.service.ProductService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注入ProductService</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/list.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">listUser</span><span class="params">( Model model)</span></span>&#123;</span><br><span class="line">        List&lt;Product&gt; list= productService.list();</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>,list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/addProduct.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(MultipartFile file,Product product, ModelMap map)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 上传图片</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//图片上传成功后，将图片的地址写到数据库</span></span><br><span class="line">        String filePath = <span class="string">"E:\\upload"</span>;<span class="comment">//保存图片的路径,tomcat中有配置</span></span><br><span class="line">        <span class="comment">//获取原始图片的拓展名</span></span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//新的文件名字，使用uuid随机生成数+原始图片名字，这样不会重复</span></span><br><span class="line">        String newFileName = UUID.randomUUID()+<span class="string">"_"</span>+originalFilename;</span><br><span class="line">          <span class="comment">//封装上传文件位置的全路径，就是硬盘路径+文件名</span></span><br><span class="line">        File targetFile = <span class="keyword">new</span> File(filePath,newFileName);</span><br><span class="line">        <span class="comment">//把本地文件上传到已经封装好的文件位置的全路径就是上面的targetFile</span></span><br><span class="line">        file.transferTo(targetFile);</span><br><span class="line">        product.setPimage(newFileName);<span class="comment">//文件名保存到实体类对应属性上</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 保存商品</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        productService.save(product);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/list.do"</span>; <span class="comment">//重定向到查询</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-index-jsp"><a href="#9-index-jsp" class="headerlink" title="9. index.jsp"></a>9. index.jsp</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"addProduct.do"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    图片：&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="10-list-jsp"><a href="#10-list-jsp" class="headerlink" title="10. list.jsp"></a>10. list.jsp</h3><p>这里有一个地方需要注意：此处填选的是tomcat中加入部署的文件夹时起的名字</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191020122600.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191020121117.png" class="lozad"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span>/&gt;</span><br><span class="line">    &lt;script src="https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">    &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">        #images&#123;</span><br><span class="line">            width: <span class="number">50</span>px;</span><br><span class="line">            height: <span class="number">50</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"table table-bordered table-hover"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;图片&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"product"</span> &gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;$&#123;product.pid &#125;&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;product.pimage !=null &#125;"</span>&gt;</span><br><span class="line">                &lt;img id=<span class="string">"images"</span> alt=<span class="string">""</span> src=<span class="string">"/upload/$&#123;product.pimage &#125;"</span>&gt;</span><br><span class="line">            &lt;/c:if&gt; &lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="5-测试结果"><a href="#5-测试结果" class="headerlink" title="5. 测试结果"></a>5. 测试结果</h2><p>启动tomcat，开始测试</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191020120515.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191020120243.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191020120336.png" class="lozad"></p><p><strong>至此，大功告成！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 最近做一个SSM项目需要用到图片上传，在网上找了很多教程，配置了几遍，终于弄出来了，在此记录一贴留念。&lt;/p&gt;
&lt;p&gt;本文使用的工具是idea，数据库是Mysql，框架是SSM。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-项目结构&quot;
      
    
    </summary>
    
      <category term="SSM" scheme="https://cometorbityh.github.io/categories/SSM/"/>
    
    
      <category term="SSM文件上传" scheme="https://cometorbityh.github.io/tags/SSM%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cometorbityh.github.io/2019/10/17/JAVA%E2%80%94%E2%80%94%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://cometorbityh.github.io/2019/10/17/JAVA——多线程/</id>
    <published>2019-10-17T12:04:38.212Z</published>
    <updated>2019-10-18T07:40:29.836Z</updated>
    
    <content type="html"><![CDATA[<p>2</p><h1 id="1-概念理解"><a href="#1-概念理解" class="headerlink" title="1. 概念理解"></a>1. 概念理解</h1><h2 id="1-1-并发与并行"><a href="#1-1-并发与并行" class="headerlink" title="1.1. 并发与并行"></a>1.1. 并发与并行</h2><h2 id="1-2-程序，进程，线程"><a href="#1-2-程序，进程，线程" class="headerlink" title="1.2. 程序，进程，线程"></a>1.2. 程序，进程，线程</h2><h2 id="1-3-线程调度，分时调度"><a href="#1-3-线程调度，分时调度" class="headerlink" title="1.3. 线程调度，分时调度"></a>1.3. 线程调度，分时调度</h2><table><thead><tr><th></th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>并发</td><td>多个事件交替执行(单核)，效率低</td><td>一个人同时吃2个包子，一个包子吃一口</td></tr><tr><td>并行</td><td>多个事件同时执行(多核)，效率高</td><td>两个人吃2个包子</td></tr><tr><td></td><td></td><td></td></tr><tr><td>程序</td><td></td><td>QQ程序</td></tr><tr><td>进程</td><td>运行中的(进入到内存中)应用程序</td><td>开启1个QQ或多个QQ，这些QQ叫进程</td></tr><tr><td>线程</td><td>是进程的一个执行单元。进程中的操作</td><td>360可以同时清理垃圾，扫描病毒，这些操作都叫线程</td></tr><tr><td>多线程</td><td>效率高，线程之间互不影响</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td><strong>线程调度（2种）</strong></td><td></td><td></td></tr><tr><td>分时调度</td><td>每个线程占用的时间相等</td><td></td></tr><tr><td>抢占式调度(java采用的)</td><td>优先级越高的线程被执行的几率就大</td><td></td></tr></tbody></table><p> 一个程序至少包含1个进程，一个进程可以包含多个线程 </p><h1 id="2-多线程的创建方式"><a href="#2-多线程的创建方式" class="headerlink" title="2. 多线程的创建方式"></a>2. 多线程的创建方式</h1><p> java中的程序只有1个线程，从main方法开始执行，即主线程；</p><p>当程序之间有一个异常时，后面的程序都不会执行到，因此我们需要引入多线程来执行异常后的代码。 </p><h2 id="2-1-创建Thread的子类"><a href="#2-1-创建Thread的子类" class="headerlink" title="2.1. 创建Thread的子类"></a>2.1. 创建Thread的子类</h2><h2 id="2-2-实现Runnable接口"><a href="#2-2-实现Runnable接口" class="headerlink" title="2.2.实现Runnable接口"></a>2.2.实现Runnable接口</h2><ul><li><p>创建一个Runnable的实现类</p></li><li><p>在实现类中重写Runnable接口的run方法，设置线程任务</p></li><li><p>创建一个Runnable接口的实现类对象</p></li><li><p>创建Thread类对象，构造方法中传递Runnable接口的实现类对象</p></li><li><p>调用Thread类中的start方法，开启新的线程执行run方法</p></li></ul><h2 id="2-3-Thread和Runnable的区别"><a href="#2-3-Thread和Runnable的区别" class="headerlink" title="2.3. Thread和Runnable的区别"></a>2.3. Thread和Runnable的区别</h2><p>一个类继承Thread类，则不适合资源共享</p><p>一个类实现Runnable接口，很容易就可实现资源共享</p><p>实现Runnable接口创建多线程程序的好处：</p><ul><li>适合多个相同的程序代码的线程去<code>共享</code>同一个资源</li><li>可<code>避免Java的单继承</code>的局限性（实现Runnable接口还可以实现其他类或接口）</li><li>增加程序的健壮性，实现<code>解耦</code>操作，代码可被多个线程共享，代码和线程独立<ul><li>实现Runnable，把设置线程任务和开启新线程进行分离（解耦）</li><li>实现类重写了run方法：用来设置线程任务</li><li>创建Thread类对象，调用start方法，用来开启新线程</li></ul></li><li>线程池只能放入实现Runnable或Callable类的线程，而不能直接放入继承Thread的类</li></ul><p>在Java中，程序每次运行至少启动2个线程，一个main线程。一个是垃圾收集线程，</p><p>因为每当使用Java命令执行一个类时，实际上都会启动一个JVM，每一个JVM其实就是在操作系统中启动了一个进程。</p><h2 id="2-4-用匿名内部类来创建线程"><a href="#2-4-用匿名内部类来创建线程" class="headerlink" title="2.4. 用匿名内部类来创建线程"></a>2.4. 用匿名内部类来创建线程</h2><p>匿名：没有名字</p><p>内部类：写在其他类内部的类</p><p>匿名内部类的作用：简化代码</p><ul><li>把【子类继承父类，重写父类的方法，创建子类对象】合成一步完成</li><li>把【实现类实现类接口，重写接口中的方法。创建实现类对象】合成异步完成</li></ul><p>匿名内部类的最终产物：子类/实现类对象，而这个类没有名字</p><p>匿名内部类的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类/接口()&#123;</span><br><span class="line"><span class="comment">//重写父类/接口的方法</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>匿名内部类创建线程的步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.ThreadDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassThread</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------------------------------*/</span></span><br><span class="line"><span class="comment">//new 父类Thread</span></span><br><span class="line"><span class="comment">//new MyThread().start();</span></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="comment">//重写run方法，设置线程任务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;Thread"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------------------------------*/</span></span><br><span class="line"><span class="comment">//new 接口Runnable</span></span><br><span class="line"><span class="comment">//Runnable r = new RunnableTest(); 创建Runnable接口的实现类对象</span></span><br><span class="line">Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;Runnable"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建Thread类对象，构造方法床底Runnable接口的实现类对象</span></span><br><span class="line"><span class="comment">//调用start方法开启线程</span></span><br><span class="line"><span class="keyword">new</span> Thread(r).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------------------------------*/</span></span><br><span class="line"><span class="comment">//简化Runnable</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;Runnable01"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191017222321.png" class="lozad"></p><h1 id="3-线程安全"><a href="#3-线程安全" class="headerlink" title="3. 线程安全"></a>3. 线程安全</h1><h2 id="3-1-线程安全问题"><a href="#3-1-线程安全问题" class="headerlink" title="3.1. 线程安全问题"></a>3.1. 线程安全问题</h2><p>当多个线程访问共享的资源时，这些线程会抢占cpu的执行权，就会产生线程安全问题。</p><p>例如3个售票处同时售卖100张票，但会卖到同一张票，而一张票只能卖给一个人，此时的售票员多尴尬啊。</p><p>以下程序中不仅出现重复卖票，还出现不存在的票。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.ThreadDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义票数，这是一个共享的资源</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟售票</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+ticket+<span class="string">"张票已出售！"</span>);</span><br><span class="line">ticket--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.ThreadDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSecurityDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建实现Runnable接口的实现类对象</span></span><br><span class="line">RunnableImpl run = <span class="keyword">new</span> RunnableImpl();</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义Thread类的子类对象，其构造方法的参数为实现Runnable接口的实现类对象</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(run);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启多线程</span></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/1571324287236.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191017230417.png" class="lozad"></p><h2 id="3-2-解决线程安全问题（3种方法）"><a href="#3-2-解决线程安全问题（3种方法）" class="headerlink" title="3.2. 解决线程安全问题（3种方法）"></a>3.2. 解决线程安全问题（3种方法）</h2><h3 id="（1）同步代码块"><a href="#（1）同步代码块" class="headerlink" title="（1）同步代码块"></a>（1）同步代码块</h3><p><code>synchronized</code>关键字可用于方法中的某个区块中，表示只对该区块的资源进行互斥访问。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁对象)&#123;</span><br><span class="line">    可能会出现线程安全问题的代码（共享数据的代码）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>锁对象：锁对象可以使用任意的对象，多个线程使用的锁对象必须使同一个，</p><p>锁对象的作用：把同步代码块锁住，只允许一个线程在同步代码块中执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.ThreadDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个票数，这是一个共享的资源</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义锁对象</span></span><br><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟售票</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步代码块</span></span><br><span class="line"><span class="keyword">synchronized</span>(obj) &#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//提高安全问题出现的概率，使程序睡眠</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//售票</span></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+ticket+<span class="string">"张票已出售！"</span>);</span><br><span class="line">ticket--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191017234134.png" class="lozad"></p><h3 id="（2）同步方法"><a href="#（2）同步方法" class="headerlink" title="（2）同步方法"></a>（2）同步方法</h3><p><code>synchronized</code>关键字修饰的方法，当某个线程执行该方法时，锁住代码，其他线程只能在方法外等候。</p><table><thead><tr><th>同步方法</th><th>格式</th><th>锁对象</th><th>原因</th></tr></thead><tbody><tr><td>非静态同步方法</td><td>修饰符 synchronized 返回值类型 方法名(参数列表){<br>    //需要同步的代码<br>}</td><td>this</td><td></td></tr><tr><td>静态同步方法</td><td>修饰符  static synchronized 返回值类型 方法名(参数列表){<br>    //需要同步的代码<br>}</td><td>本类的class文件对象<br></td><td>因为this是创建对象后产生的，而静态方法优先于对象，因此静态同步方法的锁对象是本类的class文件对象</td></tr></tbody></table><h4 id="非静态同步方法"><a href="#非静态同步方法" class="headerlink" title="非静态同步方法"></a>非静态同步方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.ThreadDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个票数，这是一个共享的资源</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义锁对象</span></span><br><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟售票</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"this___"</span>+<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">saleTicket();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">saleTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//提高安全问题出现的概率，使程序睡眠</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//售票</span></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+ticket+<span class="string">"张票已出售！"</span>);</span><br><span class="line">ticket--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.ThreadDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSecurityDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建实现Runnable接口的实现类对象</span></span><br><span class="line">RunnableImpl run = <span class="keyword">new</span> RunnableImpl();</span><br><span class="line">System.out.println(<span class="string">"run___"</span>+run);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义Thread类的子类对象，其构造方法的参数为实现Runnable接口的实现类对象</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(run);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启多线程</span></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非静态同步方法的锁对象是对应的Runnable接口的实现类对象，即this</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191018000622.png" class="lozad"></p><h4 id="静态同步方法"><a href="#静态同步方法" class="headerlink" title="静态同步方法"></a>静态同步方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.ThreadDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个票数，这是一个共享的资源</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义锁对象</span></span><br><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟售票</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"this___"</span>+<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">saleTicket();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">saleTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//提高安全问题出现的概率，使程序睡眠</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//售票</span></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+ticket+<span class="string">"张票已出售！"</span>);</span><br><span class="line">ticket--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191018143055.png" class="lozad"></p><h3 id="（3）Lock锁"><a href="#（3）Lock锁" class="headerlink" title="（3）Lock锁"></a>（3）Lock锁</h3><p>java.util.concurrent/locks.Lock接口</p><p>Lock实现提供了比使用synchronized方法和语句可获得的更广泛的锁定操作</p><p>Lock接口中的方法:</p><ul><li>void lock()————————获取锁</li><li>void unlock()————————释放锁</li></ul><p>Lock接口有个实现类：</p><p>java.util.concurrent.locks.ReentrantLock</p><p>使用步骤：</p><ul><li>在成员位置创建ReentrantLock对象</li><li>在可能会出现安全问题的代码前调用Lock接口的lock方法来获取锁</li><li>在可能会出现安全问题的代码后调用Lock接口的unlock方法来释放锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.ThreadDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个票数，这是一个共享的资源</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*1.创建ReentrantLock对象*/</span></span><br><span class="line">Lock l =<span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟售票</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"this___"</span>+<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2. 在线程安全代码之前获取锁*/</span></span><br><span class="line">l.lock();</span><br><span class="line"><span class="keyword">if</span>(ticket&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//睡眠，相当于冷却</span></span><br><span class="line">Thread.sleep(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//售票</span></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+ticket+<span class="string">"张票已出售！"</span>);</span><br><span class="line">ticket--;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">/*3. 在线程安全代码之后释放锁*/</span></span><br><span class="line">l.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191018144701.png" class="lozad"></p><h1 id="4-线程状态"><a href="#4-线程状态" class="headerlink" title="4. 线程状态"></a>4. 线程状态</h1><p>Thread的内部类State描述了线程的6种状态</p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191018145256.png" class="lozad"></p><h2 id="4-1-TimedWaiting（计时等待）"><a href="#4-1-TimedWaiting（计时等待）" class="headerlink" title="4.1. TimedWaiting（计时等待）"></a>4.1. TimedWaiting（计时等待）</h2><p>调用sleep()，使线程进入睡眠状态；</p><p>调用wait(long m)，等待毫秒值结束后，若没有被notify()唤醒，则自动醒来，线程进入运行状态或阻塞状态</p><h2 id="4-2-BLOCKED（锁阻塞）"><a href="#4-2-BLOCKED（锁阻塞）" class="headerlink" title="4.2. BLOCKED（锁阻塞）"></a>4.2. BLOCKED（锁阻塞）</h2><p>当线程抢到cpu执行权时，进入运行状态。未强抢到执行权时，进入阻塞状态</p><h2 id="4-3-Waiting（无限等待）"><a href="#4-3-Waiting（无限等待）" class="headerlink" title="4.3. Waiting（无限等待）"></a>4.3. Waiting（无限等待）</h2><p>线程进入等待状态，需要等待被唤醒。</p><p>wait()线程等待，需要notify唤醒</p><p>wait(long m)，等待毫秒值结束后，若没有被notify()唤醒，则自动醒来，线程进入运行状态或阻塞状态</p><p>notify()唤醒在该对象监视器等待的单个线程</p><p>notifyAll()唤醒在该对象监视器等待的所有线程</p><h2 id="4-4-其他"><a href="#4-4-其他" class="headerlink" title="4.4. 其他"></a>4.4. 其他</h2><h1 id="5-等待唤醒机制"><a href="#5-等待唤醒机制" class="headerlink" title="5. 等待唤醒机制"></a>5. 等待唤醒机制</h1><p>我们知道。多个线程并发执行时，cpu是随机切换线程的，当我们需要多个线程共同执行一项任务时，必然是需要有规律的执行，只做包子不吃或者只吃包子不做都是不符合规律的，因此我们需要他们之间协调通信来完成任务。</p><p><img alt="1571383425992" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571383425992.png" class="lozad"></p><p><img alt="1571383705241" data-src="C:%5CUsers%5CAdministrator.RG4-44%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571383705241.png" class="lozad"></p><p>什么是等待唤醒机制？线程之间的通信</p><p>为了解决线程之间的<code>通信</code>问题，为了有效利用共享的资源</p><p>用到的方法：</p><ul><li>wait()：线程进入等待状态，进入对象的waiting set中，不再占用cpu资源和竞争锁。需要得到<code>通知notify</code>才能重新进入到调度队列中</li><li>notify()：释放对象的waiting set中等待时间最长的线程</li><li>notifyAll()：释放对象的waiting set中的全部线程</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2&lt;/p&gt;
&lt;h1 id=&quot;1-概念理解&quot;&gt;&lt;a href=&quot;#1-概念理解&quot; class=&quot;headerlink&quot; title=&quot;1. 概念理解&quot;&gt;&lt;/a&gt;1. 概念理解&lt;/h1&gt;&lt;h2 id=&quot;1-1-并发与并行&quot;&gt;&lt;a href=&quot;#1-1-并发与并行&quot; class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA——集合</title>
    <link href="https://cometorbityh.github.io/2019/10/16/JAVA%E2%80%94%E2%80%94%E9%9B%86%E5%90%88/"/>
    <id>https://cometorbityh.github.io/2019/10/16/JAVA——集合/</id>
    <published>2019-10-16T11:22:04.000Z</published>
    <updated>2019-10-23T06:59:00.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Collection"><a href="#1-Collection" class="headerlink" title="1.Collection"></a>1.Collection</h1><p>Collection的常用方法</p><table><thead><tr><th>操作对象</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>单个容器</td><td>boolean add(Object element)</td><td>增加元素到容器中</td></tr><tr><td></td><td>boolean remove(Object element)</td><td>从容器中移除元素</td></tr><tr><td></td><td>boolean contains(Object element)</td><td>容器中是否包含该元素</td></tr><tr><td></td><td>int size()</td><td>容器中元素的数量</td></tr><tr><td></td><td>boolean isEmpty()</td><td>容器中是否为空</td></tr><tr><td></td><td>void clear()</td><td>清空容器中所有元素</td></tr><tr><td>迭代器</td><td>Interator</td><td>提供了统一的遍历容器的方式</td></tr><tr><td>多个容器</td><td>boolean addAll(Collection c)</td><td>将容器C的所有元素添加到本容器中</td></tr><tr><td></td><td>boolean removeAll(Collection c)</td><td>移除本容器和C容器中都包含的元素</td></tr><tr><td></td><td>boolean containsAll(Collection c)</td><td>本容器中是否包含c容器中的所有元素</td></tr><tr><td></td><td>boolean retainAll(Collection c)</td><td>留下本容器和容器C都包含的元素，移除本容器和C容器中非交集的元素</td></tr><tr><td></td><td>Object[] toArray()</td><td>转化为Object数组</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.orbit.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个容器</span></span><br><span class="line">Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">c.add(<span class="string">"张三"</span>);</span><br><span class="line">c.add(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(c.toString());</span><br><span class="line">System.out.println(<span class="string">"当前容器是否为空 ==&gt; "</span>+c.isEmpty());</span><br><span class="line">System.out.println(<span class="string">"当前容器元素个数 ==&gt; "</span>+c.size());</span><br><span class="line">System.out.println(<span class="string">"当前容器是否包含李四 ==&gt; "</span>+c.contains(<span class="string">"李四"</span>));</span><br><span class="line">System.out.println(<span class="string">"转为Object数组 ==&gt; "</span>+c.toArray().toString());</span><br><span class="line">System.out.println(<span class="string">"移除李四"</span>);</span><br><span class="line">c.remove(<span class="string">"李四"</span>);</span><br><span class="line">System.out.println(c.toString());</span><br><span class="line">System.out.println(<span class="string">"清空"</span>);</span><br><span class="line">c.clear();</span><br><span class="line">System.out.println(<span class="string">"当前容器元素个数 ==&gt; "</span>+c.size());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191016195138.png" class="lozad"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.orbit.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个容器</span></span><br><span class="line">List&lt;String&gt; list01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list01.add(<span class="string">"aa"</span>);</span><br><span class="line">list01.add(<span class="string">"bb"</span>);</span><br><span class="line">list01.add(<span class="string">"cc"</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list02.add(<span class="string">"aa"</span>);</span><br><span class="line">list02.add(<span class="string">"dd"</span>);</span><br><span class="line">list02.add(<span class="string">"ee"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list01);</span><br><span class="line">System.out.println(list02);</span><br><span class="line"></span><br><span class="line">list01.addAll(list02);<span class="comment">//list02添加到list01（可重复）</span></span><br><span class="line">System.out.println(list01);</span><br><span class="line"></span><br><span class="line">System.out.println(list01.containsAll(list02));<span class="comment">//list01是否包含list02</span></span><br><span class="line"></span><br><span class="line">list01.removeAll(list02);<span class="comment">//删除交集元素</span></span><br><span class="line">System.out.println(list01);</span><br><span class="line"></span><br><span class="line">list01.retainAll(list02);<span class="comment">//删除非交集元素</span></span><br><span class="line">System.out.println(list01);</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191016200232.png" class="lozad"></p><h1 id="2-List接口"><a href="#2-List接口" class="headerlink" title="2.List接口"></a>2.List接口</h1><p>List是有序的、可重复的容器。</p><ul><li><p>有序：每个元素都有索引，可通过索引访问元素</p></li><li><p>可重复：允许加入重复元素</p></li></ul><p>List接口常用的实现类有3个：ArrayList，LinkedList，Vector</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.orbit.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个容器</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"aa"</span>);</span><br><span class="line">list.add(<span class="string">"bb"</span>);</span><br><span class="line">list.add(<span class="string">"cc"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list.add(<span class="string">"dd"</span>);<span class="comment">//在最后增加元素</span></span><br><span class="line">System.out.println(list);</span><br><span class="line">list.add(<span class="number">2</span>, <span class="string">"AA"</span>);<span class="comment">//在索引处插入元素</span></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line">list.remove(<span class="number">2</span>);<span class="comment">//移除指定索引的元素</span></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line">list.set(<span class="number">2</span>, <span class="string">"aa"</span>);<span class="comment">//覆盖指定索引的元素</span></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line">System.out.println(list.get(<span class="number">2</span>));<span class="comment">//获取指定索引的元素</span></span><br><span class="line"></span><br><span class="line">System.out.println(list.indexOf(<span class="string">"aa"</span>));<span class="comment">//获取该元素第一次出现的索引位置。不存在则返回-1</span></span><br><span class="line">System.out.println(list.indexOf(<span class="string">"bc"</span>));</span><br><span class="line">System.out.println(list.lastIndexOf(<span class="string">"aa"</span>));<span class="comment">//获取该元素最后一次出现的索引位置。不存在则返回-1</span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-ArrayList（常用）"><a href="#2-1-ArrayList（常用）" class="headerlink" title="2.1 ArrayList（常用）"></a>2.1 ArrayList（常用）</h2><p>ArrayList底层是用<code>数组</code>实现的存储。 数组占用空间连续</p><p>特点：查询效率高，增删效率低，线程不安全。</p><p><strong>数组长度有限，但ArrayList长度不限，可存放任意数量的对象。它是如何实现的？</strong></p><ul><li>扩容。数组的默认长度为10，当长度满时，创建一个新的长度为原来的1.5倍（原长度+原长度右移1位）长度的数组，再将旧数组的元素复制到新数组中。</li></ul><h2 id="2-2-LinkedList"><a href="#2-2-LinkedList" class="headerlink" title="2.2 LinkedList"></a>2.2 LinkedList</h2><p>LinkedList底层时采用<code>双向链表</code>实现的存储。链表占用空间不连续 </p><p>特点：查询效率低，增删效率高，线程不安全</p><p>双向链表：每个数据节点（node）都有2个指针，分别指向前一个节点和后一个节点。</p><ul><li>上节点地址 || 元素数据 || 下节点地址</li></ul><h2 id="2-3-Vector"><a href="#2-3-Vector" class="headerlink" title="2.3 Vector"></a>2.3 Vector</h2><p>Vector底层是采用<code>数组</code>实现的List，相关方法都增加了同步检查（synchronized）</p><p>特点：效率低（同步检查耗费时间），线程安全</p><h1 id="3-Map接口"><a href="#3-Map接口" class="headerlink" title="3. Map接口"></a>3. Map接口</h1><p>显示生活中，常需要成对存储某些信息，比如一个手机号对应一个微信号，这就是成对存储关系，</p><p>在Java中，这对数据称为<code>键值对（key-value）</code>，</p><p>Map就是用来存储键值对的，通过键来获取值，因此键对象是唯一的不可重复。</p><p>若重复，则新的键值对会覆盖旧的键值对 。</p><p>Map接口的实现类：<code>HashMap，TreeMap，HashTable，Properties</code></p><table><thead><tr><th>操作对象</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>单个Map</td><td>Object put(Object key,Object value)</td><td>存放键值对</td></tr><tr><td></td><td>Object get(Object key)</td><td>通过键对象查找得到值对象</td></tr><tr><td></td><td>Object remove(Object key)</td><td>删除键对象对应的值对象</td></tr><tr><td></td><td>boolean containsKey(Object key)</td><td>Map容器中是否包含键对象对应的键值对</td></tr><tr><td></td><td>boolean containsValue(Object value)</td><td>Map容器中是否包含值对象对应的键值对</td></tr><tr><td></td><td>int size()</td><td>键值对的数量</td></tr><tr><td></td><td>boolean isEmpty()</td><td>判断Map是否为空</td></tr><tr><td></td><td>void clear()</td><td>清空所有键值对</td></tr><tr><td>多个Map</td><td>void putAll(Map m)</td><td>将m容器中的所有键值对存放到本map对象</td></tr></tbody></table><h2 id="3-1-HashMap类"><a href="#3-1-HashMap类" class="headerlink" title="3.1  HashMap类"></a>3.1  HashMap类</h2><p>HashMap底层实现使用了<code>哈希表</code>，这是一种重要的数据结构。</p><ul><li><p>哈希表的基本结构是<code>&quot;数组＋单向链表&quot;</code>。即结合了两者的优点，查询快，增删效率也快。</p></li><li><p>存储方式：将很多链保存在数组中</p></li><li><p>约定数组的长度必须是2的整数次幂，这样采用位算法可以实现取余的效果。</p></li><li><p>这些键值对越散越好，便于查询，因此为了得到更好的散列效果，jdk对hashcode还进行了2次<code>散列</code>处理，即移位操作，核心目标是为了分布更散更均匀</p></li></ul><h3 id="1-hashmap如何存储数据"><a href="#1-hashmap如何存储数据" class="headerlink" title="(1). hashmap如何存储数据"></a>(1). hashmap如何存储数据</h3><h4 id="①-put存储数据过程"><a href="#①-put存储数据过程" class="headerlink" title="①. put存储数据过程"></a>①. put存储数据过程</h4><p><strong>核心：产生hash值，该值用来对应数组的存储位置</strong><br>第一步，调用方法 key对象.hashcode() 生成 哈希码，注意<strong>整形数的哈希码是它本身</strong><br>第二步，调用hashMap的hash()方法 计算出哈希值，hash值=hashcode＆(数组长度-1)，哈希值的范围[0，table数组的length-1]，即数组的索引位置<br>第三步，结合 hash值，key对象，value对象，next 四个数据生成entry对象，即链<br>第四步，将这个entry对象存储到数组索引位置，当有多个entry对象的hash值一样时，前一个entry对象的next即指向后一个entry对象。 </p><h4 id="②-get获取数据过程"><a href="#②-get获取数据过程" class="headerlink" title="②. get获取数据过程"></a>②. get获取数据过程</h4><h2 id="3-2-HashTable类——线程同步的HashMap类"><a href="#3-2-HashTable类——线程同步的HashMap类" class="headerlink" title="3.2 HashTable类——线程同步的HashMap类"></a>3.2 HashTable类——线程同步的HashMap类</h2><p>底层和用法与hashmap几乎一样，只是hashtable的方法添加了synchronized关键字，确保线程同步检查，效率较低。<br>区别<br> hashmap线程不安全，效率高，允许key或value为null<br>treemap线程安全，效率低，不允许key或value为null</p><h2 id="3-3-TreeMap类"><a href="#3-3-TreeMap类" class="headerlink" title="3.3 TreeMap类"></a>3.3 TreeMap类</h2><p>treemap是红黑二叉树的典型实现<br>源码中，root用来存储整个树的根节点，其类型为entry，<br>entr底层源码中，存储了本身数据，左节点，右节点，父节点，节点颜色。<br>treemap和hashmap实现了同样的接口map,因此用法对于调用者来说无区别，hashmap的效率高于treemap，在需要排序的map时才选用treemap</p><p>#4. set接口<br>继承自collection接口，有collection所有的方法，无新增方法</p><p>特点：无序，不可重复，</p><ul><li><p>五序指set中元素无索引，只能遍历查找，</p></li><li><p>不可重复指不允许加入重复的元素。即新元素与set中的元素通过equal()方法对比为true，则不可加入。因此set中也只能放一个null元素。</p></li></ul><p>(其实hashset的元素底层是map的key，因此不可重复，至于value只是定义了一个恒定的Object对象)</p><p>实现类：<code>HashSet,TreeSet</code></p><h2 id="4-1-HashSet-常用"><a href="#4-1-HashSet-常用" class="headerlink" title="4.1 HashSet(常用)"></a>4.1 HashSet(常用)</h2><h2 id="4-2-TreeSet"><a href="#4-2-TreeSet" class="headerlink" title="4.2 TreeSet"></a>4.2 TreeSet</h2><p>底层用treemap实现，内部维持了一个简化版的treemap.与hashset一样，通过key来存储set的元素，value是一个默认的Object对象。treeset需要对存储的元素进行排序，因此对应类需要实现Comparable接口，这样才能根据compareTo()方法比较对象之间的大小进行内部排序。</p><p>#5. Iterator迭代器的使用<br>提供了统一的遍历容器的方式。</p><h1 id="6-Collections工具类"><a href="#6-Collections工具类" class="headerlink" title="6. Collections工具类"></a>6. Collections工具类</h1><p>提供了对set，list，map，进行排序填充，查找元素的辅助方法，注意Collection是接口，Collections是工具类<br>sort(list)按升序排序<br>shuffle(list)随机排序<br>reverse(list)倒序排序<br>int binarySearch(list，Object)二分查找法查找特定对象 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Collection&quot;&gt;&lt;a href=&quot;#1-Collection&quot; class=&quot;headerlink&quot; title=&quot;1.Collection&quot;&gt;&lt;/a&gt;1.Collection&lt;/h1&gt;&lt;p&gt;Collection的常用方法&lt;/p&gt;
&lt;table&gt;
&lt;t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SSM整合实例_05_删除人员</title>
    <link href="https://cometorbityh.github.io/2019/10/10/SSM%E6%95%B4%E5%90%88%E5%AE%9E%E4%BE%8B-05-%E5%88%A0%E9%99%A4%E4%BA%BA%E5%91%98/"/>
    <id>https://cometorbityh.github.io/2019/10/10/SSM整合实例-05-删除人员/</id>
    <published>2019-10-10T08:46:39.000Z</published>
    <updated>2019-10-10T08:47:01.723Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="SSM" scheme="https://cometorbityh.github.io/categories/SSM/"/>
    
    
      <category term="SSM" scheme="https://cometorbityh.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM整合实例_04_修改人员</title>
    <link href="https://cometorbityh.github.io/2019/10/10/SSM%E6%95%B4%E5%90%88%E5%AE%9E%E4%BE%8B-04-%E4%BF%AE%E6%94%B9%E4%BA%BA%E5%91%98/"/>
    <id>https://cometorbityh.github.io/2019/10/10/SSM整合实例-04-修改人员/</id>
    <published>2019-10-10T08:46:28.000Z</published>
    <updated>2019-10-10T12:38:18.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h1><p>1.点击编辑，弹出修改的模态框，并显示用户信息</p><p>2.点击更新，完成用户修改</p><h1 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h1><p>单个：url:/emp/{id} DELETE</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;修改操作&quot;&gt;&lt;a href=&quot;#修改操作&quot; class=&quot;headerlink&quot; title=&quot;修改操作&quot;&gt;&lt;/a&gt;修改操作&lt;/h1&gt;&lt;p&gt;1.点击编辑，弹出修改的模态框，并显示用户信息&lt;/p&gt;
&lt;p&gt;2.点击更新，完成用户修改&lt;/p&gt;
&lt;h1 id=&quot;删除操作&quot;
      
    
    </summary>
    
      <category term="SSM" scheme="https://cometorbityh.github.io/categories/SSM/"/>
    
    
      <category term="SSM" scheme="https://cometorbityh.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM整合实例_03_增加人员</title>
    <link href="https://cometorbityh.github.io/2019/10/08/SSM%E6%95%B4%E5%90%88%E5%AE%9E%E4%BE%8B-03-%E5%A2%9E%E5%8A%A0%E4%BA%BA%E5%91%98/"/>
    <id>https://cometorbityh.github.io/2019/10/08/SSM整合实例-03-增加人员/</id>
    <published>2019-10-08T14:14:41.000Z</published>
    <updated>2019-10-10T08:45:16.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新增操作"><a href="#新增操作" class="headerlink" title="新增操作"></a>新增操作</h1><table><thead><tr><th></th><th>需求：</th><th>思路：</th></tr></thead><tbody><tr><td></td><td>点击“新增”按钮时弹出对话框，该对话框的功能为增加人员，需要获取到部门的数据到下拉框中</td><td>为“新增”绑定点击事件，包括：<br><br>　<strong>1. 先清除表单数据</strong><br>　<strong>2. 调用获取部门数据的方法</strong>：<br>　　　获取部门数据：发送ajax请求到处理器相应方法，收到返回结果，该返回结果是去数据库查询的部门列表<br>　　　部门数据放到下拉框中：在ajax中，将success的result进行遍历，并拼接到<option>标签中<br>　<strong>3. 弹出模态框</strong>：利用bootstrap的<code>$(id).modal({backdrop:&quot;static&quot;});</code></option></td></tr><tr><td></td><td>对用户名进行ajax“重复”检验</td><td>为用户名输入框的change绑定事件：<br>获取到输入框的值；<br>发送ajax请求（发送用户名数据）到处理器校验用户名是否可用，得到返回值，返回值是一个状态码；<br>判断该状态码：<br>状态码为可用状态时，<strong>调用显示校验提示的方法</strong>，并给保存按钮添加一个自定义属性，属性值为success（<code>$(&quot;按钮&quot;).attr(&quot;属性&quot;，“属性值”)</code>）<br>状态码为不可用状态时，<strong>调用显示校验提示的方法</strong>，显示提示信息，并给保存按钮添加一个自定义属性，属性值为error（<code>$(&quot;按钮&quot;).attr(&quot;属性&quot;，“属性值”)</code>），点击无效</td></tr><tr><td></td><td>点击“保存”按钮：<br>对要提交给服务器的数据进行校验<br>此时自动调转到包含该员工数据的那一页</td><td>为提示框的添加按钮绑定点击事件，包括：<br>　<strong>1. 调用数据校验的方法。若该方法返回值为false,return false;该方法具体如下:</strong><br>　　　获取对应文本框中输入的值（<code>var value=$(&quot;#文本框id&quot;).val()</code>）；<br>　　　定义一个正则表达式（<code>var regValue=xxxxx</code>）；<br>　　　使用正则表达式对该值进行校验（<code>regValue.test(value)</code>），判断该语句的值；<br>　　　　是false则<em>调用显示校验提示的方法</em>并return false；<br>　　　　是true继续校验下一个；<br>　　　　以此类推，全部检验完毕，return true<br>　　<strong>1-1.</strong> <strong>调用显示校验提示的方法</strong>：<br>　　　　　先在每一个文本框下添加一个<code>span</code>标签，用来输出提示信息<br>　　　　　清空当前元素的校验状态<br>　　　　　判断输入框的格式<br>　　　　　　　如果输入框格式有误，就在输入框的父标签（div）的class添加<code>has error</code>字段（bootstrap语法，该语法使文本框变红），在输入框的下一个标签（span）添加文本，文本为错误提示信息。<br>　　　　　　　如果输入框格式正确，就在输入框的父标签（div）的class添加<code>has success</code>字段（bootstrap语法，该语法使文本框变绿）<br>　　　　　该方法有相同之处，可抽取3个参数（输入框id，输入框格式状态，提示信息），不再详细说明。<br>　　<strong>2. 判断添加按钮的自定义属性</strong>（在上一个需求）是否为error，若是则return false;<br>　　<strong>3. 保存新增的员工数据</strong>：页面发送ajax请求（将表单数据序列化）到处理器的新增人员的方法，完成数据库数据的添加<br>　　<strong>4. 跳转到新员工的页面</strong>：调用to_page();，定义一个变量，赋值为总记录数，to_page(变量)即可跳转</td></tr><tr><td></td><td>重要数据，对用户进行后端校验（JSR303），唯一约束</td><td>1. 导入jar包：hibernate-validator（JSR303数据校验支持）<br>2. 在处理器的保存人员方法中添加检验，并返回一个参数给请求页面的ajax解析</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;新增操作&quot;&gt;&lt;a href=&quot;#新增操作&quot; class=&quot;headerlink&quot; title=&quot;新增操作&quot;&gt;&lt;/a&gt;新增操作&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;需求：&lt;/th&gt;
&lt;th&gt;思路：&lt;/th&gt;
&lt;/tr&gt;
&lt;/
      
    
    </summary>
    
      <category term="SSM" scheme="https://cometorbityh.github.io/categories/SSM/"/>
    
    
      <category term="SSM" scheme="https://cometorbityh.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM整合实例_02_主页设计</title>
    <link href="https://cometorbityh.github.io/2019/10/08/SSM%E6%95%B4%E5%90%88%E5%AE%9E%E4%BE%8B_02_%E4%B8%BB%E9%A1%B5%E8%AE%BE%E8%AE%A1/"/>
    <id>https://cometorbityh.github.io/2019/10/08/SSM整合实例_02_主页设计/</id>
    <published>2019-10-08T14:08:54.000Z</published>
    <updated>2019-10-08T14:15:36.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h1><p>需求：获取数据库的数据到主页。</p><h2 id="1，查询步骤（model方法）"><a href="#1，查询步骤（model方法）" class="headerlink" title="1，查询步骤（model方法）"></a>1，查询步骤（model方法）</h2><ul><li>访问index.jsp</li><li>index.jsp页面发出查询人员列表的请求</li><li>对应处理器（EmployeeController.java）接收请求，查询人员数据</li><li>响应数据到index.jsp页面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有员工（分页查询）</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/emps"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmps</span><span class="params">(@RequestParam(value = <span class="string">"pn"</span>,defaultValue = <span class="string">"1"</span>)</span>Integer pn, Model model)</span>&#123;</span><br><span class="line">    <span class="comment">//查询方法前调用PageHelper.startPage方法，紧跟在这个方法后的第一个MyBatis查询方法会被进行分页。</span></span><br><span class="line">    PageHelper.startPage(pn,<span class="number">5</span>);     <span class="comment">//获取第pn页，10条内容</span></span><br><span class="line">    List&lt;Employee&gt; emps =  employeeService.getAll();</span><br><span class="line">    <span class="comment">//用PageInfo包装查询后的结果，只需将PageInfo交给页面即可</span></span><br><span class="line">    <span class="comment">//PageInfo对象包含了详细的分页信息，包括查询出的数据,连续显示的页数</span></span><br><span class="line">    PageInfo page = <span class="keyword">new</span> PageInfo(emps,<span class="number">5</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"pageInfo"</span>,page);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"utf-8"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%--引入核心标签库--%&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;员工列表&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%</span><br><span class="line">        pageContext.setAttribute(<span class="string">"APP_PATH"</span>, request.getContextPath());</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="static/js/jquery-1.12.4.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link href=<span class="string">"static/bootstrap-3.3.7-dist/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">    &lt;script src="static/bootstrap-3.3.7-dist/js/bootstrap.min.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 搭建显示页面 --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;!-- 标题 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12"</span>&gt;</span><br><span class="line">            &lt;h1&gt;SSM-CRUD&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 按钮 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4 col-md-offset-8"</span>&gt;</span><br><span class="line">            &lt;button class="btn btn-primary"&gt;新增&lt;/button&gt;</span><br><span class="line">            &lt;button class="btn btn-danger"&gt;删除&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">        &lt;!--数据--&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12"</span>&gt;</span><br><span class="line">                &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"table table-hover"</span>&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;th&gt;#&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;邮箱&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;部门&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;%--取出pageInfo属性中的list，将每一个list都命名为emp--%&gt;</span><br><span class="line">                    &lt;c:forEach items=<span class="string">"$&#123;pageInfo.list&#125;"</span> <span class="keyword">var</span>=<span class="string">"emp"</span>&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td&gt;$&#123;emp.empId&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;$&#123;emp.empName&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;$&#123;emp.gender=='M'?'男':'女'&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;$&#123;emp.email&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;$&#123;emp.department.deptName&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;</span><br><span class="line">                                &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary btn-sm"</span>&gt;</span><br><span class="line">                                    &lt;span class="glyphicon glyphicon-pencil" aria-hidden="true"&gt;&lt;/span&gt;</span><br><span class="line">                                    编辑</span><br><span class="line">                                &lt;/button&gt;</span><br><span class="line">                                &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-danger btn-sm"</span>&gt;</span><br><span class="line">                                    &lt;span class="glyphicon glyphicon-trash" aria-hidden="true"&gt;&lt;/span&gt;</span><br><span class="line">                                    删除</span><br><span class="line">                                &lt;/button&gt;</span><br><span class="line">                            &lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                    &lt;/c:forEach&gt;</span><br><span class="line">                &lt;/table&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!--分页信息--&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">            &lt;!-- 分页文字信息 --&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-6"</span>&gt;</span><br><span class="line">                当前$&#123;pageInfo.pageNum&#125;/$&#123;pageInfo.pages&#125;页，共$&#123;pageInfo.total&#125;条记录</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;!--分页条信息 --&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-6"</span>&gt;</span><br><span class="line">                &lt;nav aria-label=<span class="string">"Page navigation"</span>&gt;</span><br><span class="line">                    &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"pagination"</span>&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;%--首页即第一页--%&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href="$&#123;APP_PATH&#125;/emps?pn=1"&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;%-- 点击上一页，当前页面减<span class="number">1</span> --%&gt;</span><br><span class="line">                        &lt;%--如有上一页，就显示上一页图标，否则不显示（因为第一页时点击上一页会显示-<span class="number">1</span>，不符合规范）--%&gt;</span><br><span class="line">                        &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;pageInfo.hasPreviousPage&#125;"</span>&gt;</span><br><span class="line">                            &lt;li&gt;</span><br><span class="line">                                &lt;a href=<span class="string">"$&#123;APP_PATH&#125;/emps?pn=$&#123;pageInfo.pageNum-1&#125;"</span> aria-label=<span class="string">"Previous"</span>&gt;</span><br><span class="line">                                    &lt;span aria-hidden="true"&gt;&amp;laquo;&lt;/span&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                        &lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &lt;%--该分页条显示的页码，每一个页码都用pageNum表示，遍历出来--%&gt;</span><br><span class="line">                        &lt;c:forEach items=<span class="string">"$&#123;pageInfo.navigatepageNums&#125;"</span> <span class="keyword">var</span>=<span class="string">"page_Num"</span>&gt;</span><br><span class="line">                            &lt;%--当遍历出的这个页码和该显示页面的页码一致时,页码高亮--%&gt;</span><br><span class="line">                            &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;page_Num == pageInfo.pageNum&#125;"</span>&gt;</span><br><span class="line">                                &lt;li class="active"&gt;&lt;a href="#"&gt;$&#123;page_Num&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;/c:if&gt;</span><br><span class="line">                            &lt;%--当遍历出的这个页码和该显示页面的页码不一致时,页码不高亮，点击时可跳转至对应页面--%&gt;</span><br><span class="line">                            &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;page_Num != pageInfo.pageNum&#125;"</span>&gt;</span><br><span class="line">                                &lt;li&gt;&lt;a href="$&#123;APP_PATH&#125;/emps?pn=$&#123;page_Num&#125;"&gt;$&#123;page_Num&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;%-- 点击下一页，当前页面加<span class="number">1</span> --%&gt;</span><br><span class="line">                        &lt;%--如有下一页，就显示下一页图标，否则不显示（因为最后一页时点击下一页会显示不存在的页数，不符合规范）--%&gt;</span><br><span class="line">                        &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;pageInfo.hasNextPage&#125;"</span>&gt;</span><br><span class="line">                            &lt;li&gt;</span><br><span class="line">                                &lt;a href=<span class="string">"$&#123;APP_PATH&#125;/emps?pn=$&#123;pageInfo.pageNum+1&#125;"</span> aria-label=<span class="string">"Next"</span>&gt;</span><br><span class="line">                                    &lt;span aria-hidden="true"&gt;&amp;raquo;&lt;/span&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                        &lt;/c:if&gt;</span><br><span class="line">                        &lt;%--末页即总页码--%&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href="$&#123;APP_PATH&#125;/emps?pn=$&#123;pageInfo.pages&#125;"&gt;末页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;</span><br><span class="line">                &lt;/nav&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="2，查询步骤（ajax方法）（推荐）"><a href="#2，查询步骤（ajax方法）（推荐）" class="headerlink" title="2，查询步骤（ajax方法）（推荐）"></a>2，查询步骤（ajax方法）（推荐）</h2><ul><li>index.jsp页面发送ajax请求查询</li><li>服务器将查到的数据，以json字符串的形式返回给浏览器</li><li>浏览器收到js字符串，可使用js对json进行解析，使用js通过dom增删改来改变页面</li><li>返回json，实现客户端的无关性</li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191008163338.png" class="lozad"></p><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191008163550.png" class="lozad"></p><ul><li>给浏览器添加提示信息<code>Msg,java</code></li></ul><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191008171200.png" class="lozad"></p><p>EmployeeController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yanghan.crud.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.yanghan.crud.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> com.yanghan.crud.bean.Msg;</span><br><span class="line"><span class="keyword">import</span> com.yanghan.crud.service.EmployeeService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理员工CRUD请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有员工（ajax分页查询）</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/emps"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span>   <span class="comment">//可以将返回的pageInfo对象转为json字符串,需要导入Jackson包</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Msg <span class="title">getEmpsWithJson</span><span class="params">(@RequestParam(value = <span class="string">"pn"</span>,defaultValue = <span class="string">"1"</span>)</span>Integer pn, Model model) </span>&#123;</span><br><span class="line">        <span class="comment">//查询方法前调用PageHelper.startPage方法，紧跟在这个方法后的第一个MyBatis查询方法会被进行分页。</span></span><br><span class="line">        PageHelper.startPage(pn, <span class="number">5</span>);     <span class="comment">//获取第pn页，10条内容</span></span><br><span class="line">        List&lt;Employee&gt; emps = employeeService.getAll();</span><br><span class="line">        <span class="comment">//用PageInfo包装查询后的结果，只需将PageInfo交给页面即可</span></span><br><span class="line">        <span class="comment">//PageInfo对象包含了详细的分页信息，包括查询出的数据,连续显示的页数</span></span><br><span class="line">        PageInfo page = <span class="keyword">new</span> PageInfo(emps, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> Msg.success().add(<span class="string">"pageInfo"</span>,page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"utf-8"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%--引入核心标签库--%&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;员工列表&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%</span><br><span class="line">        pageContext.setAttribute(<span class="string">"APP_PATH"</span>, request.getContextPath());</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="static/js/jquery-1.12.4.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link href=<span class="string">"static/bootstrap-3.3.7-dist/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">    &lt;script src="static/bootstrap-3.3.7-dist/js/bootstrap.min.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 搭建显示页面 --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;!-- 标题 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12"</span>&gt;</span><br><span class="line">            &lt;h1&gt;SSM-CRUD&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 按钮 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4 col-md-offset-8"</span>&gt;</span><br><span class="line">            &lt;button class="btn btn-primary"&gt;新增&lt;/button&gt;</span><br><span class="line">            &lt;button class="btn btn-danger"&gt;删除&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!--数据--&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12"</span>&gt;</span><br><span class="line">            &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"table table-hover"</span> id=<span class="string">"emps_table"</span>&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;th&gt;#&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;邮箱&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;部门&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--分页信息--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;!-- 分页文字信息 --&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-6"</span> id=<span class="string">"page_info_area"</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!--分页条信息 --&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-6"</span> id=<span class="string">"page_nav_area"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//页面加载完成后，直接发送ajax请求，获取到分页数据</span></span><br><span class="line"></span><br><span class="line">    $(function () &#123;</span><br><span class="line">        <span class="comment">//第一次去首页</span></span><br><span class="line">        to_page(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">"$&#123;APP_PATH&#125;/emps"</span>,</span><br><span class="line">            data:<span class="string">"pn=1"</span>,</span><br><span class="line">            type:<span class="string">"get"</span>,</span><br><span class="line">            success:function (result) &#123;</span><br><span class="line">                <span class="comment">//获得数据</span></span><br><span class="line">                <span class="comment">// console.log(result);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//1.解析并显示分页数据</span></span><br><span class="line">                build_emps_table(result);</span><br><span class="line">                <span class="comment">//2.解析并显示分页信息</span></span><br><span class="line">                build_page_info(result);</span><br><span class="line">                <span class="comment">//3.解析并显示分页条</span></span><br><span class="line">                build_page_nav(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跳到指定页面</span></span><br><span class="line">    <span class="function">function <span class="title">to_page</span><span class="params">(pn)</span></span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">"$&#123;APP_PATH&#125;/emps"</span>,</span><br><span class="line">            data:<span class="string">"pn="</span>+pn,</span><br><span class="line">            type:<span class="string">"get"</span>,</span><br><span class="line">            success:function (result) &#123;</span><br><span class="line">                <span class="comment">//获得数据</span></span><br><span class="line">                <span class="comment">// console.log(result);</span></span><br><span class="line">                <span class="comment">//1.解析并显示分页数据</span></span><br><span class="line">                build_emps_table(result);</span><br><span class="line">                <span class="comment">//2.解析并显示分页信息</span></span><br><span class="line">                build_page_info(result);</span><br><span class="line">                <span class="comment">//3.解析并显示分页条</span></span><br><span class="line">                build_page_nav(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析显示表格数据</span></span><br><span class="line">    <span class="function">function <span class="title">build_emps_table</span><span class="params">(result)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先清空上一次的数据</span></span><br><span class="line">        $(<span class="string">"#emps_table tbody"</span>).empty();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出json字符串的分页数据</span></span><br><span class="line">        <span class="keyword">var</span> emps = result.extend.pageInfo.list;</span><br><span class="line">        <span class="comment">//遍历分页数据，index是索引，item是某个属性的集合</span></span><br><span class="line">        $.each(emps,function(index,item)&#123;</span><br><span class="line">           <span class="comment">// alert(item.empName);</span></span><br><span class="line">            <span class="comment">//构建单元格(append用来追加元素)</span></span><br><span class="line">            <span class="keyword">var</span> empIdTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.empId);</span><br><span class="line">            <span class="keyword">var</span> empNameTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.empName);</span><br><span class="line">            <span class="keyword">var</span> genderTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.gender==<span class="string">'M'</span>?<span class="string">"男"</span>:<span class="string">"女"</span>);</span><br><span class="line">            <span class="keyword">var</span> emailTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.email);</span><br><span class="line">            <span class="keyword">var</span> deptNameTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.department.deptName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// &lt;button class="btn btn-primary btn-sm"&gt;</span></span><br><span class="line">            <span class="comment">//     &lt;span class="glyphicon glyphicon-pencil" aria-hidden="true"&gt;&lt;/span&gt;编辑</span></span><br><span class="line">            <span class="comment">// &lt;/button&gt;</span></span><br><span class="line">            <span class="comment">// &lt;button class="btn btn-danger btn-sm"&gt;</span></span><br><span class="line">            <span class="comment">//     &lt;span class="glyphicon glyphicon-trash" aria-hidden="true"&gt;&lt;/span&gt;删除</span></span><br><span class="line">            <span class="comment">// &lt;/button&gt;</span></span><br><span class="line">            <span class="keyword">var</span> editBtn = $(<span class="string">"&lt;button&gt;&lt;/button&gt;"</span>).addClass(<span class="string">"btn btn-primary btn-sm"</span>)</span><br><span class="line">                .append(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).addClass(<span class="string">"glyphicon glyphicon-pencil"</span>).append(<span class="string">"修改"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> delBtn = $(<span class="string">"&lt;button&gt;&lt;/button&gt;"</span>).addClass(<span class="string">"btn btn-danger btn-sm"</span>)</span><br><span class="line">                .append(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).addClass(<span class="string">"glyphicon glyphicon-trash"</span>).append(<span class="string">"删除"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将按钮放在一个单元格中</span></span><br><span class="line">            <span class="keyword">var</span> btnTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(editBtn).append(<span class="string">" "</span>).append(delBtn);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//构建行(将单元格拼接成行，appendTo表示将该行添加到id为emps_table的tbody标签中)</span></span><br><span class="line">            $(<span class="string">"&lt;tr&gt;&lt;/tr&gt;"</span>).append(empIdTd).append(empNameTd)</span><br><span class="line">                .append(genderTd).append(emailTd).append(deptNameTd)</span><br><span class="line">                .append(btnTd).appendTo(<span class="string">"#emps_table tbody"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析显示分页信息</span></span><br><span class="line">    <span class="function">function <span class="title">build_page_info</span><span class="params">(result)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先清空上一次的数据</span></span><br><span class="line">        $(<span class="string">"#page_info_area"</span>).empty();</span><br><span class="line">        $(<span class="string">"#page_info_area"</span>).append(<span class="string">"当前"</span> + result.extend.pageInfo.pageNum + <span class="string">"/"</span></span><br><span class="line">            + result.extend.pageInfo.pages + <span class="string">"页，共"</span> + result.extend.pageInfo.total + <span class="string">"页"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析构建分页条信息，点击进行跳转下一页</span></span><br><span class="line">    <span class="function">function <span class="title">build_page_nav</span><span class="params">(result)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先清空上一次的数据</span></span><br><span class="line">        $(<span class="string">"#page_nav_area"</span>).empty();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> ul = $(<span class="string">"&lt;ul&gt;&lt;/ul&gt;"</span>).addClass(<span class="string">"pagination"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建元素</span></span><br><span class="line">        <span class="keyword">var</span> firstPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(<span class="string">"首页"</span>).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line">        <span class="keyword">var</span> prePageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(<span class="string">"&amp;laquo;"</span>));</span><br><span class="line">        <span class="keyword">if</span> (result.extend.pageInfo.hasPreviousPage == <span class="keyword">false</span>) &#123;</span><br><span class="line">            firstPageLi.addClass(<span class="string">"disabled"</span>);</span><br><span class="line">            prePageLi.addClass(<span class="string">"disabled"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//为元素添加翻页事件</span></span><br><span class="line">            firstPageLi.click(function () &#123;</span><br><span class="line">                to_page(<span class="number">1</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            prePageLi.click(function () &#123;</span><br><span class="line">                to_page(result.extend.pageInfo.pageNum -<span class="number">1</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> nextPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(<span class="string">"&amp;raquo;"</span>));</span><br><span class="line">        <span class="keyword">var</span> lastPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(<span class="string">"末页"</span>).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line">        <span class="keyword">if</span> (result.extend.pageInfo.hasNextPage == <span class="keyword">false</span>) &#123;</span><br><span class="line">            nextPageLi.addClass(<span class="string">"disabled"</span>);</span><br><span class="line">            lastPageLi.addClass(<span class="string">"disabled"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            nextPageLi.click(function () &#123;</span><br><span class="line">                to_page(result.extend.pageInfo.pageNum +<span class="number">1</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            lastPageLi.click(function () &#123;</span><br><span class="line">                to_page(result.extend.pageInfo.pages);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//页码1，2，3，4</span></span><br><span class="line">        ul.append(firstPageLi).append(prePageLi);</span><br><span class="line">        $.each(result.extend.pageInfo.navigatepageNums,function (index, item) &#123;</span><br><span class="line">            <span class="keyword">var</span> numLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(item));</span><br><span class="line">            <span class="keyword">if</span> (result.extend.pageInfo.pageNum == item) &#123;</span><br><span class="line">                numLi.addClass(<span class="string">"active"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            numLi.click(function () &#123;</span><br><span class="line">                to_page(item);</span><br><span class="line">            &#125;);</span><br><span class="line">            ul.append(numLi);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        ul.append(nextPageLi).append(lastPageLi);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把ul加入到nav</span></span><br><span class="line">        <span class="keyword">var</span> navEle = $(<span class="string">"&lt;nav&gt;&lt;/nav&gt;"</span>).append(ul);</span><br><span class="line">        navEle.appendTo(<span class="string">"#page_nav_area"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/img/20191008211100.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查询操作&quot;&gt;&lt;a href=&quot;#查询操作&quot; class=&quot;headerlink&quot; title=&quot;查询操作&quot;&gt;&lt;/a&gt;查询操作&lt;/h1&gt;&lt;p&gt;需求：获取数据库的数据到主页。&lt;/p&gt;
&lt;h2 id=&quot;1，查询步骤（model方法）&quot;&gt;&lt;a href=&quot;#1，查询步骤（
      
    
    </summary>
    
      <category term="SSM" scheme="https://cometorbityh.github.io/categories/SSM/"/>
    
    
      <category term="SSM" scheme="https://cometorbityh.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>JS语法基础2</title>
    <link href="https://cometorbityh.github.io/2019/10/08/JS%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802/"/>
    <id>https://cometorbityh.github.io/2019/10/08/JS语法基础2/</id>
    <published>2019-10-08T07:15:05.000Z</published>
    <updated>2019-10-08T07:15:05.569Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
